// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.6.0

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google API Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 20190224
// Generated by:
//    Tool: google-apis-code-generator 1.6.0
//     C++: 0.1.5
#ifndef  GOOGLE_BIGQUERY_API_TABLE_DATA_INSERT_ALL_RESPONSE_H_
#define  GOOGLE_BIGQUERY_API_TABLE_DATA_INSERT_ALL_RESPONSE_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/client/data/jsoncpp_data.h"

#include "google/bigquery_api/error_proto.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class TableDataInsertAllResponse : public client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class TableDataInsertAllResponseInsertErrors : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static TableDataInsertAllResponseInsertErrors* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TableDataInsertAllResponseInsertErrors(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TableDataInsertAllResponseInsertErrors(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~TableDataInsertAllResponseInsertErrors();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return
     * <code>google_bigquery_api::TableDataInsertAllResponseInsertErrors</code>
     */
    const char* GetTypeName() const {
      return "google_bigquery_api::TableDataInsertAllResponseInsertErrors";
    }

    /**
     * Determine if the '<code>errors</code>' attribute was set.
     *
     * @return true if the '<code>errors</code>' attribute was set.
     */
    bool has_errors() const {
      return Storage().isMember("errors");
    }

    /**
     * Clears the '<code>errors</code>' attribute.
     */
    void clear_errors() {
      MutableStorage()->removeMember("errors");
    }


    /**
     * Get a reference to the value of the '<code>errors</code>' attribute.
     */
    const client::JsonCppArray<ErrorProto > get_errors() const;

    /**
     * Gets a reference to a mutable value of the '<code>errors</code>'
     * property.
     *
     * Error information for the row indicated by the index property.
     *
     * @return The result can be modified to change the attribute value.
     */
    client::JsonCppArray<ErrorProto > mutable_errors();

    /**
     * Determine if the '<code>index</code>' attribute was set.
     *
     * @return true if the '<code>index</code>' attribute was set.
     */
    bool has_index() const {
      return Storage().isMember("index");
    }

    /**
     * Clears the '<code>index</code>' attribute.
     */
    void clear_index() {
      MutableStorage()->removeMember("index");
    }


    /**
     * Get the value of the '<code>index</code>' attribute.
     */
    uint32 get_index() const {
      const Json::Value& storage = Storage("index");
      return client::JsonValueToCppValueHelper<uint32 >(storage);
    }

    /**
     * Change the '<code>index</code>' attribute.
     *
     * The index of the row that error applies to.
     *
     * @param[in] value The new value.
     */
    void set_index(uint32 value) {
      client::SetJsonValueFromCppValueHelper<uint32 >(
        value, MutableStorage("index"));
    }

   private:
    void operator=(const TableDataInsertAllResponseInsertErrors&);
  };  // TableDataInsertAllResponseInsertErrors
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static TableDataInsertAllResponse* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit TableDataInsertAllResponse(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit TableDataInsertAllResponse(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~TableDataInsertAllResponse();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::TableDataInsertAllResponse</code>
   */
  const char* GetTypeName() const {
    return "google_bigquery_api::TableDataInsertAllResponse";
  }

  /**
   * Determine if the '<code>insertErrors</code>' attribute was set.
   *
   * @return true if the '<code>insertErrors</code>' attribute was set.
   */
  bool has_insert_errors() const {
    return Storage().isMember("insertErrors");
  }

  /**
   * Clears the '<code>insertErrors</code>' attribute.
   */
  void clear_insert_errors() {
    MutableStorage()->removeMember("insertErrors");
  }


  /**
   * Get a reference to the value of the '<code>insertErrors</code>' attribute.
   */
  const client::JsonCppArray<TableDataInsertAllResponseInsertErrors > get_insert_errors() const {
     const Json::Value& storage = Storage("insertErrors");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<TableDataInsertAllResponseInsertErrors > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>insertErrors</code>'
   * property.
   *
   * An array of errors for rows that were not inserted.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<TableDataInsertAllResponseInsertErrors > mutable_insertErrors() {
    Json::Value* storage = MutableStorage("insertErrors");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<TableDataInsertAllResponseInsertErrors > >(storage);
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const std::string get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * The resource type of the response.
   *
   * @param[in] value The new value.
   */
  void set_kind(const std::string& value) {
    *MutableStorage("kind") = value.data();
  }

 private:
  void operator=(const TableDataInsertAllResponse&);
};  // TableDataInsertAllResponse
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_TABLE_DATA_INSERT_ALL_RESPONSE_H_
