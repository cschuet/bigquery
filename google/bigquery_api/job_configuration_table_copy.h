// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2018-10-08 17:45:39 UTC
//   on: 2019-03-01, 03:01:16 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 427
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_BIGQUERY_API_JOB_CONFIGURATION_TABLE_COPY_H_
#define  GOOGLE_BIGQUERY_API_JOB_CONFIGURATION_TABLE_COPY_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/bigquery_api/encryption_configuration.h"
#include "google/bigquery_api/table_reference.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class JobConfigurationTableCopy : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static JobConfigurationTableCopy* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit JobConfigurationTableCopy(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit JobConfigurationTableCopy(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~JobConfigurationTableCopy();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::JobConfigurationTableCopy</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_bigquery_api::JobConfigurationTableCopy");
  }

  /**
   * Determine if the '<code>createDisposition</code>' attribute was set.
   *
   * @return true if the '<code>createDisposition</code>' attribute was set.
   */
  bool has_create_disposition() const {
    return Storage().isMember("createDisposition");
  }

  /**
   * Clears the '<code>createDisposition</code>' attribute.
   */
  void clear_create_disposition() {
    MutableStorage()->removeMember("createDisposition");
  }


  /**
   * Get the value of the '<code>createDisposition</code>' attribute.
   */
  const StringPiece get_create_disposition() const {
    const Json::Value& v = Storage("createDisposition");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>createDisposition</code>' attribute.
   *
   * [Optional] Specifies whether the job is allowed to create new tables. The
   * following values are supported: CREATE_IF_NEEDED: If the table does not
   * exist, BigQuery creates the table. CREATE_NEVER: The table must already
   * exist. If it does not, a 'notFound' error is returned in the job result.
   * The default value is CREATE_IF_NEEDED. Creation, truncation and append
   * actions occur as one atomic update upon job completion.
   *
   * @param[in] value The new value.
   */
  void set_create_disposition(const StringPiece& value) {
    *MutableStorage("createDisposition") = value.data();
  }

  /**
   * Determine if the '<code>destinationEncryptionConfiguration</code>'
   * attribute was set.
   *
   * @return true if the '<code>destinationEncryptionConfiguration</code>'
   * attribute was set.
   */
  bool has_destination_encryption_configuration() const {
    return Storage().isMember("destinationEncryptionConfiguration");
  }

  /**
   * Clears the '<code>destinationEncryptionConfiguration</code>' attribute.
   */
  void clear_destination_encryption_configuration() {
    MutableStorage()->removeMember("destinationEncryptionConfiguration");
  }


  /**
   * Get a reference to the value of the
   * '<code>destinationEncryptionConfiguration</code>' attribute.
   */
  const EncryptionConfiguration get_destination_encryption_configuration() const;

  /**
   * Gets a reference to a mutable value of the
   * '<code>destinationEncryptionConfiguration</code>' property.
   *
   * Custom encryption configuration (e.g., Cloud KMS keys).
   *
   * @return The result can be modified to change the attribute value.
   */
  EncryptionConfiguration mutable_destinationEncryptionConfiguration();

  /**
   * Determine if the '<code>destinationTable</code>' attribute was set.
   *
   * @return true if the '<code>destinationTable</code>' attribute was set.
   */
  bool has_destination_table() const {
    return Storage().isMember("destinationTable");
  }

  /**
   * Clears the '<code>destinationTable</code>' attribute.
   */
  void clear_destination_table() {
    MutableStorage()->removeMember("destinationTable");
  }


  /**
   * Get a reference to the value of the '<code>destinationTable</code>'
   * attribute.
   */
  const TableReference get_destination_table() const;

  /**
   * Gets a reference to a mutable value of the '<code>destinationTable</code>'
   * property.
   *
   * [Required] The destination table.
   *
   * @return The result can be modified to change the attribute value.
   */
  TableReference mutable_destinationTable();

  /**
   * Determine if the '<code>sourceTable</code>' attribute was set.
   *
   * @return true if the '<code>sourceTable</code>' attribute was set.
   */
  bool has_source_table() const {
    return Storage().isMember("sourceTable");
  }

  /**
   * Clears the '<code>sourceTable</code>' attribute.
   */
  void clear_source_table() {
    MutableStorage()->removeMember("sourceTable");
  }


  /**
   * Get a reference to the value of the '<code>sourceTable</code>' attribute.
   */
  const TableReference get_source_table() const;

  /**
   * Gets a reference to a mutable value of the '<code>sourceTable</code>'
   * property.
   *
   * [Pick one] Source table to copy.
   *
   * @return The result can be modified to change the attribute value.
   */
  TableReference mutable_sourceTable();

  /**
   * Determine if the '<code>sourceTables</code>' attribute was set.
   *
   * @return true if the '<code>sourceTables</code>' attribute was set.
   */
  bool has_source_tables() const {
    return Storage().isMember("sourceTables");
  }

  /**
   * Clears the '<code>sourceTables</code>' attribute.
   */
  void clear_source_tables() {
    MutableStorage()->removeMember("sourceTables");
  }


  /**
   * Get a reference to the value of the '<code>sourceTables</code>' attribute.
   */
  const client::JsonCppArray<TableReference > get_source_tables() const;

  /**
   * Gets a reference to a mutable value of the '<code>sourceTables</code>'
   * property.
   *
   * [Pick one] Source tables to copy.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<TableReference > mutable_sourceTables();

  /**
   * Determine if the '<code>writeDisposition</code>' attribute was set.
   *
   * @return true if the '<code>writeDisposition</code>' attribute was set.
   */
  bool has_write_disposition() const {
    return Storage().isMember("writeDisposition");
  }

  /**
   * Clears the '<code>writeDisposition</code>' attribute.
   */
  void clear_write_disposition() {
    MutableStorage()->removeMember("writeDisposition");
  }


  /**
   * Get the value of the '<code>writeDisposition</code>' attribute.
   */
  const StringPiece get_write_disposition() const {
    const Json::Value& v = Storage("writeDisposition");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>writeDisposition</code>' attribute.
   *
   * [Optional] Specifies the action that occurs if the destination table
   * already exists. The following values are supported: WRITE_TRUNCATE: If the
   * table already exists, BigQuery overwrites the table data. WRITE_APPEND: If
   * the table already exists, BigQuery appends the data to the table.
   * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate'
   * error is returned in the job result. The default value is WRITE_EMPTY. Each
   * action is atomic and only occurs if BigQuery is able to complete the job
   * successfully. Creation, truncation and append actions occur as one atomic
   * update upon job completion.
   *
   * @param[in] value The new value.
   */
  void set_write_disposition(const StringPiece& value) {
    *MutableStorage("writeDisposition") = value.data();
  }

 private:
  void operator=(const JobConfigurationTableCopy&);
};  // JobConfigurationTableCopy
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_JOB_CONFIGURATION_TABLE_COPY_H_
