// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.6.0

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google API Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Description:
//   A data platform for customers to create, manage, share and query data.
// Classes:
//   TableList
// Documentation:
//   https://cloud.google.com/bigquery/

#include "google/bigquery_api/table_list.h"

#include <string>

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/client/data/jsoncpp_data.h"

#include "google/bigquery_api/clustering.h"
#include "google/bigquery_api/table_reference.h"
#include "google/bigquery_api/time_partitioning.h"


#include "absl/strings/str_cat.h"


namespace google_bigquery_api {
using namespace googleapis;




// Object factory method (static).
TableList::TableListTables::TableListTablesView* TableList::TableListTables::TableListTablesView::New() {
  return new client::JsonCppCapsule<TableListTablesView>;
}

// Standard immutable constructor.
TableList::TableListTables::TableListTablesView::TableListTablesView(const Json::Value& storage)
  : client::JsonCppData(storage) {
}

// Standard mutable constructor.
TableList::TableListTables::TableListTablesView::TableListTablesView(Json::Value* storage)
  : client::JsonCppData(storage) {
}

// Standard destructor.
TableList::TableListTables::TableListTablesView::~TableListTablesView() {
}

// Properties.
// Object factory method (static).
TableList::TableListTables* TableList::TableListTables::New() {
  return new client::JsonCppCapsule<TableListTables>;
}

// Standard immutable constructor.
TableList::TableListTables::TableListTables(const Json::Value& storage)
  : client::JsonCppData(storage) {
}

// Standard mutable constructor.
TableList::TableListTables::TableListTables(Json::Value* storage)
  : client::JsonCppData(storage) {
}

// Standard destructor.
TableList::TableListTables::~TableListTables() {
}

// Properties.

const Clustering TableList::TableListTables::get_clustering() const {
   const Json::Value& storage = Storage("clustering");
   return client::JsonValueToCppValueHelper<Clustering >(storage);
}

Clustering TableList::TableListTables::mutable_clustering() {
  Json::Value* storage = MutableStorage("clustering");
  return client::JsonValueToMutableCppValueHelper<Clustering >(storage);
}

const TableReference TableList::TableListTables::get_table_reference() const {
   const Json::Value& storage = Storage("tableReference");
   return client::JsonValueToCppValueHelper<TableReference >(storage);
}

TableReference TableList::TableListTables::mutable_tableReference() {
  Json::Value* storage = MutableStorage("tableReference");
  return client::JsonValueToMutableCppValueHelper<TableReference >(storage);
}

const TimePartitioning TableList::TableListTables::get_time_partitioning() const {
   const Json::Value& storage = Storage("timePartitioning");
   return client::JsonValueToCppValueHelper<TimePartitioning >(storage);
}

TimePartitioning TableList::TableListTables::mutable_timePartitioning() {
  Json::Value* storage = MutableStorage("timePartitioning");
  return client::JsonValueToMutableCppValueHelper<TimePartitioning >(storage);
}
// Object factory method (static).
TableList* TableList::New() {
  return new client::JsonCppCapsule<TableList>;
}

// Standard immutable constructor.
TableList::TableList(const Json::Value& storage)
  : client::JsonCppData(storage) {
}

// Standard mutable constructor.
TableList::TableList(Json::Value* storage)
  : client::JsonCppData(storage) {
}

// Standard destructor.
TableList::~TableList() {
}

// Properties.
}  // namespace google_bigquery_api
