// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2018-10-08 17:45:39 UTC
//   on: 2019-03-01, 03:01:16 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 427
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_BIGQUERY_API_JOB_CONFIGURATION_EXTRACT_H_
#define  GOOGLE_BIGQUERY_API_JOB_CONFIGURATION_EXTRACT_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/bigquery_api/table_reference.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class JobConfigurationExtract : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static JobConfigurationExtract* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit JobConfigurationExtract(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit JobConfigurationExtract(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~JobConfigurationExtract();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::JobConfigurationExtract</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_bigquery_api::JobConfigurationExtract");
  }

  /**
   * Determine if the '<code>compression</code>' attribute was set.
   *
   * @return true if the '<code>compression</code>' attribute was set.
   */
  bool has_compression() const {
    return Storage().isMember("compression");
  }

  /**
   * Clears the '<code>compression</code>' attribute.
   */
  void clear_compression() {
    MutableStorage()->removeMember("compression");
  }


  /**
   * Get the value of the '<code>compression</code>' attribute.
   */
  const StringPiece get_compression() const {
    const Json::Value& v = Storage("compression");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>compression</code>' attribute.
   *
   * [Optional] The compression type to use for exported files. Possible values
   * include GZIP, DEFLATE, SNAPPY, and NONE. The default value is NONE. DEFLATE
   * and SNAPPY are only supported for Avro.
   *
   * @param[in] value The new value.
   */
  void set_compression(const StringPiece& value) {
    *MutableStorage("compression") = value.data();
  }

  /**
   * Determine if the '<code>destinationFormat</code>' attribute was set.
   *
   * @return true if the '<code>destinationFormat</code>' attribute was set.
   */
  bool has_destination_format() const {
    return Storage().isMember("destinationFormat");
  }

  /**
   * Clears the '<code>destinationFormat</code>' attribute.
   */
  void clear_destination_format() {
    MutableStorage()->removeMember("destinationFormat");
  }


  /**
   * Get the value of the '<code>destinationFormat</code>' attribute.
   */
  const StringPiece get_destination_format() const {
    const Json::Value& v = Storage("destinationFormat");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>destinationFormat</code>' attribute.
   *
   * [Optional] The exported file format. Possible values include CSV,
   * NEWLINE_DELIMITED_JSON and AVRO. The default value is CSV. Tables with
   * nested or repeated fields cannot be exported as CSV.
   *
   * @param[in] value The new value.
   */
  void set_destination_format(const StringPiece& value) {
    *MutableStorage("destinationFormat") = value.data();
  }

  /**
   * Determine if the '<code>destinationUri</code>' attribute was set.
   *
   * @return true if the '<code>destinationUri</code>' attribute was set.
   */
  bool has_destination_uri() const {
    return Storage().isMember("destinationUri");
  }

  /**
   * Clears the '<code>destinationUri</code>' attribute.
   */
  void clear_destination_uri() {
    MutableStorage()->removeMember("destinationUri");
  }


  /**
   * Get the value of the '<code>destinationUri</code>' attribute.
   */
  const StringPiece get_destination_uri() const {
    const Json::Value& v = Storage("destinationUri");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>destinationUri</code>' attribute.
   *
   * [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as
   * necessary. The fully-qualified Google Cloud Storage URI where the extracted
   * table should be written.
   *
   * @param[in] value The new value.
   */
  void set_destination_uri(const StringPiece& value) {
    *MutableStorage("destinationUri") = value.data();
  }

  /**
   * Determine if the '<code>destinationUris</code>' attribute was set.
   *
   * @return true if the '<code>destinationUris</code>' attribute was set.
   */
  bool has_destination_uris() const {
    return Storage().isMember("destinationUris");
  }

  /**
   * Clears the '<code>destinationUris</code>' attribute.
   */
  void clear_destination_uris() {
    MutableStorage()->removeMember("destinationUris");
  }


  /**
   * Get a reference to the value of the '<code>destinationUris</code>'
   * attribute.
   */
  const client::JsonCppArray<string > get_destination_uris() const {
     const Json::Value& storage = Storage("destinationUris");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>destinationUris</code>'
   * property.
   *
   * [Pick one] A list of fully-qualified Google Cloud Storage URIs where the
   * extracted table should be written.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_destinationUris() {
    Json::Value* storage = MutableStorage("destinationUris");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>fieldDelimiter</code>' attribute was set.
   *
   * @return true if the '<code>fieldDelimiter</code>' attribute was set.
   */
  bool has_field_delimiter() const {
    return Storage().isMember("fieldDelimiter");
  }

  /**
   * Clears the '<code>fieldDelimiter</code>' attribute.
   */
  void clear_field_delimiter() {
    MutableStorage()->removeMember("fieldDelimiter");
  }


  /**
   * Get the value of the '<code>fieldDelimiter</code>' attribute.
   */
  const StringPiece get_field_delimiter() const {
    const Json::Value& v = Storage("fieldDelimiter");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>fieldDelimiter</code>' attribute.
   *
   * [Optional] Delimiter to use between fields in the exported data. Default is
   * ','.
   *
   * @param[in] value The new value.
   */
  void set_field_delimiter(const StringPiece& value) {
    *MutableStorage("fieldDelimiter") = value.data();
  }

  /**
   * Determine if the '<code>printHeader</code>' attribute was set.
   *
   * @return true if the '<code>printHeader</code>' attribute was set.
   */
  bool has_print_header() const {
    return Storage().isMember("printHeader");
  }

  /**
   * Clears the '<code>printHeader</code>' attribute.
   */
  void clear_print_header() {
    MutableStorage()->removeMember("printHeader");
  }


  /**
   * Get the value of the '<code>printHeader</code>' attribute.
   */
  bool get_print_header() const {
    const Json::Value& storage = Storage("printHeader");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>printHeader</code>' attribute.
   *
   * [Optional] Whether to print out a header row in the results. Default is
   * true.
   *
   * @param[in] value The new value.
   */
  void set_print_header(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("printHeader"));
  }

  /**
   * Determine if the '<code>sourceTable</code>' attribute was set.
   *
   * @return true if the '<code>sourceTable</code>' attribute was set.
   */
  bool has_source_table() const {
    return Storage().isMember("sourceTable");
  }

  /**
   * Clears the '<code>sourceTable</code>' attribute.
   */
  void clear_source_table() {
    MutableStorage()->removeMember("sourceTable");
  }


  /**
   * Get a reference to the value of the '<code>sourceTable</code>' attribute.
   */
  const TableReference get_source_table() const;

  /**
   * Gets a reference to a mutable value of the '<code>sourceTable</code>'
   * property.
   *
   * [Required] A reference to the table being exported.
   *
   * @return The result can be modified to change the attribute value.
   */
  TableReference mutable_sourceTable();

 private:
  void operator=(const JobConfigurationExtract&);
};  // JobConfigurationExtract
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_JOB_CONFIGURATION_EXTRACT_H_
