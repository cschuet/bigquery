// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2018-10-08 17:45:39 UTC
//   on: 2019-03-01, 03:01:16 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 427
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_BIGQUERY_API_RANGE_PARTITIONING_H_
#define  GOOGLE_BIGQUERY_API_RANGE_PARTITIONING_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class RangePartitioning : public client::JsonCppData {
 public:
  /**
   * [TrustedTester] [Required] Defines the ranges for range partitioning.
   *
   * @ingroup DataObject
   */
  class RangePartitioningRange : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static RangePartitioningRange* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit RangePartitioningRange(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit RangePartitioningRange(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~RangePartitioningRange();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_bigquery_api::RangePartitioningRange</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_bigquery_api::RangePartitioningRange");
    }

    /**
     * Determine if the '<code>end</code>' attribute was set.
     *
     * @return true if the '<code>end</code>' attribute was set.
     */
    bool has_end() const {
      return Storage().isMember("end");
    }

    /**
     * Clears the '<code>end</code>' attribute.
     */
    void clear_end() {
      MutableStorage()->removeMember("end");
    }


    /**
     * Get the value of the '<code>end</code>' attribute.
     */
    int64 get_end() const {
      const Json::Value& storage = Storage("end");
      return client::JsonValueToCppValueHelper<int64 >(storage);
    }

    /**
     * Change the '<code>end</code>' attribute.
     *
     * [TrustedTester] [Required] The end of range partitioning, exclusive.
     *
     * @param[in] value The new value.
     */
    void set_end(int64 value) {
      client::SetJsonValueFromCppValueHelper<int64 >(
        value, MutableStorage("end"));
    }

    /**
     * Determine if the '<code>interval</code>' attribute was set.
     *
     * @return true if the '<code>interval</code>' attribute was set.
     */
    bool has_interval() const {
      return Storage().isMember("interval");
    }

    /**
     * Clears the '<code>interval</code>' attribute.
     */
    void clear_interval() {
      MutableStorage()->removeMember("interval");
    }


    /**
     * Get the value of the '<code>interval</code>' attribute.
     */
    int64 get_interval() const {
      const Json::Value& storage = Storage("interval");
      return client::JsonValueToCppValueHelper<int64 >(storage);
    }

    /**
     * Change the '<code>interval</code>' attribute.
     *
     * [TrustedTester] [Required] The width of each interval.
     *
     * @param[in] value The new value.
     */
    void set_interval(int64 value) {
      client::SetJsonValueFromCppValueHelper<int64 >(
        value, MutableStorage("interval"));
    }

    /**
     * Determine if the '<code>start</code>' attribute was set.
     *
     * @return true if the '<code>start</code>' attribute was set.
     */
    bool has_start() const {
      return Storage().isMember("start");
    }

    /**
     * Clears the '<code>start</code>' attribute.
     */
    void clear_start() {
      MutableStorage()->removeMember("start");
    }


    /**
     * Get the value of the '<code>start</code>' attribute.
     */
    int64 get_start() const {
      const Json::Value& storage = Storage("start");
      return client::JsonValueToCppValueHelper<int64 >(storage);
    }

    /**
     * Change the '<code>start</code>' attribute.
     *
     * [TrustedTester] [Required] The start of range partitioning, inclusive.
     *
     * @param[in] value The new value.
     */
    void set_start(int64 value) {
      client::SetJsonValueFromCppValueHelper<int64 >(
        value, MutableStorage("start"));
    }

   private:
    void operator=(const RangePartitioningRange&);
  };  // RangePartitioningRange
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static RangePartitioning* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit RangePartitioning(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit RangePartitioning(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~RangePartitioning();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::RangePartitioning</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_bigquery_api::RangePartitioning");
  }

  /**
   * Determine if the '<code>field</code>' attribute was set.
   *
   * @return true if the '<code>field</code>' attribute was set.
   */
  bool has_field() const {
    return Storage().isMember("field");
  }

  /**
   * Clears the '<code>field</code>' attribute.
   */
  void clear_field() {
    MutableStorage()->removeMember("field");
  }


  /**
   * Get the value of the '<code>field</code>' attribute.
   */
  const StringPiece get_field() const {
    const Json::Value& v = Storage("field");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>field</code>' attribute.
   *
   * [TrustedTester] [Required] The table is partitioned by this field. The
   * field must be a top-level NULLABLE/REQUIRED field. The only supported type
   * is INTEGER/INT64.
   *
   * @param[in] value The new value.
   */
  void set_field(const StringPiece& value) {
    *MutableStorage("field") = value.data();
  }

  /**
   * Determine if the '<code>range</code>' attribute was set.
   *
   * @return true if the '<code>range</code>' attribute was set.
   */
  bool has_range() const {
    return Storage().isMember("range");
  }

  /**
   * Clears the '<code>range</code>' attribute.
   */
  void clear_range() {
    MutableStorage()->removeMember("range");
  }


  /**
   * Get a reference to the value of the '<code>range</code>' attribute.
   */
  const RangePartitioningRange get_range() const {
     const Json::Value& storage = Storage("range");
    return client::JsonValueToCppValueHelper<RangePartitioningRange >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>range</code>' property.
   *
   * [TrustedTester] [Required] Defines the ranges for range partitioning.
   *
   * @return The result can be modified to change the attribute value.
   */
  RangePartitioningRange mutable_range() {
    Json::Value* storage = MutableStorage("range");
    return client::JsonValueToMutableCppValueHelper<RangePartitioningRange >(storage);
  }

 private:
  void operator=(const RangePartitioning&);
};  // RangePartitioning
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_RANGE_PARTITIONING_H_
