// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2018-10-08 17:45:39 UTC
//   on: 2019-03-01, 03:01:16 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 427
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_BIGQUERY_API_TABLE_LIST_H_
#define  GOOGLE_BIGQUERY_API_TABLE_LIST_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/bigquery_api/clustering.h"
#include "google/bigquery_api/table_reference.h"
#include "google/bigquery_api/time_partitioning.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class TableList : public client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class TableListTables : public client::JsonCppData {
   public:
    /**
     * Additional details for a view.
     *
     * @ingroup DataObject
     */
    class TableListTablesView : public client::JsonCppData {
     public:
      /**
       * Creates a new default instance.
       *
       * @return Ownership is passed back to the caller.
       */
      static TableListTablesView* New();

      /**
       * Standard constructor for an immutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit TableListTablesView(const Json::Value& storage);

      /**
       * Standard constructor for a mutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit TableListTablesView(Json::Value* storage);

      /**
       * Standard destructor.
       */
      virtual ~TableListTablesView();

      /**
       * Returns a string denoting the type of this data object.
       *
       * @return <code>google_bigquery_api::TableListTablesView</code>
       */
      const StringPiece GetTypeName() const {
        return StringPiece("google_bigquery_api::TableListTablesView");
      }

      /**
       * Determine if the '<code>useLegacySql</code>' attribute was set.
       *
       * @return true if the '<code>useLegacySql</code>' attribute was set.
       */
      bool has_use_legacy_sql() const {
        return Storage().isMember("useLegacySql");
      }

      /**
       * Clears the '<code>useLegacySql</code>' attribute.
       */
      void clear_use_legacy_sql() {
        MutableStorage()->removeMember("useLegacySql");
      }


      /**
       * Get the value of the '<code>useLegacySql</code>' attribute.
       */
      bool get_use_legacy_sql() const {
        const Json::Value& storage = Storage("useLegacySql");
        return client::JsonValueToCppValueHelper<bool >(storage);
      }

      /**
       * Change the '<code>useLegacySql</code>' attribute.
       *
       * True if view is defined in legacy SQL dialect, false if in standard
       * SQL.
       *
       * @param[in] value The new value.
       */
      void set_use_legacy_sql(bool value) {
        client::SetJsonValueFromCppValueHelper<bool >(
          value, MutableStorage("useLegacySql"));
      }

     private:
      void operator=(const TableListTablesView&);
    };  // TableListTablesView
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static TableListTables* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TableListTables(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TableListTables(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~TableListTables();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_bigquery_api::TableListTables</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_bigquery_api::TableListTables");
    }

    /**
     * Determine if the '<code>clustering</code>' attribute was set.
     *
     * @return true if the '<code>clustering</code>' attribute was set.
     */
    bool has_clustering() const {
      return Storage().isMember("clustering");
    }

    /**
     * Clears the '<code>clustering</code>' attribute.
     */
    void clear_clustering() {
      MutableStorage()->removeMember("clustering");
    }


    /**
     * Get a reference to the value of the '<code>clustering</code>' attribute.
     */
    const Clustering get_clustering() const;

    /**
     * Gets a reference to a mutable value of the '<code>clustering</code>'
     * property.
     *
     * [Beta] Clustering specification for this table, if configured.
     *
     * @return The result can be modified to change the attribute value.
     */
    Clustering mutable_clustering();

    /**
     * Determine if the '<code>creationTime</code>' attribute was set.
     *
     * @return true if the '<code>creationTime</code>' attribute was set.
     */
    bool has_creation_time() const {
      return Storage().isMember("creationTime");
    }

    /**
     * Clears the '<code>creationTime</code>' attribute.
     */
    void clear_creation_time() {
      MutableStorage()->removeMember("creationTime");
    }


    /**
     * Get the value of the '<code>creationTime</code>' attribute.
     */
    int64 get_creation_time() const {
      const Json::Value& storage = Storage("creationTime");
      return client::JsonValueToCppValueHelper<int64 >(storage);
    }

    /**
     * Change the '<code>creationTime</code>' attribute.
     *
     * The time when this table was created, in milliseconds since the epoch.
     *
     * @param[in] value The new value.
     */
    void set_creation_time(int64 value) {
      client::SetJsonValueFromCppValueHelper<int64 >(
        value, MutableStorage("creationTime"));
    }

    /**
     * Determine if the '<code>expirationTime</code>' attribute was set.
     *
     * @return true if the '<code>expirationTime</code>' attribute was set.
     */
    bool has_expiration_time() const {
      return Storage().isMember("expirationTime");
    }

    /**
     * Clears the '<code>expirationTime</code>' attribute.
     */
    void clear_expiration_time() {
      MutableStorage()->removeMember("expirationTime");
    }


    /**
     * Get the value of the '<code>expirationTime</code>' attribute.
     */
    int64 get_expiration_time() const {
      const Json::Value& storage = Storage("expirationTime");
      return client::JsonValueToCppValueHelper<int64 >(storage);
    }

    /**
     * Change the '<code>expirationTime</code>' attribute.
     *
     * [Optional] The time when this table expires, in milliseconds since the
     * epoch. If not present, the table will persist indefinitely. Expired
     * tables will be deleted and their storage reclaimed.
     *
     * @param[in] value The new value.
     */
    void set_expiration_time(int64 value) {
      client::SetJsonValueFromCppValueHelper<int64 >(
        value, MutableStorage("expirationTime"));
    }

    /**
     * Determine if the '<code>friendlyName</code>' attribute was set.
     *
     * @return true if the '<code>friendlyName</code>' attribute was set.
     */
    bool has_friendly_name() const {
      return Storage().isMember("friendlyName");
    }

    /**
     * Clears the '<code>friendlyName</code>' attribute.
     */
    void clear_friendly_name() {
      MutableStorage()->removeMember("friendlyName");
    }


    /**
     * Get the value of the '<code>friendlyName</code>' attribute.
     */
    const StringPiece get_friendly_name() const {
      const Json::Value& v = Storage("friendlyName");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>friendlyName</code>' attribute.
     *
     * The user-friendly name for this table.
     *
     * @param[in] value The new value.
     */
    void set_friendly_name(const StringPiece& value) {
      *MutableStorage("friendlyName") = value.data();
    }

    /**
     * Determine if the '<code>id</code>' attribute was set.
     *
     * @return true if the '<code>id</code>' attribute was set.
     */
    bool has_id() const {
      return Storage().isMember("id");
    }

    /**
     * Clears the '<code>id</code>' attribute.
     */
    void clear_id() {
      MutableStorage()->removeMember("id");
    }


    /**
     * Get the value of the '<code>id</code>' attribute.
     */
    const StringPiece get_id() const {
      const Json::Value& v = Storage("id");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>id</code>' attribute.
     *
     * An opaque ID of the table.
     *
     * @param[in] value The new value.
     */
    void set_id(const StringPiece& value) {
      *MutableStorage("id") = value.data();
    }

    /**
     * Determine if the '<code>kind</code>' attribute was set.
     *
     * @return true if the '<code>kind</code>' attribute was set.
     */
    bool has_kind() const {
      return Storage().isMember("kind");
    }

    /**
     * Clears the '<code>kind</code>' attribute.
     */
    void clear_kind() {
      MutableStorage()->removeMember("kind");
    }


    /**
     * Get the value of the '<code>kind</code>' attribute.
     */
    const StringPiece get_kind() const {
      const Json::Value& v = Storage("kind");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>kind</code>' attribute.
     *
     * The resource type.
     *
     * @param[in] value The new value.
     */
    void set_kind(const StringPiece& value) {
      *MutableStorage("kind") = value.data();
    }

    /**
     * Determine if the '<code>labels</code>' attribute was set.
     *
     * @return true if the '<code>labels</code>' attribute was set.
     */
    bool has_labels() const {
      return Storage().isMember("labels");
    }

    /**
     * Clears the '<code>labels</code>' attribute.
     */
    void clear_labels() {
      MutableStorage()->removeMember("labels");
    }


    /**
     * Get a reference to the value of the '<code>labels</code>' attribute.
     */
    const client::JsonCppAssociativeArray<string > get_labels() const {
       const Json::Value& storage = Storage("labels");
      return client::JsonValueToCppValueHelper<client::JsonCppAssociativeArray<string > >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>labels</code>'
     * property.
     *
     * The labels associated with this table. You can use these to organize and
     * group your tables.
     *
     * @return The result can be modified to change the attribute value.
     */
    client::JsonCppAssociativeArray<string > mutable_labels() {
      Json::Value* storage = MutableStorage("labels");
      return client::JsonValueToMutableCppValueHelper<client::JsonCppAssociativeArray<string > >(storage);
    }

    /**
     * Determine if the '<code>tableReference</code>' attribute was set.
     *
     * @return true if the '<code>tableReference</code>' attribute was set.
     */
    bool has_table_reference() const {
      return Storage().isMember("tableReference");
    }

    /**
     * Clears the '<code>tableReference</code>' attribute.
     */
    void clear_table_reference() {
      MutableStorage()->removeMember("tableReference");
    }


    /**
     * Get a reference to the value of the '<code>tableReference</code>'
     * attribute.
     */
    const TableReference get_table_reference() const;

    /**
     * Gets a reference to a mutable value of the '<code>tableReference</code>'
     * property.
     *
     * A reference uniquely identifying the table.
     *
     * @return The result can be modified to change the attribute value.
     */
    TableReference mutable_tableReference();

    /**
     * Determine if the '<code>timePartitioning</code>' attribute was set.
     *
     * @return true if the '<code>timePartitioning</code>' attribute was set.
     */
    bool has_time_partitioning() const {
      return Storage().isMember("timePartitioning");
    }

    /**
     * Clears the '<code>timePartitioning</code>' attribute.
     */
    void clear_time_partitioning() {
      MutableStorage()->removeMember("timePartitioning");
    }


    /**
     * Get a reference to the value of the '<code>timePartitioning</code>'
     * attribute.
     */
    const TimePartitioning get_time_partitioning() const;

    /**
     * Gets a reference to a mutable value of the
     * '<code>timePartitioning</code>' property.
     *
     * The time-based partitioning specification for this table, if configured.
     *
     * @return The result can be modified to change the attribute value.
     */
    TimePartitioning mutable_timePartitioning();

    /**
     * Determine if the '<code>type</code>' attribute was set.
     *
     * @return true if the '<code>type</code>' attribute was set.
     */
    bool has_type() const {
      return Storage().isMember("type");
    }

    /**
     * Clears the '<code>type</code>' attribute.
     */
    void clear_type() {
      MutableStorage()->removeMember("type");
    }


    /**
     * Get the value of the '<code>type</code>' attribute.
     */
    const StringPiece get_type() const {
      const Json::Value& v = Storage("type");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>type</code>' attribute.
     *
     * The type of table. Possible values are: TABLE, VIEW.
     *
     * @param[in] value The new value.
     */
    void set_type(const StringPiece& value) {
      *MutableStorage("type") = value.data();
    }

    /**
     * Determine if the '<code>view</code>' attribute was set.
     *
     * @return true if the '<code>view</code>' attribute was set.
     */
    bool has_view() const {
      return Storage().isMember("view");
    }

    /**
     * Clears the '<code>view</code>' attribute.
     */
    void clear_view() {
      MutableStorage()->removeMember("view");
    }


    /**
     * Get a reference to the value of the '<code>view</code>' attribute.
     */
    const TableListTablesView get_view() const {
       const Json::Value& storage = Storage("view");
      return client::JsonValueToCppValueHelper<TableListTablesView >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>view</code>' property.
     *
     * Additional details for a view.
     *
     * @return The result can be modified to change the attribute value.
     */
    TableListTablesView mutable_view() {
      Json::Value* storage = MutableStorage("view");
      return client::JsonValueToMutableCppValueHelper<TableListTablesView >(storage);
    }

   private:
    void operator=(const TableListTables&);
  };  // TableListTables
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static TableList* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit TableList(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit TableList(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~TableList();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::TableList</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_bigquery_api::TableList");
  }

  /**
   * Determine if the '<code>etag</code>' attribute was set.
   *
   * @return true if the '<code>etag</code>' attribute was set.
   */
  bool has_etag() const {
    return Storage().isMember("etag");
  }

  /**
   * Clears the '<code>etag</code>' attribute.
   */
  void clear_etag() {
    MutableStorage()->removeMember("etag");
  }


  /**
   * Get the value of the '<code>etag</code>' attribute.
   */
  const StringPiece get_etag() const {
    const Json::Value& v = Storage("etag");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>etag</code>' attribute.
   *
   * A hash of this page of results.
   *
   * @param[in] value The new value.
   */
  void set_etag(const StringPiece& value) {
    *MutableStorage("etag") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * The type of list.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>nextPageToken</code>' attribute was set.
   *
   * @return true if the '<code>nextPageToken</code>' attribute was set.
   */
  bool has_next_page_token() const {
    return Storage().isMember("nextPageToken");
  }

  /**
   * Clears the '<code>nextPageToken</code>' attribute.
   */
  void clear_next_page_token() {
    MutableStorage()->removeMember("nextPageToken");
  }


  /**
   * Get the value of the '<code>nextPageToken</code>' attribute.
   */
  const StringPiece get_next_page_token() const {
    const Json::Value& v = Storage("nextPageToken");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>nextPageToken</code>' attribute.
   *
   * A token to request the next page of results.
   *
   * @param[in] value The new value.
   */
  void set_next_page_token(const StringPiece& value) {
    *MutableStorage("nextPageToken") = value.data();
  }

  /**
   * Determine if the '<code>tables</code>' attribute was set.
   *
   * @return true if the '<code>tables</code>' attribute was set.
   */
  bool has_tables() const {
    return Storage().isMember("tables");
  }

  /**
   * Clears the '<code>tables</code>' attribute.
   */
  void clear_tables() {
    MutableStorage()->removeMember("tables");
  }


  /**
   * Get a reference to the value of the '<code>tables</code>' attribute.
   */
  const client::JsonCppArray<TableListTables > get_tables() const {
     const Json::Value& storage = Storage("tables");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<TableListTables > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>tables</code>' property.
   *
   * Tables in the requested dataset.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<TableListTables > mutable_tables() {
    Json::Value* storage = MutableStorage("tables");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<TableListTables > >(storage);
  }

  /**
   * Determine if the '<code>totalItems</code>' attribute was set.
   *
   * @return true if the '<code>totalItems</code>' attribute was set.
   */
  bool has_total_items() const {
    return Storage().isMember("totalItems");
  }

  /**
   * Clears the '<code>totalItems</code>' attribute.
   */
  void clear_total_items() {
    MutableStorage()->removeMember("totalItems");
  }


  /**
   * Get the value of the '<code>totalItems</code>' attribute.
   */
  int32 get_total_items() const {
    const Json::Value& storage = Storage("totalItems");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>totalItems</code>' attribute.
   *
   * The total number of tables in the dataset.
   *
   * @param[in] value The new value.
   */
  void set_total_items(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("totalItems"));
  }

 private:
  void operator=(const TableList&);
};  // TableList
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_TABLE_LIST_H_
