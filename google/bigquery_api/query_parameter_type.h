// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2018-10-08 17:45:39 UTC
//   on: 2019-03-01, 03:01:16 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 427
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_BIGQUERY_API_QUERY_PARAMETER_TYPE_H_
#define  GOOGLE_BIGQUERY_API_QUERY_PARAMETER_TYPE_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/bigquery_api/query_parameter_type.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class QueryParameterType : public client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class QueryParameterTypeStructTypes : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static QueryParameterTypeStructTypes* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit QueryParameterTypeStructTypes(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit QueryParameterTypeStructTypes(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~QueryParameterTypeStructTypes();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_bigquery_api::QueryParameterTypeStructTypes</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_bigquery_api::QueryParameterTypeStructTypes");
    }

    /**
     * Determine if the '<code>description</code>' attribute was set.
     *
     * @return true if the '<code>description</code>' attribute was set.
     */
    bool has_description() const {
      return Storage().isMember("description");
    }

    /**
     * Clears the '<code>description</code>' attribute.
     */
    void clear_description() {
      MutableStorage()->removeMember("description");
    }


    /**
     * Get the value of the '<code>description</code>' attribute.
     */
    const StringPiece get_description() const {
      const Json::Value& v = Storage("description");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>description</code>' attribute.
     *
     * [Optional] Human-oriented description of the field.
     *
     * @param[in] value The new value.
     */
    void set_description(const StringPiece& value) {
      *MutableStorage("description") = value.data();
    }

    /**
     * Determine if the '<code>name</code>' attribute was set.
     *
     * @return true if the '<code>name</code>' attribute was set.
     */
    bool has_name() const {
      return Storage().isMember("name");
    }

    /**
     * Clears the '<code>name</code>' attribute.
     */
    void clear_name() {
      MutableStorage()->removeMember("name");
    }


    /**
     * Get the value of the '<code>name</code>' attribute.
     */
    const StringPiece get_name() const {
      const Json::Value& v = Storage("name");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>name</code>' attribute.
     *
     * [Optional] The name of this field.
     *
     * @param[in] value The new value.
     */
    void set_name(const StringPiece& value) {
      *MutableStorage("name") = value.data();
    }

    /**
     * Determine if the '<code>type</code>' attribute was set.
     *
     * @return true if the '<code>type</code>' attribute was set.
     */
    bool has_type() const {
      return Storage().isMember("type");
    }

    /**
     * Clears the '<code>type</code>' attribute.
     */
    void clear_type() {
      MutableStorage()->removeMember("type");
    }


    /**
     * Get a reference to the value of the '<code>type</code>' attribute.
     */
    const QueryParameterType get_type() const;

    /**
     * Gets a reference to a mutable value of the '<code>type</code>' property.
     *
     * [Required] The type of this field.
     *
     * @return The result can be modified to change the attribute value.
     */
    QueryParameterType mutable_type();

   private:
    void operator=(const QueryParameterTypeStructTypes&);
  };  // QueryParameterTypeStructTypes
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static QueryParameterType* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit QueryParameterType(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit QueryParameterType(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~QueryParameterType();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::QueryParameterType</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_bigquery_api::QueryParameterType");
  }

  /**
   * Determine if the '<code>arrayType</code>' attribute was set.
   *
   * @return true if the '<code>arrayType</code>' attribute was set.
   */
  bool has_array_type() const {
    return Storage().isMember("arrayType");
  }

  /**
   * Clears the '<code>arrayType</code>' attribute.
   */
  void clear_array_type() {
    MutableStorage()->removeMember("arrayType");
  }


  /**
   * Get a reference to the value of the '<code>arrayType</code>' attribute.
   */
  const QueryParameterType get_array_type() const;

  /**
   * Gets a reference to a mutable value of the '<code>arrayType</code>'
   * property.
   *
   * [Optional] The type of the array's elements, if this is an array.
   *
   * @return The result can be modified to change the attribute value.
   */
  QueryParameterType mutable_arrayType();

  /**
   * Determine if the '<code>structTypes</code>' attribute was set.
   *
   * @return true if the '<code>structTypes</code>' attribute was set.
   */
  bool has_struct_types() const {
    return Storage().isMember("structTypes");
  }

  /**
   * Clears the '<code>structTypes</code>' attribute.
   */
  void clear_struct_types() {
    MutableStorage()->removeMember("structTypes");
  }


  /**
   * Get a reference to the value of the '<code>structTypes</code>' attribute.
   */
  const client::JsonCppArray<QueryParameterTypeStructTypes > get_struct_types() const {
     const Json::Value& storage = Storage("structTypes");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<QueryParameterTypeStructTypes > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>structTypes</code>'
   * property.
   *
   * [Optional] The types of the fields of this struct, in order, if this is a
   * struct.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<QueryParameterTypeStructTypes > mutable_structTypes() {
    Json::Value* storage = MutableStorage("structTypes");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<QueryParameterTypeStructTypes > >(storage);
  }

  /**
   * Determine if the '<code>type</code>' attribute was set.
   *
   * @return true if the '<code>type</code>' attribute was set.
   */
  bool has_type() const {
    return Storage().isMember("type");
  }

  /**
   * Clears the '<code>type</code>' attribute.
   */
  void clear_type() {
    MutableStorage()->removeMember("type");
  }


  /**
   * Get the value of the '<code>type</code>' attribute.
   */
  const StringPiece get_type() const {
    const Json::Value& v = Storage("type");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>type</code>' attribute.
   *
   * [Required] The top level type of this field.
   *
   * @param[in] value The new value.
   */
  void set_type(const StringPiece& value) {
    *MutableStorage("type") = value.data();
  }

 private:
  void operator=(const QueryParameterType&);
};  // QueryParameterType
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_QUERY_PARAMETER_TYPE_H_
