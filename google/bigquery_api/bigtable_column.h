// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2018-10-08 17:45:39 UTC
//   on: 2019-03-01, 03:01:16 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 427
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_BIGQUERY_API_BIGTABLE_COLUMN_H_
#define  GOOGLE_BIGQUERY_API_BIGTABLE_COLUMN_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class BigtableColumn : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static BigtableColumn* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit BigtableColumn(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit BigtableColumn(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~BigtableColumn();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::BigtableColumn</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_bigquery_api::BigtableColumn");
  }

  /**
   * Determine if the '<code>encoding</code>' attribute was set.
   *
   * @return true if the '<code>encoding</code>' attribute was set.
   */
  bool has_encoding() const {
    return Storage().isMember("encoding");
  }

  /**
   * Clears the '<code>encoding</code>' attribute.
   */
  void clear_encoding() {
    MutableStorage()->removeMember("encoding");
  }


  /**
   * Get the value of the '<code>encoding</code>' attribute.
   */
  const StringPiece get_encoding() const {
    const Json::Value& v = Storage("encoding");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>encoding</code>' attribute.
   *
   * [Optional] The encoding of the values when the type is not STRING.
   * Acceptable encoding values are: TEXT - indicates values are alphanumeric
   * text strings. BINARY - indicates values are encoded using HBase
   * Bytes.toBytes family of functions. 'encoding' can also be set at the column
   * family level. However, the setting at this level takes precedence if
   * 'encoding' is set at both levels.
   *
   * @param[in] value The new value.
   */
  void set_encoding(const StringPiece& value) {
    *MutableStorage("encoding") = value.data();
  }

  /**
   * Determine if the '<code>fieldName</code>' attribute was set.
   *
   * @return true if the '<code>fieldName</code>' attribute was set.
   */
  bool has_field_name() const {
    return Storage().isMember("fieldName");
  }

  /**
   * Clears the '<code>fieldName</code>' attribute.
   */
  void clear_field_name() {
    MutableStorage()->removeMember("fieldName");
  }


  /**
   * Get the value of the '<code>fieldName</code>' attribute.
   */
  const StringPiece get_field_name() const {
    const Json::Value& v = Storage("fieldName");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>fieldName</code>' attribute.
   *
   * [Optional] If the qualifier is not a valid BigQuery field identifier i.e.
   * does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided
   * as the column field name and is used as field name in queries.
   *
   * @param[in] value The new value.
   */
  void set_field_name(const StringPiece& value) {
    *MutableStorage("fieldName") = value.data();
  }

  /**
   * Determine if the '<code>onlyReadLatest</code>' attribute was set.
   *
   * @return true if the '<code>onlyReadLatest</code>' attribute was set.
   */
  bool has_only_read_latest() const {
    return Storage().isMember("onlyReadLatest");
  }

  /**
   * Clears the '<code>onlyReadLatest</code>' attribute.
   */
  void clear_only_read_latest() {
    MutableStorage()->removeMember("onlyReadLatest");
  }


  /**
   * Get the value of the '<code>onlyReadLatest</code>' attribute.
   */
  bool get_only_read_latest() const {
    const Json::Value& storage = Storage("onlyReadLatest");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>onlyReadLatest</code>' attribute.
   *
   * [Optional] If this is set, only the latest version of value in this column
   * are exposed. 'onlyReadLatest' can also be set at the column family level.
   * However, the setting at this level takes precedence if 'onlyReadLatest' is
   * set at both levels.
   *
   * @param[in] value The new value.
   */
  void set_only_read_latest(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("onlyReadLatest"));
  }

  /**
   * Determine if the '<code>qualifierEncoded</code>' attribute was set.
   *
   * @return true if the '<code>qualifierEncoded</code>' attribute was set.
   */
  bool has_qualifier_encoded() const {
    return Storage().isMember("qualifierEncoded");
  }

  /**
   * Clears the '<code>qualifierEncoded</code>' attribute.
   */
  void clear_qualifier_encoded() {
    MutableStorage()->removeMember("qualifierEncoded");
  }


  /**
   * Get the value of the '<code>qualifierEncoded</code>' attribute.
   */
  const StringPiece get_qualifier_encoded() const {
    const Json::Value& v = Storage("qualifierEncoded");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>qualifierEncoded</code>' attribute.
   *
   * [Required] Qualifier of the column. Columns in the parent column family
   * that has this exact qualifier are exposed as . field. If the qualifier is
   * valid UTF-8 string, it can be specified in the qualifier_string field.
   * Otherwise, a base-64 encoded value must be set to qualifier_encoded. The
   * column field name is the same as the column qualifier. However, if the
   * qualifier is not a valid BigQuery field identifier i.e. does not match
   * [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as field_name.
   *
   * @param[in] value The new value.
   */
  void set_qualifier_encoded(const StringPiece& value) {
    *MutableStorage("qualifierEncoded") = value.data();
  }

  /**
   * Determine if the '<code>qualifierString</code>' attribute was set.
   *
   * @return true if the '<code>qualifierString</code>' attribute was set.
   */
  bool has_qualifier_string() const {
    return Storage().isMember("qualifierString");
  }

  /**
   * Clears the '<code>qualifierString</code>' attribute.
   */
  void clear_qualifier_string() {
    MutableStorage()->removeMember("qualifierString");
  }


  /**
   * Get the value of the '<code>qualifierString</code>' attribute.
   */
  const StringPiece get_qualifier_string() const {
    const Json::Value& v = Storage("qualifierString");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>qualifierString</code>' attribute.
   * @param[in] value The new value.
   */
  void set_qualifier_string(const StringPiece& value) {
    *MutableStorage("qualifierString") = value.data();
  }

  /**
   * Determine if the '<code>type</code>' attribute was set.
   *
   * @return true if the '<code>type</code>' attribute was set.
   */
  bool has_type() const {
    return Storage().isMember("type");
  }

  /**
   * Clears the '<code>type</code>' attribute.
   */
  void clear_type() {
    MutableStorage()->removeMember("type");
  }


  /**
   * Get the value of the '<code>type</code>' attribute.
   */
  const StringPiece get_type() const {
    const Json::Value& v = Storage("type");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>type</code>' attribute.
   *
   * [Optional] The type to convert the value in cells of this column. The
   * values are expected to be encoded using HBase Bytes.toBytes function when
   * using the BINARY encoding value. Following BigQuery types are allowed
   * (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is
   * BYTES. 'type' can also be set at the column family level. However, the
   * setting at this level takes precedence if 'type' is set at both levels.
   *
   * @param[in] value The new value.
   */
  void set_type(const StringPiece& value) {
    *MutableStorage("type") = value.data();
  }

 private:
  void operator=(const BigtableColumn&);
};  // BigtableColumn
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_BIGTABLE_COLUMN_H_
