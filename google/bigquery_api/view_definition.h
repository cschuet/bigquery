// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2018-10-08 17:45:39 UTC
//   on: 2019-03-01, 03:01:16 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 427
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_BIGQUERY_API_VIEW_DEFINITION_H_
#define  GOOGLE_BIGQUERY_API_VIEW_DEFINITION_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/bigquery_api/user_defined_function_resource.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class ViewDefinition : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static ViewDefinition* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ViewDefinition(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ViewDefinition(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~ViewDefinition();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::ViewDefinition</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_bigquery_api::ViewDefinition");
  }

  /**
   * Determine if the '<code>query</code>' attribute was set.
   *
   * @return true if the '<code>query</code>' attribute was set.
   */
  bool has_query() const {
    return Storage().isMember("query");
  }

  /**
   * Clears the '<code>query</code>' attribute.
   */
  void clear_query() {
    MutableStorage()->removeMember("query");
  }


  /**
   * Get the value of the '<code>query</code>' attribute.
   */
  const StringPiece get_query() const {
    const Json::Value& v = Storage("query");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>query</code>' attribute.
   *
   * [Required] A query that BigQuery executes when the view is referenced.
   *
   * @param[in] value The new value.
   */
  void set_query(const StringPiece& value) {
    *MutableStorage("query") = value.data();
  }

  /**
   * Determine if the '<code>useLegacySql</code>' attribute was set.
   *
   * @return true if the '<code>useLegacySql</code>' attribute was set.
   */
  bool has_use_legacy_sql() const {
    return Storage().isMember("useLegacySql");
  }

  /**
   * Clears the '<code>useLegacySql</code>' attribute.
   */
  void clear_use_legacy_sql() {
    MutableStorage()->removeMember("useLegacySql");
  }


  /**
   * Get the value of the '<code>useLegacySql</code>' attribute.
   */
  bool get_use_legacy_sql() const {
    const Json::Value& storage = Storage("useLegacySql");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>useLegacySql</code>' attribute.
   *
   * Specifies whether to use BigQuery's legacy SQL for this view. The default
   * value is true. If set to false, the view will use BigQuery's standard SQL:
   * https://cloud.google.com/bigquery/sql-reference/ Queries and views that
   * reference this view must use the same flag value.
   *
   * @param[in] value The new value.
   */
  void set_use_legacy_sql(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("useLegacySql"));
  }

  /**
   * Determine if the '<code>userDefinedFunctionResources</code>' attribute was
   * set.
   *
   * @return true if the '<code>userDefinedFunctionResources</code>' attribute
   * was set.
   */
  bool has_user_defined_function_resources() const {
    return Storage().isMember("userDefinedFunctionResources");
  }

  /**
   * Clears the '<code>userDefinedFunctionResources</code>' attribute.
   */
  void clear_user_defined_function_resources() {
    MutableStorage()->removeMember("userDefinedFunctionResources");
  }


  /**
   * Get a reference to the value of the
   * '<code>userDefinedFunctionResources</code>' attribute.
   */
  const client::JsonCppArray<UserDefinedFunctionResource > get_user_defined_function_resources() const;

  /**
   * Gets a reference to a mutable value of the
   * '<code>userDefinedFunctionResources</code>' property.
   *
   * Describes user-defined function resources used in the query.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<UserDefinedFunctionResource > mutable_userDefinedFunctionResources();

 private:
  void operator=(const ViewDefinition&);
};  // ViewDefinition
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_VIEW_DEFINITION_H_
