// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.6.0

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google API Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 20190224
// Generated by:
//    Tool: google-apis-code-generator 1.6.0
//     C++: 0.1.5
#ifndef  GOOGLE_BIGQUERY_API_QUERY_TIMELINE_SAMPLE_H_
#define  GOOGLE_BIGQUERY_API_QUERY_TIMELINE_SAMPLE_H_

#include "googleapis/base/integral_types.h"
#include "googleapis/client/data/jsoncpp_data.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class QueryTimelineSample : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static QueryTimelineSample* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit QueryTimelineSample(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit QueryTimelineSample(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~QueryTimelineSample();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::QueryTimelineSample</code>
   */
  const char* GetTypeName() const {
    return "google_bigquery_api::QueryTimelineSample";
  }

  /**
   * Determine if the '<code>activeUnits</code>' attribute was set.
   *
   * @return true if the '<code>activeUnits</code>' attribute was set.
   */
  bool has_active_units() const {
    return Storage().isMember("activeUnits");
  }

  /**
   * Clears the '<code>activeUnits</code>' attribute.
   */
  void clear_active_units() {
    MutableStorage()->removeMember("activeUnits");
  }


  /**
   * Get the value of the '<code>activeUnits</code>' attribute.
   */
  int64 get_active_units() const {
    const Json::Value& storage = Storage("activeUnits");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>activeUnits</code>' attribute.
   *
   * Total number of units currently being processed by workers. This does not
   * correspond directly to slot usage. This is the largest value observed since
   * the last sample.
   *
   * @param[in] value The new value.
   */
  void set_active_units(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("activeUnits"));
  }

  /**
   * Determine if the '<code>completedUnits</code>' attribute was set.
   *
   * @return true if the '<code>completedUnits</code>' attribute was set.
   */
  bool has_completed_units() const {
    return Storage().isMember("completedUnits");
  }

  /**
   * Clears the '<code>completedUnits</code>' attribute.
   */
  void clear_completed_units() {
    MutableStorage()->removeMember("completedUnits");
  }


  /**
   * Get the value of the '<code>completedUnits</code>' attribute.
   */
  int64 get_completed_units() const {
    const Json::Value& storage = Storage("completedUnits");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>completedUnits</code>' attribute.
   *
   * Total parallel units of work completed by this query.
   *
   * @param[in] value The new value.
   */
  void set_completed_units(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("completedUnits"));
  }

  /**
   * Determine if the '<code>elapsedMs</code>' attribute was set.
   *
   * @return true if the '<code>elapsedMs</code>' attribute was set.
   */
  bool has_elapsed_ms() const {
    return Storage().isMember("elapsedMs");
  }

  /**
   * Clears the '<code>elapsedMs</code>' attribute.
   */
  void clear_elapsed_ms() {
    MutableStorage()->removeMember("elapsedMs");
  }


  /**
   * Get the value of the '<code>elapsedMs</code>' attribute.
   */
  int64 get_elapsed_ms() const {
    const Json::Value& storage = Storage("elapsedMs");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>elapsedMs</code>' attribute.
   *
   * Milliseconds elapsed since the start of query execution.
   *
   * @param[in] value The new value.
   */
  void set_elapsed_ms(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("elapsedMs"));
  }

  /**
   * Determine if the '<code>pendingUnits</code>' attribute was set.
   *
   * @return true if the '<code>pendingUnits</code>' attribute was set.
   */
  bool has_pending_units() const {
    return Storage().isMember("pendingUnits");
  }

  /**
   * Clears the '<code>pendingUnits</code>' attribute.
   */
  void clear_pending_units() {
    MutableStorage()->removeMember("pendingUnits");
  }


  /**
   * Get the value of the '<code>pendingUnits</code>' attribute.
   */
  int64 get_pending_units() const {
    const Json::Value& storage = Storage("pendingUnits");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>pendingUnits</code>' attribute.
   *
   * Total parallel units of work remaining for the active stages.
   *
   * @param[in] value The new value.
   */
  void set_pending_units(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("pendingUnits"));
  }

  /**
   * Determine if the '<code>totalSlotMs</code>' attribute was set.
   *
   * @return true if the '<code>totalSlotMs</code>' attribute was set.
   */
  bool has_total_slot_ms() const {
    return Storage().isMember("totalSlotMs");
  }

  /**
   * Clears the '<code>totalSlotMs</code>' attribute.
   */
  void clear_total_slot_ms() {
    MutableStorage()->removeMember("totalSlotMs");
  }


  /**
   * Get the value of the '<code>totalSlotMs</code>' attribute.
   */
  int64 get_total_slot_ms() const {
    const Json::Value& storage = Storage("totalSlotMs");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>totalSlotMs</code>' attribute.
   *
   * Cumulative slot-ms consumed by the query.
   *
   * @param[in] value The new value.
   */
  void set_total_slot_ms(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("totalSlotMs"));
  }

 private:
  void operator=(const QueryTimelineSample&);
};  // QueryTimelineSample
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_QUERY_TIMELINE_SAMPLE_H_
