// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2018-10-08 17:45:39 UTC
//   on: 2019-03-01, 03:01:16 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 427
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_BIGQUERY_API_ITERATION_RESULT_H_
#define  GOOGLE_BIGQUERY_API_ITERATION_RESULT_H_

#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class IterationResult : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static IterationResult* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit IterationResult(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit IterationResult(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~IterationResult();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::IterationResult</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_bigquery_api::IterationResult");
  }

  /**
   * Determine if the '<code>durationMs</code>' attribute was set.
   *
   * @return true if the '<code>durationMs</code>' attribute was set.
   */
  bool has_duration_ms() const {
    return Storage().isMember("durationMs");
  }

  /**
   * Clears the '<code>durationMs</code>' attribute.
   */
  void clear_duration_ms() {
    MutableStorage()->removeMember("durationMs");
  }


  /**
   * Get the value of the '<code>durationMs</code>' attribute.
   */
  int64 get_duration_ms() const {
    const Json::Value& storage = Storage("durationMs");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>durationMs</code>' attribute.
   *
   * [Output-only, Beta] Time taken to run the training iteration in
   * milliseconds.
   *
   * @param[in] value The new value.
   */
  void set_duration_ms(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("durationMs"));
  }

  /**
   * Determine if the '<code>evalLoss</code>' attribute was set.
   *
   * @return true if the '<code>evalLoss</code>' attribute was set.
   */
  bool has_eval_loss() const {
    return Storage().isMember("evalLoss");
  }

  /**
   * Clears the '<code>evalLoss</code>' attribute.
   */
  void clear_eval_loss() {
    MutableStorage()->removeMember("evalLoss");
  }


  /**
   * Get the value of the '<code>evalLoss</code>' attribute.
   */
  double get_eval_loss() const {
    const Json::Value& storage = Storage("evalLoss");
    return client::JsonValueToCppValueHelper<double >(storage);
  }

  /**
   * Change the '<code>evalLoss</code>' attribute.
   *
   * [Output-only, Beta] Eval loss computed on the eval data at the end of the
   * iteration. The eval loss is used for early stopping to avoid overfitting.
   * No eval loss if eval_split_method option is specified as no_split or
   * auto_split with input data size less than 500 rows.
   *
   * @param[in] value The new value.
   */
  void set_eval_loss(double value) {
    client::SetJsonValueFromCppValueHelper<double >(
      value, MutableStorage("evalLoss"));
  }

  /**
   * Determine if the '<code>index</code>' attribute was set.
   *
   * @return true if the '<code>index</code>' attribute was set.
   */
  bool has_index() const {
    return Storage().isMember("index");
  }

  /**
   * Clears the '<code>index</code>' attribute.
   */
  void clear_index() {
    MutableStorage()->removeMember("index");
  }


  /**
   * Get the value of the '<code>index</code>' attribute.
   */
  int32 get_index() const {
    const Json::Value& storage = Storage("index");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>index</code>' attribute.
   *
   * [Output-only, Beta] Index of the ML training iteration, starting from zero
   * for each training run.
   *
   * @param[in] value The new value.
   */
  void set_index(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("index"));
  }

  /**
   * Determine if the '<code>learnRate</code>' attribute was set.
   *
   * @return true if the '<code>learnRate</code>' attribute was set.
   */
  bool has_learn_rate() const {
    return Storage().isMember("learnRate");
  }

  /**
   * Clears the '<code>learnRate</code>' attribute.
   */
  void clear_learn_rate() {
    MutableStorage()->removeMember("learnRate");
  }


  /**
   * Get the value of the '<code>learnRate</code>' attribute.
   */
  double get_learn_rate() const {
    const Json::Value& storage = Storage("learnRate");
    return client::JsonValueToCppValueHelper<double >(storage);
  }

  /**
   * Change the '<code>learnRate</code>' attribute.
   *
   * [Output-only, Beta] Learning rate used for this iteration, it varies for
   * different training iterations if learn_rate_strategy option is not
   * constant.
   *
   * @param[in] value The new value.
   */
  void set_learn_rate(double value) {
    client::SetJsonValueFromCppValueHelper<double >(
      value, MutableStorage("learnRate"));
  }

  /**
   * Determine if the '<code>trainingLoss</code>' attribute was set.
   *
   * @return true if the '<code>trainingLoss</code>' attribute was set.
   */
  bool has_training_loss() const {
    return Storage().isMember("trainingLoss");
  }

  /**
   * Clears the '<code>trainingLoss</code>' attribute.
   */
  void clear_training_loss() {
    MutableStorage()->removeMember("trainingLoss");
  }


  /**
   * Get the value of the '<code>trainingLoss</code>' attribute.
   */
  double get_training_loss() const {
    const Json::Value& storage = Storage("trainingLoss");
    return client::JsonValueToCppValueHelper<double >(storage);
  }

  /**
   * Change the '<code>trainingLoss</code>' attribute.
   *
   * [Output-only, Beta] Training loss computed on the training data at the end
   * of the iteration. The training loss function is defined by model type.
   *
   * @param[in] value The new value.
   */
  void set_training_loss(double value) {
    client::SetJsonValueFromCppValueHelper<double >(
      value, MutableStorage("trainingLoss"));
  }

 private:
  void operator=(const IterationResult&);
};  // IterationResult
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_ITERATION_RESULT_H_
