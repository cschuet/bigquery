// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.6.0

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google API Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Description:
//   A data platform for customers to create, manage, share and query data.
// Classes:
//   JobConfigurationLoad
// Documentation:
//   https://cloud.google.com/bigquery/

#include "google/bigquery_api/job_configuration_load.h"

#include <string>

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/client/data/jsoncpp_data.h"

#include "google/bigquery_api/clustering.h"
#include "google/bigquery_api/destination_table_properties.h"
#include "google/bigquery_api/encryption_configuration.h"
#include "google/bigquery_api/range_partitioning.h"
#include "google/bigquery_api/table_reference.h"
#include "google/bigquery_api/table_schema.h"
#include "google/bigquery_api/time_partitioning.h"


#include "absl/strings/str_cat.h"


namespace google_bigquery_api {
using namespace googleapis;


// Object factory method (static).
JobConfigurationLoad* JobConfigurationLoad::New() {
  return new client::JsonCppCapsule<JobConfigurationLoad>;
}

// Standard immutable constructor.
JobConfigurationLoad::JobConfigurationLoad(const Json::Value& storage)
  : client::JsonCppData(storage) {
}

// Standard mutable constructor.
JobConfigurationLoad::JobConfigurationLoad(Json::Value* storage)
  : client::JsonCppData(storage) {
}

// Standard destructor.
JobConfigurationLoad::~JobConfigurationLoad() {
}

// Properties.

const Clustering JobConfigurationLoad::get_clustering() const {
   const Json::Value& storage = Storage("clustering");
   return client::JsonValueToCppValueHelper<Clustering >(storage);
}

Clustering JobConfigurationLoad::mutable_clustering() {
  Json::Value* storage = MutableStorage("clustering");
  return client::JsonValueToMutableCppValueHelper<Clustering >(storage);
}

const EncryptionConfiguration JobConfigurationLoad::get_destination_encryption_configuration() const {
   const Json::Value& storage = Storage("destinationEncryptionConfiguration");
   return client::JsonValueToCppValueHelper<EncryptionConfiguration >(storage);
}

EncryptionConfiguration JobConfigurationLoad::mutable_destinationEncryptionConfiguration() {
  Json::Value* storage = MutableStorage("destinationEncryptionConfiguration");
  return client::JsonValueToMutableCppValueHelper<EncryptionConfiguration >(storage);
}

const TableReference JobConfigurationLoad::get_destination_table() const {
   const Json::Value& storage = Storage("destinationTable");
   return client::JsonValueToCppValueHelper<TableReference >(storage);
}

TableReference JobConfigurationLoad::mutable_destinationTable() {
  Json::Value* storage = MutableStorage("destinationTable");
  return client::JsonValueToMutableCppValueHelper<TableReference >(storage);
}

const DestinationTableProperties JobConfigurationLoad::get_destination_table_properties() const {
   const Json::Value& storage = Storage("destinationTableProperties");
   return client::JsonValueToCppValueHelper<DestinationTableProperties >(storage);
}

DestinationTableProperties JobConfigurationLoad::mutable_destinationTableProperties() {
  Json::Value* storage = MutableStorage("destinationTableProperties");
  return client::JsonValueToMutableCppValueHelper<DestinationTableProperties >(storage);
}

const RangePartitioning JobConfigurationLoad::get_range_partitioning() const {
   const Json::Value& storage = Storage("rangePartitioning");
   return client::JsonValueToCppValueHelper<RangePartitioning >(storage);
}

RangePartitioning JobConfigurationLoad::mutable_rangePartitioning() {
  Json::Value* storage = MutableStorage("rangePartitioning");
  return client::JsonValueToMutableCppValueHelper<RangePartitioning >(storage);
}

const TableSchema JobConfigurationLoad::get_schema() const {
   const Json::Value& storage = Storage("schema");
   return client::JsonValueToCppValueHelper<TableSchema >(storage);
}

TableSchema JobConfigurationLoad::mutable_schema() {
  Json::Value* storage = MutableStorage("schema");
  return client::JsonValueToMutableCppValueHelper<TableSchema >(storage);
}

const TimePartitioning JobConfigurationLoad::get_time_partitioning() const {
   const Json::Value& storage = Storage("timePartitioning");
   return client::JsonValueToCppValueHelper<TimePartitioning >(storage);
}

TimePartitioning JobConfigurationLoad::mutable_timePartitioning() {
  Json::Value* storage = MutableStorage("timePartitioning");
  return client::JsonValueToMutableCppValueHelper<TimePartitioning >(storage);
}
}  // namespace google_bigquery_api
