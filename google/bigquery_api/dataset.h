// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.6.0

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google API Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 20190224
// Generated by:
//    Tool: google-apis-code-generator 1.6.0
//     C++: 0.1.5
#ifndef  GOOGLE_BIGQUERY_API_DATASET_H_
#define  GOOGLE_BIGQUERY_API_DATASET_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/client/data/jsoncpp_data.h"

#include "google/bigquery_api/dataset_reference.h"
#include "google/bigquery_api/table_reference.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class Dataset : public client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class DatasetAccess : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static DatasetAccess* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit DatasetAccess(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit DatasetAccess(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~DatasetAccess();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_bigquery_api::DatasetAccess</code>
     */
    const char* GetTypeName() const {
      return "google_bigquery_api::DatasetAccess";
    }

    /**
     * Determine if the '<code>domain</code>' attribute was set.
     *
     * @return true if the '<code>domain</code>' attribute was set.
     */
    bool has_domain() const {
      return Storage().isMember("domain");
    }

    /**
     * Clears the '<code>domain</code>' attribute.
     */
    void clear_domain() {
      MutableStorage()->removeMember("domain");
    }


    /**
     * Get the value of the '<code>domain</code>' attribute.
     */
    const std::string get_domain() const {
      const Json::Value& v = Storage("domain");
      if (v == Json::Value::null) return std::string("");
      return std::string(v.asCString());
    }

    /**
     * Change the '<code>domain</code>' attribute.
     *
     * [Pick one] A domain to grant access to. Any users signed in with the
     * domain specified will be granted the specified access. Example:
     * "example.com". Maps to IAM policy member "domain:DOMAIN".
     *
     * @param[in] value The new value.
     */
    void set_domain(const std::string& value) {
      *MutableStorage("domain") = value.data();
    }

    /**
     * Determine if the '<code>groupByEmail</code>' attribute was set.
     *
     * @return true if the '<code>groupByEmail</code>' attribute was set.
     */
    bool has_group_by_email() const {
      return Storage().isMember("groupByEmail");
    }

    /**
     * Clears the '<code>groupByEmail</code>' attribute.
     */
    void clear_group_by_email() {
      MutableStorage()->removeMember("groupByEmail");
    }


    /**
     * Get the value of the '<code>groupByEmail</code>' attribute.
     */
    const std::string get_group_by_email() const {
      const Json::Value& v = Storage("groupByEmail");
      if (v == Json::Value::null) return std::string("");
      return std::string(v.asCString());
    }

    /**
     * Change the '<code>groupByEmail</code>' attribute.
     *
     * [Pick one] An email address of a Google Group to grant access to. Maps to
     * IAM policy member "group:GROUP".
     *
     * @param[in] value The new value.
     */
    void set_group_by_email(const std::string& value) {
      *MutableStorage("groupByEmail") = value.data();
    }

    /**
     * Determine if the '<code>iamMember</code>' attribute was set.
     *
     * @return true if the '<code>iamMember</code>' attribute was set.
     */
    bool has_iam_member() const {
      return Storage().isMember("iamMember");
    }

    /**
     * Clears the '<code>iamMember</code>' attribute.
     */
    void clear_iam_member() {
      MutableStorage()->removeMember("iamMember");
    }


    /**
     * Get the value of the '<code>iamMember</code>' attribute.
     */
    const std::string get_iam_member() const {
      const Json::Value& v = Storage("iamMember");
      if (v == Json::Value::null) return std::string("");
      return std::string(v.asCString());
    }

    /**
     * Change the '<code>iamMember</code>' attribute.
     *
     * [Pick one] Some other type of member that appears in the IAM Policy but
     * isn't a user, group, domain, or special group.
     *
     * @param[in] value The new value.
     */
    void set_iam_member(const std::string& value) {
      *MutableStorage("iamMember") = value.data();
    }

    /**
     * Determine if the '<code>role</code>' attribute was set.
     *
     * @return true if the '<code>role</code>' attribute was set.
     */
    bool has_role() const {
      return Storage().isMember("role");
    }

    /**
     * Clears the '<code>role</code>' attribute.
     */
    void clear_role() {
      MutableStorage()->removeMember("role");
    }


    /**
     * Get the value of the '<code>role</code>' attribute.
     */
    const std::string get_role() const {
      const Json::Value& v = Storage("role");
      if (v == Json::Value::null) return std::string("");
      return std::string(v.asCString());
    }

    /**
     * Change the '<code>role</code>' attribute.
     *
     * [Required] Describes the rights granted to the user specified by the
     * other member of the access object. The following string values are
     * supported: READER, WRITER, OWNER.
     *
     * @param[in] value The new value.
     */
    void set_role(const std::string& value) {
      *MutableStorage("role") = value.data();
    }

    /**
     * Determine if the '<code>specialGroup</code>' attribute was set.
     *
     * @return true if the '<code>specialGroup</code>' attribute was set.
     */
    bool has_special_group() const {
      return Storage().isMember("specialGroup");
    }

    /**
     * Clears the '<code>specialGroup</code>' attribute.
     */
    void clear_special_group() {
      MutableStorage()->removeMember("specialGroup");
    }


    /**
     * Get the value of the '<code>specialGroup</code>' attribute.
     */
    const std::string get_special_group() const {
      const Json::Value& v = Storage("specialGroup");
      if (v == Json::Value::null) return std::string("");
      return std::string(v.asCString());
    }

    /**
     * Change the '<code>specialGroup</code>' attribute.
     *
     * [Pick one] A special group to grant access to. Possible values include:
     * projectOwners: Owners of the enclosing project. projectReaders: Readers
     * of the enclosing project. projectWriters: Writers of the enclosing
     * project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to
     * similarly-named IAM members.
     *
     * @param[in] value The new value.
     */
    void set_special_group(const std::string& value) {
      *MutableStorage("specialGroup") = value.data();
    }

    /**
     * Determine if the '<code>userByEmail</code>' attribute was set.
     *
     * @return true if the '<code>userByEmail</code>' attribute was set.
     */
    bool has_user_by_email() const {
      return Storage().isMember("userByEmail");
    }

    /**
     * Clears the '<code>userByEmail</code>' attribute.
     */
    void clear_user_by_email() {
      MutableStorage()->removeMember("userByEmail");
    }


    /**
     * Get the value of the '<code>userByEmail</code>' attribute.
     */
    const std::string get_user_by_email() const {
      const Json::Value& v = Storage("userByEmail");
      if (v == Json::Value::null) return std::string("");
      return std::string(v.asCString());
    }

    /**
     * Change the '<code>userByEmail</code>' attribute.
     *
     * [Pick one] An email address of a user to grant access to. For example:
     * fred@example.com. Maps to IAM policy member "user:EMAIL" or
     * "serviceAccount:EMAIL".
     *
     * @param[in] value The new value.
     */
    void set_user_by_email(const std::string& value) {
      *MutableStorage("userByEmail") = value.data();
    }

    /**
     * Determine if the '<code>view</code>' attribute was set.
     *
     * @return true if the '<code>view</code>' attribute was set.
     */
    bool has_view() const {
      return Storage().isMember("view");
    }

    /**
     * Clears the '<code>view</code>' attribute.
     */
    void clear_view() {
      MutableStorage()->removeMember("view");
    }


    /**
     * Get a reference to the value of the '<code>view</code>' attribute.
     */
    const TableReference get_view() const;

    /**
     * Gets a reference to a mutable value of the '<code>view</code>' property.
     *
     * [Pick one] A view from a different dataset to grant access to. Queries
     * executed against that view will have read access to tables in this
     * dataset. The role field is not required when this field is set. If that
     * view is updated by any user, access to the view needs to be granted again
     * via an update operation.
     *
     * @return The result can be modified to change the attribute value.
     */
    TableReference mutable_view();

   private:
    void operator=(const DatasetAccess&);
  };  // DatasetAccess
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Dataset* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Dataset(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Dataset(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Dataset();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::Dataset</code>
   */
  const char* GetTypeName() const {
    return "google_bigquery_api::Dataset";
  }

  /**
   * Determine if the '<code>access</code>' attribute was set.
   *
   * @return true if the '<code>access</code>' attribute was set.
   */
  bool has_access() const {
    return Storage().isMember("access");
  }

  /**
   * Clears the '<code>access</code>' attribute.
   */
  void clear_access() {
    MutableStorage()->removeMember("access");
  }


  /**
   * Get a reference to the value of the '<code>access</code>' attribute.
   */
  const client::JsonCppArray<DatasetAccess > get_access() const {
     const Json::Value& storage = Storage("access");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<DatasetAccess > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>access</code>' property.
   *
   * [Optional] An array of objects that define dataset access for one or more
   * entities. You can set this property when inserting or updating a dataset in
   * order to control who is allowed to access the data. If unspecified at
   * dataset creation time, BigQuery adds default dataset access for the
   * following entities: access.specialGroup: projectReaders; access.role:
   * READER; access.specialGroup: projectWriters; access.role: WRITER;
   * access.specialGroup: projectOwners; access.role: OWNER; access.userByEmail:
   * [dataset creator email]; access.role: OWNER;.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<DatasetAccess > mutable_access() {
    Json::Value* storage = MutableStorage("access");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<DatasetAccess > >(storage);
  }

  /**
   * Determine if the '<code>creationTime</code>' attribute was set.
   *
   * @return true if the '<code>creationTime</code>' attribute was set.
   */
  bool has_creation_time() const {
    return Storage().isMember("creationTime");
  }

  /**
   * Clears the '<code>creationTime</code>' attribute.
   */
  void clear_creation_time() {
    MutableStorage()->removeMember("creationTime");
  }


  /**
   * Get the value of the '<code>creationTime</code>' attribute.
   */
  int64 get_creation_time() const {
    const Json::Value& storage = Storage("creationTime");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>creationTime</code>' attribute.
   *
   * [Output-only] The time when this dataset was created, in milliseconds since
   * the epoch.
   *
   * @param[in] value The new value.
   */
  void set_creation_time(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("creationTime"));
  }

  /**
   * Determine if the '<code>datasetReference</code>' attribute was set.
   *
   * @return true if the '<code>datasetReference</code>' attribute was set.
   */
  bool has_dataset_reference() const {
    return Storage().isMember("datasetReference");
  }

  /**
   * Clears the '<code>datasetReference</code>' attribute.
   */
  void clear_dataset_reference() {
    MutableStorage()->removeMember("datasetReference");
  }


  /**
   * Get a reference to the value of the '<code>datasetReference</code>'
   * attribute.
   */
  const DatasetReference get_dataset_reference() const;

  /**
   * Gets a reference to a mutable value of the '<code>datasetReference</code>'
   * property.
   *
   * [Required] A reference that identifies the dataset.
   *
   * @return The result can be modified to change the attribute value.
   */
  DatasetReference mutable_datasetReference();

  /**
   * Determine if the '<code>defaultPartitionExpirationMs</code>' attribute was
   * set.
   *
   * @return true if the '<code>defaultPartitionExpirationMs</code>' attribute
   * was set.
   */
  bool has_default_partition_expiration_ms() const {
    return Storage().isMember("defaultPartitionExpirationMs");
  }

  /**
   * Clears the '<code>defaultPartitionExpirationMs</code>' attribute.
   */
  void clear_default_partition_expiration_ms() {
    MutableStorage()->removeMember("defaultPartitionExpirationMs");
  }


  /**
   * Get the value of the '<code>defaultPartitionExpirationMs</code>' attribute.
   */
  int64 get_default_partition_expiration_ms() const {
    const Json::Value& storage = Storage("defaultPartitionExpirationMs");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>defaultPartitionExpirationMs</code>' attribute.
   *
   * [Optional] The default partition expiration for all partitioned tables in
   * the dataset, in milliseconds. Once this property is set, all newly-created
   * partitioned tables in the dataset will have an expirationMs property in the
   * timePartitioning settings set to this value, and changing the value will
   * only affect new tables, not existing ones. The storage in a partition will
   * have an expiration time of its partition time plus this value. Setting this
   * property overrides the use of defaultTableExpirationMs for partitioned
   * tables: only one of defaultTableExpirationMs and
   * defaultPartitionExpirationMs will be used for any new partitioned table. If
   * you provide an explicit timePartitioning.expirationMs when creating or
   * updating a partitioned table, that value takes precedence over the default
   * partition expiration time indicated by this property.
   *
   * @param[in] value The new value.
   */
  void set_default_partition_expiration_ms(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("defaultPartitionExpirationMs"));
  }

  /**
   * Determine if the '<code>defaultTableExpirationMs</code>' attribute was set.
   *
   * @return true if the '<code>defaultTableExpirationMs</code>' attribute was
   * set.
   */
  bool has_default_table_expiration_ms() const {
    return Storage().isMember("defaultTableExpirationMs");
  }

  /**
   * Clears the '<code>defaultTableExpirationMs</code>' attribute.
   */
  void clear_default_table_expiration_ms() {
    MutableStorage()->removeMember("defaultTableExpirationMs");
  }


  /**
   * Get the value of the '<code>defaultTableExpirationMs</code>' attribute.
   */
  int64 get_default_table_expiration_ms() const {
    const Json::Value& storage = Storage("defaultTableExpirationMs");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>defaultTableExpirationMs</code>' attribute.
   *
   * [Optional] The default lifetime of all tables in the dataset, in
   * milliseconds. The minimum value is 3600000 milliseconds (one hour). Once
   * this property is set, all newly-created tables in the dataset will have an
   * expirationTime property set to the creation time plus the value in this
   * property, and changing the value will only affect new tables, not existing
   * ones. When the expirationTime for a given table is reached, that table will
   * be deleted automatically. If a table's expirationTime is modified or
   * removed before the table expires, or if you provide an explicit
   * expirationTime when creating a table, that value takes precedence over the
   * default expiration time indicated by this property.
   *
   * @param[in] value The new value.
   */
  void set_default_table_expiration_ms(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("defaultTableExpirationMs"));
  }

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const std::string get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   *
   * [Optional] A user-friendly description of the dataset.
   *
   * @param[in] value The new value.
   */
  void set_description(const std::string& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>etag</code>' attribute was set.
   *
   * @return true if the '<code>etag</code>' attribute was set.
   */
  bool has_etag() const {
    return Storage().isMember("etag");
  }

  /**
   * Clears the '<code>etag</code>' attribute.
   */
  void clear_etag() {
    MutableStorage()->removeMember("etag");
  }


  /**
   * Get the value of the '<code>etag</code>' attribute.
   */
  const std::string get_etag() const {
    const Json::Value& v = Storage("etag");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>etag</code>' attribute.
   *
   * [Output-only] A hash of the resource.
   *
   * @param[in] value The new value.
   */
  void set_etag(const std::string& value) {
    *MutableStorage("etag") = value.data();
  }

  /**
   * Determine if the '<code>friendlyName</code>' attribute was set.
   *
   * @return true if the '<code>friendlyName</code>' attribute was set.
   */
  bool has_friendly_name() const {
    return Storage().isMember("friendlyName");
  }

  /**
   * Clears the '<code>friendlyName</code>' attribute.
   */
  void clear_friendly_name() {
    MutableStorage()->removeMember("friendlyName");
  }


  /**
   * Get the value of the '<code>friendlyName</code>' attribute.
   */
  const std::string get_friendly_name() const {
    const Json::Value& v = Storage("friendlyName");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>friendlyName</code>' attribute.
   *
   * [Optional] A descriptive name for the dataset.
   *
   * @param[in] value The new value.
   */
  void set_friendly_name(const std::string& value) {
    *MutableStorage("friendlyName") = value.data();
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const std::string get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * [Output-only] The fully-qualified unique name of the dataset in the format
   * projectId:datasetId. The dataset name without the project name is given in
   * the datasetId field. When creating a new dataset, leave this field blank,
   * and instead specify the datasetId field.
   *
   * @param[in] value The new value.
   */
  void set_id(const std::string& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const std::string get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * [Output-only] The resource type.
   *
   * @param[in] value The new value.
   */
  void set_kind(const std::string& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>labels</code>' attribute was set.
   *
   * @return true if the '<code>labels</code>' attribute was set.
   */
  bool has_labels() const {
    return Storage().isMember("labels");
  }

  /**
   * Clears the '<code>labels</code>' attribute.
   */
  void clear_labels() {
    MutableStorage()->removeMember("labels");
  }


  /**
   * Get a reference to the value of the '<code>labels</code>' attribute.
   */
  const client::JsonCppAssociativeArray<string > get_labels() const {
     const Json::Value& storage = Storage("labels");
    return client::JsonValueToCppValueHelper<client::JsonCppAssociativeArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>labels</code>' property.
   *
   * The labels associated with this dataset. You can use these to organize and
   * group your datasets. You can set this property when inserting or updating a
   * dataset. See Creating and Updating Dataset Labels for more information.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppAssociativeArray<string > mutable_labels() {
    Json::Value* storage = MutableStorage("labels");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppAssociativeArray<string > >(storage);
  }

  /**
   * Determine if the '<code>lastModifiedTime</code>' attribute was set.
   *
   * @return true if the '<code>lastModifiedTime</code>' attribute was set.
   */
  bool has_last_modified_time() const {
    return Storage().isMember("lastModifiedTime");
  }

  /**
   * Clears the '<code>lastModifiedTime</code>' attribute.
   */
  void clear_last_modified_time() {
    MutableStorage()->removeMember("lastModifiedTime");
  }


  /**
   * Get the value of the '<code>lastModifiedTime</code>' attribute.
   */
  int64 get_last_modified_time() const {
    const Json::Value& storage = Storage("lastModifiedTime");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>lastModifiedTime</code>' attribute.
   *
   * [Output-only] The date when this dataset or any of its tables was last
   * modified, in milliseconds since the epoch.
   *
   * @param[in] value The new value.
   */
  void set_last_modified_time(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("lastModifiedTime"));
  }

  /**
   * Determine if the '<code>location</code>' attribute was set.
   *
   * @return true if the '<code>location</code>' attribute was set.
   */
  bool has_location() const {
    return Storage().isMember("location");
  }

  /**
   * Clears the '<code>location</code>' attribute.
   */
  void clear_location() {
    MutableStorage()->removeMember("location");
  }


  /**
   * Get the value of the '<code>location</code>' attribute.
   */
  const std::string get_location() const {
    const Json::Value& v = Storage("location");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>location</code>' attribute.
   *
   * The geographic location where the dataset should reside. The default value
   * is US. See details at https://cloud.google.com/bigquery/docs/locations.
   *
   * @param[in] value The new value.
   */
  void set_location(const std::string& value) {
    *MutableStorage("location") = value.data();
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const std::string get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * [Output-only] A URL that can be used to access the resource again. You can
   * use this URL in Get or Update requests to the resource.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const std::string& value) {
    *MutableStorage("selfLink") = value.data();
  }

 private:
  void operator=(const Dataset&);
};  // Dataset
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_DATASET_H_
