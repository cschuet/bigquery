// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.6.0

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google API Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 20190224
// Generated by:
//    Tool: google-apis-code-generator 1.6.0
//     C++: 0.1.5
#ifndef  GOOGLE_BIGQUERY_API_BIGTABLE_COLUMN_FAMILY_H_
#define  GOOGLE_BIGQUERY_API_BIGTABLE_COLUMN_FAMILY_H_

#include <string>
#include "googleapis/client/data/jsoncpp_data.h"

#include "google/bigquery_api/bigtable_column.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class BigtableColumnFamily : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static BigtableColumnFamily* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit BigtableColumnFamily(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit BigtableColumnFamily(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~BigtableColumnFamily();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::BigtableColumnFamily</code>
   */
  const char* GetTypeName() const {
    return "google_bigquery_api::BigtableColumnFamily";
  }

  /**
   * Determine if the '<code>columns</code>' attribute was set.
   *
   * @return true if the '<code>columns</code>' attribute was set.
   */
  bool has_columns() const {
    return Storage().isMember("columns");
  }

  /**
   * Clears the '<code>columns</code>' attribute.
   */
  void clear_columns() {
    MutableStorage()->removeMember("columns");
  }


  /**
   * Get a reference to the value of the '<code>columns</code>' attribute.
   */
  const client::JsonCppArray<BigtableColumn > get_columns() const;

  /**
   * Gets a reference to a mutable value of the '<code>columns</code>' property.
   *
   * [Optional] Lists of columns that should be exposed as individual fields as
   * opposed to a list of (column name, value) pairs. All columns whose
   * qualifier matches a qualifier in this list can be accessed as .. Other
   * columns can be accessed as a list through .Column field.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<BigtableColumn > mutable_columns();

  /**
   * Determine if the '<code>encoding</code>' attribute was set.
   *
   * @return true if the '<code>encoding</code>' attribute was set.
   */
  bool has_encoding() const {
    return Storage().isMember("encoding");
  }

  /**
   * Clears the '<code>encoding</code>' attribute.
   */
  void clear_encoding() {
    MutableStorage()->removeMember("encoding");
  }


  /**
   * Get the value of the '<code>encoding</code>' attribute.
   */
  const std::string get_encoding() const {
    const Json::Value& v = Storage("encoding");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>encoding</code>' attribute.
   *
   * [Optional] The encoding of the values when the type is not STRING.
   * Acceptable encoding values are: TEXT - indicates values are alphanumeric
   * text strings. BINARY - indicates values are encoded using HBase
   * Bytes.toBytes family of functions. This can be overridden for a specific
   * column by listing that column in 'columns' and specifying an encoding for
   * it.
   *
   * @param[in] value The new value.
   */
  void set_encoding(const std::string& value) {
    *MutableStorage("encoding") = value.data();
  }

  /**
   * Determine if the '<code>familyId</code>' attribute was set.
   *
   * @return true if the '<code>familyId</code>' attribute was set.
   */
  bool has_family_id() const {
    return Storage().isMember("familyId");
  }

  /**
   * Clears the '<code>familyId</code>' attribute.
   */
  void clear_family_id() {
    MutableStorage()->removeMember("familyId");
  }


  /**
   * Get the value of the '<code>familyId</code>' attribute.
   */
  const std::string get_family_id() const {
    const Json::Value& v = Storage("familyId");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>familyId</code>' attribute.
   *
   * Identifier of the column family.
   *
   * @param[in] value The new value.
   */
  void set_family_id(const std::string& value) {
    *MutableStorage("familyId") = value.data();
  }

  /**
   * Determine if the '<code>onlyReadLatest</code>' attribute was set.
   *
   * @return true if the '<code>onlyReadLatest</code>' attribute was set.
   */
  bool has_only_read_latest() const {
    return Storage().isMember("onlyReadLatest");
  }

  /**
   * Clears the '<code>onlyReadLatest</code>' attribute.
   */
  void clear_only_read_latest() {
    MutableStorage()->removeMember("onlyReadLatest");
  }


  /**
   * Get the value of the '<code>onlyReadLatest</code>' attribute.
   */
  bool get_only_read_latest() const {
    const Json::Value& storage = Storage("onlyReadLatest");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>onlyReadLatest</code>' attribute.
   *
   * [Optional] If this is set only the latest version of value are exposed for
   * all columns in this column family. This can be overridden for a specific
   * column by listing that column in 'columns' and specifying a different
   * setting for that column.
   *
   * @param[in] value The new value.
   */
  void set_only_read_latest(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("onlyReadLatest"));
  }

  /**
   * Determine if the '<code>type</code>' attribute was set.
   *
   * @return true if the '<code>type</code>' attribute was set.
   */
  bool has_type() const {
    return Storage().isMember("type");
  }

  /**
   * Clears the '<code>type</code>' attribute.
   */
  void clear_type() {
    MutableStorage()->removeMember("type");
  }


  /**
   * Get the value of the '<code>type</code>' attribute.
   */
  const std::string get_type() const {
    const Json::Value& v = Storage("type");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>type</code>' attribute.
   *
   * [Optional] The type to convert the value in cells of this column family.
   * The values are expected to be encoded using HBase Bytes.toBytes function
   * when using the BINARY encoding value. Following BigQuery types are allowed
   * (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is
   * BYTES. This can be overridden for a specific column by listing that column
   * in 'columns' and specifying a type for it.
   *
   * @param[in] value The new value.
   */
  void set_type(const std::string& value) {
    *MutableStorage("type") = value.data();
  }

 private:
  void operator=(const BigtableColumnFamily&);
};  // BigtableColumnFamily
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_BIGTABLE_COLUMN_FAMILY_H_
