// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2018-10-08 17:45:39 UTC
//   on: 2019-03-01, 03:01:16 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 427
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_BIGQUERY_API_JOB_H_
#define  GOOGLE_BIGQUERY_API_JOB_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/bigquery_api/job_configuration.h"
#include "google/bigquery_api/job_reference.h"
#include "google/bigquery_api/job_statistics.h"
#include "google/bigquery_api/job_status.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class Job : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Job* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Job(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Job(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Job();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::Job</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_bigquery_api::Job");
  }

  /**
   * Determine if the '<code>configuration</code>' attribute was set.
   *
   * @return true if the '<code>configuration</code>' attribute was set.
   */
  bool has_configuration() const {
    return Storage().isMember("configuration");
  }

  /**
   * Clears the '<code>configuration</code>' attribute.
   */
  void clear_configuration() {
    MutableStorage()->removeMember("configuration");
  }


  /**
   * Get a reference to the value of the '<code>configuration</code>' attribute.
   */
  const JobConfiguration get_configuration() const;

  /**
   * Gets a reference to a mutable value of the '<code>configuration</code>'
   * property.
   *
   * [Required] Describes the job configuration.
   *
   * @return The result can be modified to change the attribute value.
   */
  JobConfiguration mutable_configuration();

  /**
   * Determine if the '<code>etag</code>' attribute was set.
   *
   * @return true if the '<code>etag</code>' attribute was set.
   */
  bool has_etag() const {
    return Storage().isMember("etag");
  }

  /**
   * Clears the '<code>etag</code>' attribute.
   */
  void clear_etag() {
    MutableStorage()->removeMember("etag");
  }


  /**
   * Get the value of the '<code>etag</code>' attribute.
   */
  const StringPiece get_etag() const {
    const Json::Value& v = Storage("etag");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>etag</code>' attribute.
   *
   * [Output-only] A hash of this resource.
   *
   * @param[in] value The new value.
   */
  void set_etag(const StringPiece& value) {
    *MutableStorage("etag") = value.data();
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * [Output-only] Opaque ID field of the job.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>jobReference</code>' attribute was set.
   *
   * @return true if the '<code>jobReference</code>' attribute was set.
   */
  bool has_job_reference() const {
    return Storage().isMember("jobReference");
  }

  /**
   * Clears the '<code>jobReference</code>' attribute.
   */
  void clear_job_reference() {
    MutableStorage()->removeMember("jobReference");
  }


  /**
   * Get a reference to the value of the '<code>jobReference</code>' attribute.
   */
  const JobReference get_job_reference() const;

  /**
   * Gets a reference to a mutable value of the '<code>jobReference</code>'
   * property.
   *
   * [Optional] Reference describing the unique-per-user name of the job.
   *
   * @return The result can be modified to change the attribute value.
   */
  JobReference mutable_jobReference();

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * [Output-only] The type of the resource.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>selfLink</code>' attribute was set.
   *
   * @return true if the '<code>selfLink</code>' attribute was set.
   */
  bool has_self_link() const {
    return Storage().isMember("selfLink");
  }

  /**
   * Clears the '<code>selfLink</code>' attribute.
   */
  void clear_self_link() {
    MutableStorage()->removeMember("selfLink");
  }


  /**
   * Get the value of the '<code>selfLink</code>' attribute.
   */
  const StringPiece get_self_link() const {
    const Json::Value& v = Storage("selfLink");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>selfLink</code>' attribute.
   *
   * [Output-only] A URL that can be used to access this resource again.
   *
   * @param[in] value The new value.
   */
  void set_self_link(const StringPiece& value) {
    *MutableStorage("selfLink") = value.data();
  }

  /**
   * Determine if the '<code>statistics</code>' attribute was set.
   *
   * @return true if the '<code>statistics</code>' attribute was set.
   */
  bool has_statistics() const {
    return Storage().isMember("statistics");
  }

  /**
   * Clears the '<code>statistics</code>' attribute.
   */
  void clear_statistics() {
    MutableStorage()->removeMember("statistics");
  }


  /**
   * Get a reference to the value of the '<code>statistics</code>' attribute.
   */
  const JobStatistics get_statistics() const;

  /**
   * Gets a reference to a mutable value of the '<code>statistics</code>'
   * property.
   *
   * [Output-only] Information about the job, including starting time and ending
   * time of the job.
   *
   * @return The result can be modified to change the attribute value.
   */
  JobStatistics mutable_statistics();

  /**
   * Determine if the '<code>status</code>' attribute was set.
   *
   * @return true if the '<code>status</code>' attribute was set.
   */
  bool has_status() const {
    return Storage().isMember("status");
  }

  /**
   * Clears the '<code>status</code>' attribute.
   */
  void clear_status() {
    MutableStorage()->removeMember("status");
  }


  /**
   * Get a reference to the value of the '<code>status</code>' attribute.
   */
  const JobStatus get_status() const;

  /**
   * Gets a reference to a mutable value of the '<code>status</code>' property.
   *
   * [Output-only] The status of this job. Examine this value when polling an
   * asynchronous job to see if the job is complete.
   *
   * @return The result can be modified to change the attribute value.
   */
  JobStatus mutable_status();

  /**
   * Determine if the '<code>user_email</code>' attribute was set.
   *
   * @return true if the '<code>user_email</code>' attribute was set.
   */
  bool has_user_email() const {
    return Storage().isMember("user_email");
  }

  /**
   * Clears the '<code>user_email</code>' attribute.
   */
  void clear_user_email() {
    MutableStorage()->removeMember("user_email");
  }


  /**
   * Get the value of the '<code>user_email</code>' attribute.
   */
  const StringPiece get_user_email() const {
    const Json::Value& v = Storage("user_email");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>user_email</code>' attribute.
   *
   * [Output-only] Email address of the user who ran the job.
   *
   * @param[in] value The new value.
   */
  void set_user_email(const StringPiece& value) {
    *MutableStorage("user_email") = value.data();
  }

 private:
  void operator=(const Job&);
};  // Job
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_JOB_H_
