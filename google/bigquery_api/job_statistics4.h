// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2018-10-08 17:45:39 UTC
//   on: 2019-03-01, 03:01:16 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 427
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_BIGQUERY_API_JOB_STATISTICS4_H_
#define  GOOGLE_BIGQUERY_API_JOB_STATISTICS4_H_

#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class JobStatistics4 : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static JobStatistics4* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit JobStatistics4(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit JobStatistics4(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~JobStatistics4();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::JobStatistics4</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_bigquery_api::JobStatistics4");
  }

  /**
   * Determine if the '<code>destinationUriFileCounts</code>' attribute was set.
   *
   * @return true if the '<code>destinationUriFileCounts</code>' attribute was
   * set.
   */
  bool has_destination_uri_file_counts() const {
    return Storage().isMember("destinationUriFileCounts");
  }

  /**
   * Clears the '<code>destinationUriFileCounts</code>' attribute.
   */
  void clear_destination_uri_file_counts() {
    MutableStorage()->removeMember("destinationUriFileCounts");
  }


  /**
   * Get a reference to the value of the '<code>destinationUriFileCounts</code>'
   * attribute.
   */
  const client::JsonCppArray<int64 > get_destination_uri_file_counts() const {
     const Json::Value& storage = Storage("destinationUriFileCounts");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<int64 > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the
   * '<code>destinationUriFileCounts</code>' property.
   *
   * [Output-only] Number of files per destination URI or URI pattern specified
   * in the extract configuration. These values will be in the same order as the
   * URIs specified in the 'destinationUris' field.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<int64 > mutable_destinationUriFileCounts() {
    Json::Value* storage = MutableStorage("destinationUriFileCounts");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<int64 > >(storage);
  }

  /**
   * Determine if the '<code>inputBytes</code>' attribute was set.
   *
   * @return true if the '<code>inputBytes</code>' attribute was set.
   */
  bool has_input_bytes() const {
    return Storage().isMember("inputBytes");
  }

  /**
   * Clears the '<code>inputBytes</code>' attribute.
   */
  void clear_input_bytes() {
    MutableStorage()->removeMember("inputBytes");
  }


  /**
   * Get the value of the '<code>inputBytes</code>' attribute.
   */
  int64 get_input_bytes() const {
    const Json::Value& storage = Storage("inputBytes");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>inputBytes</code>' attribute.
   *
   * [Output-only] Number of user bytes extracted into the result. This is the
   * byte count as computed by BigQuery for billing purposes.
   *
   * @param[in] value The new value.
   */
  void set_input_bytes(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("inputBytes"));
  }

 private:
  void operator=(const JobStatistics4&);
};  // JobStatistics4
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_JOB_STATISTICS4_H_
