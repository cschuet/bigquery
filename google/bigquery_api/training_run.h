// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.6.0

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google API Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 20190224
// Generated by:
//    Tool: google-apis-code-generator 1.6.0
//     C++: 0.1.5
#ifndef  GOOGLE_BIGQUERY_API_TRAINING_RUN_H_
#define  GOOGLE_BIGQUERY_API_TRAINING_RUN_H_

#include <string>

#include "googleapis/base/integral_types.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/client/util/date_time.h"

#include "google/bigquery_api/iteration_result.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class TrainingRun : public client::JsonCppData {
 public:
  /**
   * [Output-only, Beta] Training options used by this training run. These
   * options are mutable for subsequent training runs. Default values are
   * explicitly stored for options not specified in the input query of the first
   * training run. For subsequent training runs, any option not explicitly
   * specified in the input query will be copied from the previous training run.
   *
   * @ingroup DataObject
   */
  class TrainingRunTrainingOptions : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static TrainingRunTrainingOptions* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TrainingRunTrainingOptions(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TrainingRunTrainingOptions(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~TrainingRunTrainingOptions();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_bigquery_api::TrainingRunTrainingOptions</code>
     */
    const char* GetTypeName() const {
      return "google_bigquery_api::TrainingRunTrainingOptions";
    }

    /**
     * Determine if the '<code>earlyStop</code>' attribute was set.
     *
     * @return true if the '<code>earlyStop</code>' attribute was set.
     */
    bool has_early_stop() const {
      return Storage().isMember("earlyStop");
    }

    /**
     * Clears the '<code>earlyStop</code>' attribute.
     */
    void clear_early_stop() {
      MutableStorage()->removeMember("earlyStop");
    }


    /**
     * Get the value of the '<code>earlyStop</code>' attribute.
     */
    bool get_early_stop() const {
      const Json::Value& storage = Storage("earlyStop");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>earlyStop</code>' attribute.
     * @param[in] value The new value.
     */
    void set_early_stop(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("earlyStop"));
    }

    /**
     * Determine if the '<code>l1Reg</code>' attribute was set.
     *
     * @return true if the '<code>l1Reg</code>' attribute was set.
     */
    bool has_l1_reg() const {
      return Storage().isMember("l1Reg");
    }

    /**
     * Clears the '<code>l1Reg</code>' attribute.
     */
    void clear_l1_reg() {
      MutableStorage()->removeMember("l1Reg");
    }


    /**
     * Get the value of the '<code>l1Reg</code>' attribute.
     */
    double get_l1_reg() const {
      const Json::Value& storage = Storage("l1Reg");
      return client::JsonValueToCppValueHelper<double >(storage);
    }

    /**
     * Change the '<code>l1Reg</code>' attribute.
     * @param[in] value The new value.
     */
    void set_l1_reg(double value) {
      client::SetJsonValueFromCppValueHelper<double >(
        value, MutableStorage("l1Reg"));
    }

    /**
     * Determine if the '<code>l2Reg</code>' attribute was set.
     *
     * @return true if the '<code>l2Reg</code>' attribute was set.
     */
    bool has_l2_reg() const {
      return Storage().isMember("l2Reg");
    }

    /**
     * Clears the '<code>l2Reg</code>' attribute.
     */
    void clear_l2_reg() {
      MutableStorage()->removeMember("l2Reg");
    }


    /**
     * Get the value of the '<code>l2Reg</code>' attribute.
     */
    double get_l2_reg() const {
      const Json::Value& storage = Storage("l2Reg");
      return client::JsonValueToCppValueHelper<double >(storage);
    }

    /**
     * Change the '<code>l2Reg</code>' attribute.
     * @param[in] value The new value.
     */
    void set_l2_reg(double value) {
      client::SetJsonValueFromCppValueHelper<double >(
        value, MutableStorage("l2Reg"));
    }

    /**
     * Determine if the '<code>learnRate</code>' attribute was set.
     *
     * @return true if the '<code>learnRate</code>' attribute was set.
     */
    bool has_learn_rate() const {
      return Storage().isMember("learnRate");
    }

    /**
     * Clears the '<code>learnRate</code>' attribute.
     */
    void clear_learn_rate() {
      MutableStorage()->removeMember("learnRate");
    }


    /**
     * Get the value of the '<code>learnRate</code>' attribute.
     */
    double get_learn_rate() const {
      const Json::Value& storage = Storage("learnRate");
      return client::JsonValueToCppValueHelper<double >(storage);
    }

    /**
     * Change the '<code>learnRate</code>' attribute.
     * @param[in] value The new value.
     */
    void set_learn_rate(double value) {
      client::SetJsonValueFromCppValueHelper<double >(
        value, MutableStorage("learnRate"));
    }

    /**
     * Determine if the '<code>learnRateStrategy</code>' attribute was set.
     *
     * @return true if the '<code>learnRateStrategy</code>' attribute was set.
     */
    bool has_learn_rate_strategy() const {
      return Storage().isMember("learnRateStrategy");
    }

    /**
     * Clears the '<code>learnRateStrategy</code>' attribute.
     */
    void clear_learn_rate_strategy() {
      MutableStorage()->removeMember("learnRateStrategy");
    }


    /**
     * Get the value of the '<code>learnRateStrategy</code>' attribute.
     */
    const std::string get_learn_rate_strategy() const {
      const Json::Value& v = Storage("learnRateStrategy");
      if (v == Json::Value::null) return std::string("");
      return std::string(v.asCString());
    }

    /**
     * Change the '<code>learnRateStrategy</code>' attribute.
     * @param[in] value The new value.
     */
    void set_learn_rate_strategy(const std::string& value) {
      *MutableStorage("learnRateStrategy") = value.data();
    }

    /**
     * Determine if the '<code>lineSearchInitLearnRate</code>' attribute was
     * set.
     *
     * @return true if the '<code>lineSearchInitLearnRate</code>' attribute was
     * set.
     */
    bool has_line_search_init_learn_rate() const {
      return Storage().isMember("lineSearchInitLearnRate");
    }

    /**
     * Clears the '<code>lineSearchInitLearnRate</code>' attribute.
     */
    void clear_line_search_init_learn_rate() {
      MutableStorage()->removeMember("lineSearchInitLearnRate");
    }


    /**
     * Get the value of the '<code>lineSearchInitLearnRate</code>' attribute.
     */
    double get_line_search_init_learn_rate() const {
      const Json::Value& storage = Storage("lineSearchInitLearnRate");
      return client::JsonValueToCppValueHelper<double >(storage);
    }

    /**
     * Change the '<code>lineSearchInitLearnRate</code>' attribute.
     * @param[in] value The new value.
     */
    void set_line_search_init_learn_rate(double value) {
      client::SetJsonValueFromCppValueHelper<double >(
        value, MutableStorage("lineSearchInitLearnRate"));
    }

    /**
     * Determine if the '<code>maxIteration</code>' attribute was set.
     *
     * @return true if the '<code>maxIteration</code>' attribute was set.
     */
    bool has_max_iteration() const {
      return Storage().isMember("maxIteration");
    }

    /**
     * Clears the '<code>maxIteration</code>' attribute.
     */
    void clear_max_iteration() {
      MutableStorage()->removeMember("maxIteration");
    }


    /**
     * Get the value of the '<code>maxIteration</code>' attribute.
     */
    int64 get_max_iteration() const {
      const Json::Value& storage = Storage("maxIteration");
      return client::JsonValueToCppValueHelper<int64 >(storage);
    }

    /**
     * Change the '<code>maxIteration</code>' attribute.
     * @param[in] value The new value.
     */
    void set_max_iteration(int64 value) {
      client::SetJsonValueFromCppValueHelper<int64 >(
        value, MutableStorage("maxIteration"));
    }

    /**
     * Determine if the '<code>minRelProgress</code>' attribute was set.
     *
     * @return true if the '<code>minRelProgress</code>' attribute was set.
     */
    bool has_min_rel_progress() const {
      return Storage().isMember("minRelProgress");
    }

    /**
     * Clears the '<code>minRelProgress</code>' attribute.
     */
    void clear_min_rel_progress() {
      MutableStorage()->removeMember("minRelProgress");
    }


    /**
     * Get the value of the '<code>minRelProgress</code>' attribute.
     */
    double get_min_rel_progress() const {
      const Json::Value& storage = Storage("minRelProgress");
      return client::JsonValueToCppValueHelper<double >(storage);
    }

    /**
     * Change the '<code>minRelProgress</code>' attribute.
     * @param[in] value The new value.
     */
    void set_min_rel_progress(double value) {
      client::SetJsonValueFromCppValueHelper<double >(
        value, MutableStorage("minRelProgress"));
    }

    /**
     * Determine if the '<code>warmStart</code>' attribute was set.
     *
     * @return true if the '<code>warmStart</code>' attribute was set.
     */
    bool has_warm_start() const {
      return Storage().isMember("warmStart");
    }

    /**
     * Clears the '<code>warmStart</code>' attribute.
     */
    void clear_warm_start() {
      MutableStorage()->removeMember("warmStart");
    }


    /**
     * Get the value of the '<code>warmStart</code>' attribute.
     */
    bool get_warm_start() const {
      const Json::Value& storage = Storage("warmStart");
      return client::JsonValueToCppValueHelper<bool >(storage);
    }

    /**
     * Change the '<code>warmStart</code>' attribute.
     * @param[in] value The new value.
     */
    void set_warm_start(bool value) {
      client::SetJsonValueFromCppValueHelper<bool >(
        value, MutableStorage("warmStart"));
    }

   private:
    void operator=(const TrainingRunTrainingOptions&);
  };  // TrainingRunTrainingOptions
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static TrainingRun* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit TrainingRun(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit TrainingRun(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~TrainingRun();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::TrainingRun</code>
   */
  const char* GetTypeName() const {
    return "google_bigquery_api::TrainingRun";
  }

  /**
   * Determine if the '<code>iterationResults</code>' attribute was set.
   *
   * @return true if the '<code>iterationResults</code>' attribute was set.
   */
  bool has_iteration_results() const {
    return Storage().isMember("iterationResults");
  }

  /**
   * Clears the '<code>iterationResults</code>' attribute.
   */
  void clear_iteration_results() {
    MutableStorage()->removeMember("iterationResults");
  }


  /**
   * Get a reference to the value of the '<code>iterationResults</code>'
   * attribute.
   */
  const client::JsonCppArray<IterationResult > get_iteration_results() const;

  /**
   * Gets a reference to a mutable value of the '<code>iterationResults</code>'
   * property.
   *
   * [Output-only, Beta] List of each iteration results.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<IterationResult > mutable_iterationResults();

  /**
   * Determine if the '<code>startTime</code>' attribute was set.
   *
   * @return true if the '<code>startTime</code>' attribute was set.
   */
  bool has_start_time() const {
    return Storage().isMember("startTime");
  }

  /**
   * Clears the '<code>startTime</code>' attribute.
   */
  void clear_start_time() {
    MutableStorage()->removeMember("startTime");
  }


  /**
   * Get the value of the '<code>startTime</code>' attribute.
   */
  client::DateTime get_start_time() const {
    const Json::Value& storage = Storage("startTime");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>startTime</code>' attribute.
   *
   * [Output-only, Beta] Training run start time in milliseconds since the
   * epoch.
   *
   * @param[in] value The new value.
   */
  void set_start_time(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("startTime"));
  }

  /**
   * Determine if the '<code>state</code>' attribute was set.
   *
   * @return true if the '<code>state</code>' attribute was set.
   */
  bool has_state() const {
    return Storage().isMember("state");
  }

  /**
   * Clears the '<code>state</code>' attribute.
   */
  void clear_state() {
    MutableStorage()->removeMember("state");
  }


  /**
   * Get the value of the '<code>state</code>' attribute.
   */
  const std::string get_state() const {
    const Json::Value& v = Storage("state");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>state</code>' attribute.
   *
   * [Output-only, Beta] Different state applicable for a training run. IN
   * PROGRESS: Training run is in progress. FAILED: Training run ended due to a
   * non-retryable failure. SUCCEEDED: Training run successfully completed.
   * CANCELLED: Training run cancelled by the user.
   *
   * @param[in] value The new value.
   */
  void set_state(const std::string& value) {
    *MutableStorage("state") = value.data();
  }

  /**
   * Determine if the '<code>trainingOptions</code>' attribute was set.
   *
   * @return true if the '<code>trainingOptions</code>' attribute was set.
   */
  bool has_training_options() const {
    return Storage().isMember("trainingOptions");
  }

  /**
   * Clears the '<code>trainingOptions</code>' attribute.
   */
  void clear_training_options() {
    MutableStorage()->removeMember("trainingOptions");
  }


  /**
   * Get a reference to the value of the '<code>trainingOptions</code>'
   * attribute.
   */
  const TrainingRunTrainingOptions get_training_options() const {
     const Json::Value& storage = Storage("trainingOptions");
    return client::JsonValueToCppValueHelper<TrainingRunTrainingOptions >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>trainingOptions</code>'
   * property.
   *
   * [Output-only, Beta] Training options used by this training run. These
   * options are mutable for subsequent training runs. Default values are
   * explicitly stored for options not specified in the input query of the first
   * training run. For subsequent training runs, any option not explicitly
   * specified in the input query will be copied from the previous training run.
   *
   * @return The result can be modified to change the attribute value.
   */
  TrainingRunTrainingOptions mutable_trainingOptions() {
    Json::Value* storage = MutableStorage("trainingOptions");
    return client::JsonValueToMutableCppValueHelper<TrainingRunTrainingOptions >(storage);
  }

 private:
  void operator=(const TrainingRun&);
};  // TrainingRun
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_TRAINING_RUN_H_
