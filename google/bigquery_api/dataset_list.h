// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.6.0

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google API Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 20190224
// Generated by:
//    Tool: google-apis-code-generator 1.6.0
//     C++: 0.1.5
#ifndef  GOOGLE_BIGQUERY_API_DATASET_LIST_H_
#define  GOOGLE_BIGQUERY_API_DATASET_LIST_H_

#include <string>
#include "googleapis/client/data/jsoncpp_data.h"

#include "google/bigquery_api/dataset_reference.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class DatasetList : public client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class DatasetListDatasets : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static DatasetListDatasets* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit DatasetListDatasets(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit DatasetListDatasets(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~DatasetListDatasets();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_bigquery_api::DatasetListDatasets</code>
     */
    const char* GetTypeName() const {
      return "google_bigquery_api::DatasetListDatasets";
    }

    /**
     * Determine if the '<code>datasetReference</code>' attribute was set.
     *
     * @return true if the '<code>datasetReference</code>' attribute was set.
     */
    bool has_dataset_reference() const {
      return Storage().isMember("datasetReference");
    }

    /**
     * Clears the '<code>datasetReference</code>' attribute.
     */
    void clear_dataset_reference() {
      MutableStorage()->removeMember("datasetReference");
    }


    /**
     * Get a reference to the value of the '<code>datasetReference</code>'
     * attribute.
     */
    const DatasetReference get_dataset_reference() const;

    /**
     * Gets a reference to a mutable value of the
     * '<code>datasetReference</code>' property.
     *
     * The dataset reference. Use this property to access specific parts of the
     * dataset's ID, such as project ID or dataset ID.
     *
     * @return The result can be modified to change the attribute value.
     */
    DatasetReference mutable_datasetReference();

    /**
     * Determine if the '<code>friendlyName</code>' attribute was set.
     *
     * @return true if the '<code>friendlyName</code>' attribute was set.
     */
    bool has_friendly_name() const {
      return Storage().isMember("friendlyName");
    }

    /**
     * Clears the '<code>friendlyName</code>' attribute.
     */
    void clear_friendly_name() {
      MutableStorage()->removeMember("friendlyName");
    }


    /**
     * Get the value of the '<code>friendlyName</code>' attribute.
     */
    const std::string get_friendly_name() const {
      const Json::Value& v = Storage("friendlyName");
      if (v == Json::Value::null) return std::string("");
      return std::string(v.asCString());
    }

    /**
     * Change the '<code>friendlyName</code>' attribute.
     *
     * A descriptive name for the dataset, if one exists.
     *
     * @param[in] value The new value.
     */
    void set_friendly_name(const std::string& value) {
      *MutableStorage("friendlyName") = value.data();
    }

    /**
     * Determine if the '<code>id</code>' attribute was set.
     *
     * @return true if the '<code>id</code>' attribute was set.
     */
    bool has_id() const {
      return Storage().isMember("id");
    }

    /**
     * Clears the '<code>id</code>' attribute.
     */
    void clear_id() {
      MutableStorage()->removeMember("id");
    }


    /**
     * Get the value of the '<code>id</code>' attribute.
     */
    const std::string get_id() const {
      const Json::Value& v = Storage("id");
      if (v == Json::Value::null) return std::string("");
      return std::string(v.asCString());
    }

    /**
     * Change the '<code>id</code>' attribute.
     *
     * The fully-qualified, unique, opaque ID of the dataset.
     *
     * @param[in] value The new value.
     */
    void set_id(const std::string& value) {
      *MutableStorage("id") = value.data();
    }

    /**
     * Determine if the '<code>kind</code>' attribute was set.
     *
     * @return true if the '<code>kind</code>' attribute was set.
     */
    bool has_kind() const {
      return Storage().isMember("kind");
    }

    /**
     * Clears the '<code>kind</code>' attribute.
     */
    void clear_kind() {
      MutableStorage()->removeMember("kind");
    }


    /**
     * Get the value of the '<code>kind</code>' attribute.
     */
    const std::string get_kind() const {
      const Json::Value& v = Storage("kind");
      if (v == Json::Value::null) return std::string("");
      return std::string(v.asCString());
    }

    /**
     * Change the '<code>kind</code>' attribute.
     *
     * The resource type. This property always returns the value
     * "bigquery#dataset".
     *
     * @param[in] value The new value.
     */
    void set_kind(const std::string& value) {
      *MutableStorage("kind") = value.data();
    }

    /**
     * Determine if the '<code>labels</code>' attribute was set.
     *
     * @return true if the '<code>labels</code>' attribute was set.
     */
    bool has_labels() const {
      return Storage().isMember("labels");
    }

    /**
     * Clears the '<code>labels</code>' attribute.
     */
    void clear_labels() {
      MutableStorage()->removeMember("labels");
    }


    /**
     * Get a reference to the value of the '<code>labels</code>' attribute.
     */
    const client::JsonCppAssociativeArray<string > get_labels() const {
       const Json::Value& storage = Storage("labels");
      return client::JsonValueToCppValueHelper<client::JsonCppAssociativeArray<string > >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>labels</code>'
     * property.
     *
     * The labels associated with this dataset. You can use these to organize
     * and group your datasets.
     *
     * @return The result can be modified to change the attribute value.
     */
    client::JsonCppAssociativeArray<string > mutable_labels() {
      Json::Value* storage = MutableStorage("labels");
      return client::JsonValueToMutableCppValueHelper<client::JsonCppAssociativeArray<string > >(storage);
    }

    /**
     * Determine if the '<code>location</code>' attribute was set.
     *
     * @return true if the '<code>location</code>' attribute was set.
     */
    bool has_location() const {
      return Storage().isMember("location");
    }

    /**
     * Clears the '<code>location</code>' attribute.
     */
    void clear_location() {
      MutableStorage()->removeMember("location");
    }


    /**
     * Get the value of the '<code>location</code>' attribute.
     */
    const std::string get_location() const {
      const Json::Value& v = Storage("location");
      if (v == Json::Value::null) return std::string("");
      return std::string(v.asCString());
    }

    /**
     * Change the '<code>location</code>' attribute.
     *
     * The geographic location where the data resides.
     *
     * @param[in] value The new value.
     */
    void set_location(const std::string& value) {
      *MutableStorage("location") = value.data();
    }

   private:
    void operator=(const DatasetListDatasets&);
  };  // DatasetListDatasets
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static DatasetList* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit DatasetList(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit DatasetList(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~DatasetList();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::DatasetList</code>
   */
  const char* GetTypeName() const {
    return "google_bigquery_api::DatasetList";
  }

  /**
   * Determine if the '<code>datasets</code>' attribute was set.
   *
   * @return true if the '<code>datasets</code>' attribute was set.
   */
  bool has_datasets() const {
    return Storage().isMember("datasets");
  }

  /**
   * Clears the '<code>datasets</code>' attribute.
   */
  void clear_datasets() {
    MutableStorage()->removeMember("datasets");
  }


  /**
   * Get a reference to the value of the '<code>datasets</code>' attribute.
   */
  const client::JsonCppArray<DatasetListDatasets > get_datasets() const {
     const Json::Value& storage = Storage("datasets");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<DatasetListDatasets > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>datasets</code>'
   * property.
   *
   * An array of the dataset resources in the project. Each resource contains
   * basic information. For full information about a particular dataset
   * resource, use the Datasets: get method. This property is omitted when there
   * are no datasets in the project.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<DatasetListDatasets > mutable_datasets() {
    Json::Value* storage = MutableStorage("datasets");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<DatasetListDatasets > >(storage);
  }

  /**
   * Determine if the '<code>etag</code>' attribute was set.
   *
   * @return true if the '<code>etag</code>' attribute was set.
   */
  bool has_etag() const {
    return Storage().isMember("etag");
  }

  /**
   * Clears the '<code>etag</code>' attribute.
   */
  void clear_etag() {
    MutableStorage()->removeMember("etag");
  }


  /**
   * Get the value of the '<code>etag</code>' attribute.
   */
  const std::string get_etag() const {
    const Json::Value& v = Storage("etag");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>etag</code>' attribute.
   *
   * A hash value of the results page. You can use this property to determine if
   * the page has changed since the last request.
   *
   * @param[in] value The new value.
   */
  void set_etag(const std::string& value) {
    *MutableStorage("etag") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const std::string get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * The list type. This property always returns the value
   * "bigquery#datasetList".
   *
   * @param[in] value The new value.
   */
  void set_kind(const std::string& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>nextPageToken</code>' attribute was set.
   *
   * @return true if the '<code>nextPageToken</code>' attribute was set.
   */
  bool has_next_page_token() const {
    return Storage().isMember("nextPageToken");
  }

  /**
   * Clears the '<code>nextPageToken</code>' attribute.
   */
  void clear_next_page_token() {
    MutableStorage()->removeMember("nextPageToken");
  }


  /**
   * Get the value of the '<code>nextPageToken</code>' attribute.
   */
  const std::string get_next_page_token() const {
    const Json::Value& v = Storage("nextPageToken");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>nextPageToken</code>' attribute.
   *
   * A token that can be used to request the next results page. This property is
   * omitted on the final results page.
   *
   * @param[in] value The new value.
   */
  void set_next_page_token(const std::string& value) {
    *MutableStorage("nextPageToken") = value.data();
  }

 private:
  void operator=(const DatasetList&);
};  // DatasetList
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_DATASET_LIST_H_
