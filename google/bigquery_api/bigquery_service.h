// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.6.0
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#ifndef  GOOGLE_BIGQUERY_API_BIGQUERY_SERVICE_H_
#define  GOOGLE_BIGQUERY_API_BIGQUERY_SERVICE_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/client/service/client_service.h"
#include "googleapis/client/service/media_uploader.h"
#include "googleapis/client/service/service_request_pager.h"
#include "googleapis/client/util/status.h"
#include "googleapis/client/util/uri_template.h"

#include "google/bigquery_api/dataset.h"
#include "google/bigquery_api/dataset_list.h"
#include "google/bigquery_api/get_query_results_response.h"
#include "google/bigquery_api/get_service_account_response.h"
#include "google/bigquery_api/job.h"
#include "google/bigquery_api/job_cancel_response.h"
#include "google/bigquery_api/job_list.h"
#include "google/bigquery_api/project_list.h"
#include "google/bigquery_api/query_request.h"
#include "google/bigquery_api/query_response.h"
#include "google/bigquery_api/table.h"
#include "google/bigquery_api/table_data_insert_all_request.h"
#include "google/bigquery_api/table_data_insert_all_response.h"
#include "google/bigquery_api/table_data_list.h"
#include "google/bigquery_api/table_list.h"


namespace google_bigquery_api {
using namespace googleapis;
/**
 * \mainpage
 *   BigQuery API Version v2
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://cloud.google.com/bigquery/'>BigQuery API</a>
 *      <tr><th>API Version<td>v2
 *      <tr><th>API Rev<td>20190224
 *      <tr><th>API Docs
 *          <td><a href='https://cloud.google.com/bigquery/'>
 *              https://cloud.google.com/bigquery/</a>
 *      <tr><th>Discovery Name<td>bigquery
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using BigQuery API can be found at
 * <a href='https://cloud.google.com/bigquery/'>https://cloud.google.com/bigquery/</a>.
 *
 * For more information about the Google APIs Client Library for C++, see
 * <a href='https://developers.google.com/api-client-library/cpp/start/get_started'>
 * https://developers.google.com/api-client-library/cpp/start/get_started</a>
 */
class BigqueryService;

/**
 * Implements a common base method for all methods within the BigqueryService.
 *
 * This class defines all the attributes common across all methods.
 * It does not pertain to any specific service API so is not normally
 * explicitly instantiated.
 */
class BigqueryServiceBaseRequest
      : public client::ClientServiceRequest {
 public:
  /**
   * Standard constructor.
   *
   * @param[in] service  The service instance to send to when executed.
   *        In practice this will be supplied internally by the service
   *        when it acts as a method factory.
   *
   * @param[in] credential  If not NULL then the credential to authorize with.
   *        In practice this is supplied by the user code that is creating
   *        the method instance.
   *
   * @param[in] method  The HTTP method to use for the underlying HTTP request.
   *        In practice this is specified by the particular API endpoint and
   *        supplied internally by the derived class for that endpoint.
   *
   * @param[in] uri_template  The <a href='http://tools.ietf.org/html/rfc6570'>
   *        RFC 6570 URI Template</a> specifying the url to invoke
   *        The parameters in the template should be resolvable attributes.
   *        In practice this parameter is supplied internally by the derived
   *        class for the endpoint.
   */
  BigqueryServiceBaseRequest(
      const client::ClientService* service,
      client::AuthorizationCredential* credential,
      client::HttpRequest::HttpMethod method,
      const string& uri_template);

  /**
   * Standard destructor.
   */
  virtual ~BigqueryServiceBaseRequest();


  /**
   * Clears the '<code>alt</code>' attribute so it is no longer set.
   */
  void clear_alt() {
    _have_alt_ = false;
    client::ClearCppValueHelper(&alt_);
  }


  /**
   * Gets the optional '<code>alt</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_alt() const { return alt_; }

  /**
   * Gets a modifiable pointer to the optional <code>alt</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_alt() {
    _have_alt_ = true;
    return &alt_;
  }


  /**
   * Sets the '<code>alt</code>' attribute.
   *
   * @param[in] value Data format for the response.
   */
  void set_alt(const string& value) {
    _have_alt_ = true;
    alt_ = value;
  }



  /**
   * Clears the '<code>fields</code>' attribute so it is no longer set.
   */
  void clear_fields() {
    _have_fields_ = false;
    client::ClearCppValueHelper(&fields_);
  }


  /**
   * Gets the optional '<code>fields</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_fields() const { return fields_; }

  /**
   * Gets a modifiable pointer to the optional <code>fields</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_fields() {
    _have_fields_ = true;
    return &fields_;
  }


  /**
   * Sets the '<code>fields</code>' attribute.
   *
   * @param[in] value Selector specifying which fields to include in a partial
   * response.
   */
  void set_fields(const string& value) {
    _have_fields_ = true;
    fields_ = value;
  }



  /**
   * Clears the '<code>key</code>' attribute so it is no longer set.
   */
  void clear_key() {
    _have_key_ = false;
    client::ClearCppValueHelper(&key_);
  }


  /**
   * Gets the optional '<code>key</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_key() const { return key_; }

  /**
   * Gets a modifiable pointer to the optional <code>key</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_key() {
    _have_key_ = true;
    return &key_;
  }


  /**
   * Sets the '<code>key</code>' attribute.
   *
   * @param[in] value API key. Your API key identifies your project and provides
   * you with API access, quota, and reports. Required unless you provide an
   * OAuth 2.0 token.
   */
  void set_key(const string& value) {
    _have_key_ = true;
    key_ = value;
  }



  /**
   * Clears the '<code>oauth_token</code>' attribute so it is no longer set.
   */
  void clear_oauth_token() {
    _have_oauth_token_ = false;
    client::ClearCppValueHelper(&oauth_token_);
  }


  /**
   * Gets the optional '<code>oauth_token</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_oauth_token() const { return oauth_token_; }

  /**
   * Gets a modifiable pointer to the optional <code>oauth_token</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_oauthToken() {
    _have_oauth_token_ = true;
    return &oauth_token_;
  }


  /**
   * Sets the '<code>oauth_token</code>' attribute.
   *
   * @param[in] value OAuth 2.0 token for the current user.
   */
  void set_oauth_token(const string& value) {
    _have_oauth_token_ = true;
    oauth_token_ = value;
  }



  /**
   * Clears the '<code>prettyPrint</code>' attribute so it is no longer set.
   */
  void clear_pretty_print() {
    _have_pretty_print_ = false;
    client::ClearCppValueHelper(&pretty_print_);
  }


  /**
   * Gets the optional '<code>prettyPrint</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  bool get_pretty_print() const { return pretty_print_; }

  /**
   * Sets the '<code>prettyPrint</code>' attribute.
   *
   * @param[in] value Returns response with indentations and line breaks.
   */
  void set_pretty_print(bool value) {
    _have_pretty_print_ = true;
    pretty_print_ = value;
  }

  /**
   * Clears the '<code>quotaUser</code>' attribute so it is no longer set.
   */
  void clear_quota_user() {
    _have_quota_user_ = false;
    client::ClearCppValueHelper(&quota_user_);
  }


  /**
   * Gets the optional '<code>quotaUser</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_quota_user() const { return quota_user_; }

  /**
   * Gets a modifiable pointer to the optional <code>quotaUser</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_quotaUser() {
    _have_quota_user_ = true;
    return &quota_user_;
  }


  /**
   * Sets the '<code>quotaUser</code>' attribute.
   *
   * @param[in] value An opaque string that represents a user for quota
   * purposes. Must not exceed 40 characters.
   */
  void set_quota_user(const string& value) {
    _have_quota_user_ = true;
    quota_user_ = value;
  }



  /**
   * Clears the '<code>userIp</code>' attribute so it is no longer set.
   */
  void clear_user_ip() {
    _have_user_ip_ = false;
    client::ClearCppValueHelper(&user_ip_);
  }


  /**
   * Gets the optional '<code>userIp</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_user_ip() const { return user_ip_; }

  /**
   * Gets a modifiable pointer to the optional <code>userIp</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_userIp() {
    _have_user_ip_ = true;
    return &user_ip_;
  }


  /**
   * Sets the '<code>userIp</code>' attribute.
   * @deprecated
   *
   * @param[in] value Deprecated. Please use quotaUser instead.
   */
  void set_user_ip(const string& value) {
    _have_user_ip_ = true;
    user_ip_ = value;
  }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the
   * URI supplied to the constructor.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
      const string& variable_name,
      const client::UriTemplateConfig& config,
      string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


 protected:
  /**
   * Prepares the method's HTTP request to send body content as JSON.
   *
   * Only to be used for method constructors.
   */
  void AddJsonContentToRequest(const client::JsonCppData *content);

 private:
  string alt_;
  string fields_;
  string key_;
  string oauth_token_;
  bool pretty_print_;
  string quota_user_;
  string user_ip_;
  bool _have_alt_ : 1;
  bool _have_fields_ : 1;
  bool _have_key_ : 1;
  bool _have_oauth_token_ : 1;
  bool _have_pretty_print_ : 1;
  bool _have_quota_user_ : 1;
  bool _have_user_ip_ : 1;

  BigqueryServiceBaseRequest(const BigqueryServiceBaseRequest&) = delete;
  BigqueryServiceBaseRequest& operator=(const BigqueryServiceBaseRequest&) = delete;
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 */
class DatasetsResource_DeleteMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id Project ID of the dataset being deleted.
   * @param[in] dataset_id Dataset ID of dataset being deleted.
   */
  DatasetsResource_DeleteMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id,
      const std::string& dataset_id);

  /**
   * Standard destructor.
   */
  virtual ~DatasetsResource_DeleteMethod();


    /**
     * Clears the '<code>deleteContents</code>' attribute so it is no longer
     * set.
     */
    void clear_delete_contents() {
      _have_delete_contents_ = false;
      client::ClearCppValueHelper(&delete_contents_);
    }


    /**
     * Gets the optional '<code>deleteContents</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_delete_contents() const { return delete_contents_; }

    /**
     * Sets the '<code>deleteContents</code>' attribute.
     *
     * @param[in] value If True, delete all the tables in the dataset. If False
     * and the dataset contains tables, the request will fail. Default is False.
     */
    void set_delete_contents(bool value) {
      _have_delete_contents_ = true;
      delete_contents_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


 private:
  string project_id_;
  string dataset_id_;
  bool delete_contents_;
  bool _have_delete_contents_ : 1;
  DatasetsResource_DeleteMethod(const DatasetsResource_DeleteMethod&) = delete;
  DatasetsResource_DeleteMethod& operator=(const DatasetsResource_DeleteMethod&) = delete;
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/cloud-platform.read-only
 */
class DatasetsResource_GetMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id Project ID of the requested dataset.
   * @param[in] dataset_id Dataset ID of the requested dataset.
   */
  DatasetsResource_GetMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id,
      const std::string& dataset_id);

  /**
   * Standard destructor.
   */
  virtual ~DatasetsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Dataset* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_id_;
  string dataset_id_;
  DatasetsResource_GetMethod(const DatasetsResource_GetMethod&) = delete;
  DatasetsResource_GetMethod& operator=(const DatasetsResource_GetMethod&) = delete;
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 */
class DatasetsResource_InsertMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id Project ID of the new dataset.
   * @param[in] _content_ The data object to insert.
   */
  DatasetsResource_InsertMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id,
      const Dataset& _content_);

  /**
   * Standard destructor.
   */
  virtual ~DatasetsResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Dataset* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_id_;  string _content_;
  DatasetsResource_InsertMethod(const DatasetsResource_InsertMethod&) = delete;
  DatasetsResource_InsertMethod& operator=(const DatasetsResource_InsertMethod&) = delete;
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/cloud-platform.read-only
 */
class DatasetsResource_ListMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id Project ID of the datasets to be listed.
   */
  DatasetsResource_ListMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id);

  /**
   * Standard destructor.
   */
  virtual ~DatasetsResource_ListMethod();


    /**
     * Clears the '<code>all</code>' attribute so it is no longer set.
     */
    void clear_all() {
      _have_all_ = false;
      client::ClearCppValueHelper(&all_);
    }


    /**
     * Gets the optional '<code>all</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_all() const { return all_; }

    /**
     * Sets the '<code>all</code>' attribute.
     *
     * @param[in] value Whether to list all datasets, including hidden ones.
     */
    void set_all(bool value) {
      _have_all_ = true;
      all_ = value;
    }

    /**
     * Clears the '<code>filter</code>' attribute so it is no longer set.
     */
    void clear_filter() {
      _have_filter_ = false;
      client::ClearCppValueHelper(&filter_);
    }


    /**
     * Gets the optional '<code>filter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_filter() const { return filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>filter</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_filter() {
      _have_filter_ = true;
      return &filter_;
    }


    /**
     * Sets the '<code>filter</code>' attribute.
     *
     * @param[in] value An expression for filtering the results of the request
     * by label. The syntax is "labels.[:]". Multiple filters can be ANDed
     * together by connecting with a space. Example:
     * "labels.department:receiving labels.active". See Filtering datasets using
     * labels for details.
     */
    void set_filter(const string& value) {
      _have_filter_ = true;
      filter_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of results to return.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Page token, returned by a previous call, to request the
     * next page of results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      DatasetList* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_id_;
  bool all_;
  string filter_;
  uint32 max_results_;
  string page_token_;
  bool _have_all_ : 1;
  bool _have_filter_ : 1;
  bool _have_max_results_ : 1;
  bool _have_page_token_ : 1;
  DatasetsResource_ListMethod(const DatasetsResource_ListMethod&) = delete;
  DatasetsResource_ListMethod& operator=(const DatasetsResource_ListMethod&) = delete;
};

typedef client::ServiceRequestPager<
            DatasetsResource_ListMethod,
            DatasetList>
        DatasetsResource_ListMethodPager;

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 */
class DatasetsResource_PatchMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id Project ID of the dataset being updated.
   * @param[in] dataset_id Dataset ID of the dataset being updated.
   * @param[in] _content_ The data object to patch.
   */
  DatasetsResource_PatchMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id,
      const std::string& dataset_id,
      const Dataset& _content_);

  /**
   * Standard destructor.
   */
  virtual ~DatasetsResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Dataset* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_id_;
  string dataset_id_;  string _content_;
  DatasetsResource_PatchMethod(const DatasetsResource_PatchMethod&) = delete;
  DatasetsResource_PatchMethod& operator=(const DatasetsResource_PatchMethod&) = delete;
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 */
class DatasetsResource_UpdateMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id Project ID of the dataset being updated.
   * @param[in] dataset_id Dataset ID of the dataset being updated.
   * @param[in] _content_ The data object to update.
   */
  DatasetsResource_UpdateMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id,
      const std::string& dataset_id,
      const Dataset& _content_);

  /**
   * Standard destructor.
   */
  virtual ~DatasetsResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Dataset* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_id_;
  string dataset_id_;  string _content_;
  DatasetsResource_UpdateMethod(const DatasetsResource_UpdateMethod&) = delete;
  DatasetsResource_UpdateMethod& operator=(const DatasetsResource_UpdateMethod&) = delete;
};



/**
 * Implements the cancel method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 */
class JobsResource_CancelMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id [Required] Project ID of the job to cancel.
   * @param[in] job_id [Required] Job ID of the job to cancel.
   */
  JobsResource_CancelMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id,
      const std::string& job_id);

  /**
   * Standard destructor.
   */
  virtual ~JobsResource_CancelMethod();


    /**
     * Clears the '<code>location</code>' attribute so it is no longer set.
     */
    void clear_location() {
      _have_location_ = false;
      client::ClearCppValueHelper(&location_);
    }


    /**
     * Gets the optional '<code>location</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_location() const { return location_; }

    /**
     * Gets a modifiable pointer to the optional <code>location</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_location() {
      _have_location_ = true;
      return &location_;
    }


    /**
     * Sets the '<code>location</code>' attribute.
     *
     * @param[in] value The geographic location of the job. Required except for
     * US and EU. See details at https://cloud.google.com/bigquery/docs/location
     * s#specifying_your_location.
     */
    void set_location(const string& value) {
      _have_location_ = true;
      location_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      JobCancelResponse* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_id_;
  string job_id_;
  string location_;
  bool _have_location_ : 1;
  JobsResource_CancelMethod(const JobsResource_CancelMethod&) = delete;
  JobsResource_CancelMethod& operator=(const JobsResource_CancelMethod&) = delete;
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/cloud-platform.read-only
 */
class JobsResource_GetMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id [Required] Project ID of the requested job.
   * @param[in] job_id [Required] Job ID of the requested job.
   */
  JobsResource_GetMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id,
      const std::string& job_id);

  /**
   * Standard destructor.
   */
  virtual ~JobsResource_GetMethod();


    /**
     * Clears the '<code>location</code>' attribute so it is no longer set.
     */
    void clear_location() {
      _have_location_ = false;
      client::ClearCppValueHelper(&location_);
    }


    /**
     * Gets the optional '<code>location</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_location() const { return location_; }

    /**
     * Gets a modifiable pointer to the optional <code>location</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_location() {
      _have_location_ = true;
      return &location_;
    }


    /**
     * Sets the '<code>location</code>' attribute.
     *
     * @param[in] value The geographic location of the job. Required except for
     * US and EU. See details at https://cloud.google.com/bigquery/docs/location
     * s#specifying_your_location.
     */
    void set_location(const string& value) {
      _have_location_ = true;
      location_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Job* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_id_;
  string job_id_;
  string location_;
  bool _have_location_ : 1;
  JobsResource_GetMethod(const JobsResource_GetMethod&) = delete;
  JobsResource_GetMethod& operator=(const JobsResource_GetMethod&) = delete;
};

/**
 * Implements the getQueryResults method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/cloud-platform.read-only
 */
class JobsResource_GetQueryResultsMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id [Required] Project ID of the query job.
   * @param[in] job_id [Required] Job ID of the query job.
   */
  JobsResource_GetQueryResultsMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id,
      const std::string& job_id);

  /**
   * Standard destructor.
   */
  virtual ~JobsResource_GetQueryResultsMethod();


    /**
     * Clears the '<code>location</code>' attribute so it is no longer set.
     */
    void clear_location() {
      _have_location_ = false;
      client::ClearCppValueHelper(&location_);
    }


    /**
     * Gets the optional '<code>location</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_location() const { return location_; }

    /**
     * Gets a modifiable pointer to the optional <code>location</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_location() {
      _have_location_ = true;
      return &location_;
    }


    /**
     * Sets the '<code>location</code>' attribute.
     *
     * @param[in] value The geographic location where the job should run.
     * Required except for US and EU. See details at https://cloud.google.com/bi
     * gquery/docs/locations#specifying_your_location.
     */
    void set_location(const string& value) {
      _have_location_ = true;
      location_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value Maximum number of results to read.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Page token, returned by a previous call, to request the
     * next page of results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>startIndex</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>startIndex</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint64 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>startIndex</code>' attribute.
     *
     * @param[in] value Zero-based index of the starting row.
     */
    void set_start_index(uint64 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

    /**
     * Clears the '<code>timeoutMs</code>' attribute so it is no longer set.
     */
    void clear_timeout_ms() {
      _have_timeout_ms_ = false;
      client::ClearCppValueHelper(&timeout_ms_);
    }


    /**
     * Gets the optional '<code>timeoutMs</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_timeout_ms() const { return timeout_ms_; }

    /**
     * Sets the '<code>timeoutMs</code>' attribute.
     *
     * @param[in] value How long to wait for the query to complete, in
     * milliseconds, before returning. Default is 10 seconds. If the timeout
     * passes before the job completes, the 'jobComplete' field in the response
     * will be false.
     */
    void set_timeout_ms(uint32 value) {
      _have_timeout_ms_ = true;
      timeout_ms_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      GetQueryResultsResponse* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_id_;
  string job_id_;
  string location_;
  uint32 max_results_;
  string page_token_;
  uint64 start_index_;
  uint32 timeout_ms_;
  bool _have_location_ : 1;
  bool _have_max_results_ : 1;
  bool _have_page_token_ : 1;
  bool _have_start_index_ : 1;
  bool _have_timeout_ms_ : 1;
  JobsResource_GetQueryResultsMethod(const JobsResource_GetQueryResultsMethod&) = delete;
  JobsResource_GetQueryResultsMethod& operator=(const JobsResource_GetQueryResultsMethod&) = delete;
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/devstorage.full_control
 * https://www.googleapis.com/auth/devstorage.read_only
 * https://www.googleapis.com/auth/devstorage.read_write
 */
class JobsResource_InsertMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   *
   * @deprecated in favor constructor that includes the media upload parameters.
   *
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id Project ID of the project that will be billed for the
   * job.
   *
   * @param[in] _content_ The data object to insert.
   */
  JobsResource_InsertMethod(
        const BigqueryService* _service_,
        client::AuthorizationCredential* _credential_,
        const std::string& project_id);
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id Project ID of the project that will be billed for the
   * job.
   * @param[in] _metadata_ The metadata object to insert. If this
   *            is NULL then do not upload any metadata.
   * @param[in] _media_content_type_ The content type of the data in the
   *            _media_content_reader_.
   * @param[in] _media_content_reader_ The media content to insert. If
   *            this is NULL then do not upload any media and ignore
   *            _media_content_type_.
   */
  JobsResource_InsertMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id,
      const Job* _metadata_,
      const char* _media_content_type_,
      client::DataReader* _media_content_reader_);

  /**
   * Standard destructor.
   */
  virtual ~JobsResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Job* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }


  /**
   * Returns MediaUploader for uploading the content.
   */

  /**
   * Returns the specification for media upload using the simple protocol.
   */
  static const client::MediaUploadSpec SIMPLE_MEDIA_UPLOAD;
  /**
   * Returns the specification for media upload using the resumable protocol.
   */
  static const client::MediaUploadSpec RESUMABLE_MEDIA_UPLOAD;

 private:
  string project_id_;
  JobsResource_InsertMethod(const JobsResource_InsertMethod&) = delete;
  JobsResource_InsertMethod& operator=(const JobsResource_InsertMethod&) = delete;
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/cloud-platform.read-only
 */
class JobsResource_ListMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id Project ID of the jobs to list.
   */
  JobsResource_ListMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id);

  /**
   * Standard destructor.
   */
  virtual ~JobsResource_ListMethod();


    /**
     * Clears the '<code>allUsers</code>' attribute so it is no longer set.
     */
    void clear_all_users() {
      _have_all_users_ = false;
      client::ClearCppValueHelper(&all_users_);
    }


    /**
     * Gets the optional '<code>allUsers</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_all_users() const { return all_users_; }

    /**
     * Sets the '<code>allUsers</code>' attribute.
     *
     * @param[in] value Whether to display jobs owned by all users in the
     * project. Default false.
     */
    void set_all_users(bool value) {
      _have_all_users_ = true;
      all_users_ = value;
    }

    /**
     * Clears the '<code>maxCreationTime</code>' attribute so it is no longer
     * set.
     */
    void clear_max_creation_time() {
      _have_max_creation_time_ = false;
      client::ClearCppValueHelper(&max_creation_time_);
    }


    /**
     * Gets the optional '<code>maxCreationTime</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint64 get_max_creation_time() const { return max_creation_time_; }

    /**
     * Sets the '<code>maxCreationTime</code>' attribute.
     *
     * @param[in] value Max value for job creation time, in milliseconds since
     * the POSIX epoch. If set, only jobs created before or at this timestamp
     * are returned.
     */
    void set_max_creation_time(uint64 value) {
      _have_max_creation_time_ = true;
      max_creation_time_ = value;
    }

    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value Maximum number of results to return.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>minCreationTime</code>' attribute so it is no longer
     * set.
     */
    void clear_min_creation_time() {
      _have_min_creation_time_ = false;
      client::ClearCppValueHelper(&min_creation_time_);
    }


    /**
     * Gets the optional '<code>minCreationTime</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint64 get_min_creation_time() const { return min_creation_time_; }

    /**
     * Sets the '<code>minCreationTime</code>' attribute.
     *
     * @param[in] value Min value for job creation time, in milliseconds since
     * the POSIX epoch. If set, only jobs created after or at this timestamp are
     * returned.
     */
    void set_min_creation_time(uint64 value) {
      _have_min_creation_time_ = true;
      min_creation_time_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Page token, returned by a previous call, to request the
     * next page of results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>parentJobId</code>' attribute so it is no longer set.
     */
    void clear_parent_job_id() {
      _have_parent_job_id_ = false;
      client::ClearCppValueHelper(&parent_job_id_);
    }


    /**
     * Gets the optional '<code>parentJobId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_parent_job_id() const { return parent_job_id_; }

    /**
     * Gets a modifiable pointer to the optional <code>parentJobId</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_parentJobId() {
      _have_parent_job_id_ = true;
      return &parent_job_id_;
    }


    /**
     * Sets the '<code>parentJobId</code>' attribute.
     *
     * @param[in] value If set, retrieves only jobs whose parent is this job.
     * Otherwise, retrieves only jobs which have no parent.
     */
    void set_parent_job_id(const string& value) {
      _have_parent_job_id_ = true;
      parent_job_id_ = value;
    }



    /**
     * Clears the '<code>projection</code>' attribute so it is no longer set.
     */
    void clear_projection() {
      _have_projection_ = false;
      client::ClearCppValueHelper(&projection_);
    }


    /**
     * Gets the optional '<code>projection</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_projection() const { return projection_; }

    /**
     * Gets a modifiable pointer to the optional <code>projection</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_projection() {
      _have_projection_ = true;
      return &projection_;
    }


    /**
     * Sets the '<code>projection</code>' attribute.
     *
     * @param[in] value Restrict information returned to a set of selected
     * fields.
     */
    void set_projection(const string& value) {
      _have_projection_ = true;
      projection_ = value;
    }



    /**
     * Clears the '<code>stateFilter</code>' attribute so it is no longer set.
     */
    void clear_state_filter() {
      _have_state_filter_ = false;
      client::ClearCppValueHelper(&state_filter_);
    }


    /**
     * Gets the optional '<code>stateFilter</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const client::JsonCppArray<string >& get_state_filter() const { return state_filter_; }

    /**
     * Gets a modifiable pointer to the optional <code>stateFilter</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    client::JsonCppArray<string >* mutable_stateFilter() {
      _have_state_filter_ = true;
      return &state_filter_;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      JobList* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_id_;
  bool all_users_;
  uint64 max_creation_time_;
  uint32 max_results_;
  uint64 min_creation_time_;
  string page_token_;
  string parent_job_id_;
  string projection_;
  client::JsonCppCapsule< client::JsonCppArray<string > > state_filter_;
  bool _have_all_users_ : 1;
  bool _have_max_creation_time_ : 1;
  bool _have_max_results_ : 1;
  bool _have_min_creation_time_ : 1;
  bool _have_page_token_ : 1;
  bool _have_parent_job_id_ : 1;
  bool _have_projection_ : 1;
  bool _have_state_filter_ : 1;
  JobsResource_ListMethod(const JobsResource_ListMethod&) = delete;
  JobsResource_ListMethod& operator=(const JobsResource_ListMethod&) = delete;
};

typedef client::ServiceRequestPager<
            JobsResource_ListMethod,
            JobList>
        JobsResource_ListMethodPager;

/**
 * Implements the query method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/cloud-platform.read-only
 */
class JobsResource_QueryMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id Project ID of the project billed for the query.
   * @param[in] _content_ The data object to query.
   */
  JobsResource_QueryMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id,
      const QueryRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~JobsResource_QueryMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      QueryResponse* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_id_;  string _content_;
  JobsResource_QueryMethod(const JobsResource_QueryMethod&) = delete;
  JobsResource_QueryMethod& operator=(const JobsResource_QueryMethod&) = delete;
};



/**
 * Implements the getServiceAccount method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/cloud-platform.read-only
 */
class ProjectsResource_GetServiceAccountMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id Project ID for which the service account is
   * requested.
   */
  ProjectsResource_GetServiceAccountMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_GetServiceAccountMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      GetServiceAccountResponse* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_id_;
  ProjectsResource_GetServiceAccountMethod(const ProjectsResource_GetServiceAccountMethod&) = delete;
  ProjectsResource_GetServiceAccountMethod& operator=(const ProjectsResource_GetServiceAccountMethod&) = delete;
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/cloud-platform.read-only
 */
class ProjectsResource_ListMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  ProjectsResource_ListMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_ListMethod();


    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value Maximum number of results to return.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Page token, returned by a previous call, to request the
     * next page of results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ProjectList* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  uint32 max_results_;
  string page_token_;
  bool _have_max_results_ : 1;
  bool _have_page_token_ : 1;
  ProjectsResource_ListMethod(const ProjectsResource_ListMethod&) = delete;
  ProjectsResource_ListMethod& operator=(const ProjectsResource_ListMethod&) = delete;
};

typedef client::ServiceRequestPager<
            ProjectsResource_ListMethod,
            ProjectList>
        ProjectsResource_ListMethodPager;



/**
 * Implements the insertAll method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/bigquery.insertdata
 * https://www.googleapis.com/auth/cloud-platform
 */
class TabledataResource_InsertAllMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id Project ID of the destination table.
   * @param[in] dataset_id Dataset ID of the destination table.
   * @param[in] table_id Table ID of the destination table.
   * @param[in] _content_ The data object to insertAll.
   */
  TabledataResource_InsertAllMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id,
      const std::string& dataset_id,
      const std::string& table_id,
      const TableDataInsertAllRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TabledataResource_InsertAllMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TableDataInsertAllResponse* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_id_;
  string dataset_id_;
  string table_id_;  string _content_;
  TabledataResource_InsertAllMethod(const TabledataResource_InsertAllMethod&) = delete;
  TabledataResource_InsertAllMethod& operator=(const TabledataResource_InsertAllMethod&) = delete;
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/cloud-platform.read-only
 */
class TabledataResource_ListMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id Project ID of the table to read.
   * @param[in] dataset_id Dataset ID of the table to read.
   * @param[in] table_id Table ID of the table to read.
   */
  TabledataResource_ListMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id,
      const std::string& dataset_id,
      const std::string& table_id);

  /**
   * Standard destructor.
   */
  virtual ~TabledataResource_ListMethod();


    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value Maximum number of results to return.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Page token, returned by a previous call, identifying the
     * result set.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>selectedFields</code>' attribute so it is no longer
     * set.
     */
    void clear_selected_fields() {
      _have_selected_fields_ = false;
      client::ClearCppValueHelper(&selected_fields_);
    }


    /**
     * Gets the optional '<code>selectedFields</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_selected_fields() const { return selected_fields_; }

    /**
     * Gets a modifiable pointer to the optional <code>selectedFields</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_selectedFields() {
      _have_selected_fields_ = true;
      return &selected_fields_;
    }


    /**
     * Sets the '<code>selectedFields</code>' attribute.
     *
     * @param[in] value List of fields to return (comma-separated). If
     * unspecified, all fields are returned.
     */
    void set_selected_fields(const string& value) {
      _have_selected_fields_ = true;
      selected_fields_ = value;
    }



    /**
     * Clears the '<code>startIndex</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>startIndex</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint64 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>startIndex</code>' attribute.
     *
     * @param[in] value Zero-based index of the starting row to read.
     */
    void set_start_index(uint64 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TableDataList* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_id_;
  string dataset_id_;
  string table_id_;
  uint32 max_results_;
  string page_token_;
  string selected_fields_;
  uint64 start_index_;
  bool _have_max_results_ : 1;
  bool _have_page_token_ : 1;
  bool _have_selected_fields_ : 1;
  bool _have_start_index_ : 1;
  TabledataResource_ListMethod(const TabledataResource_ListMethod&) = delete;
  TabledataResource_ListMethod& operator=(const TabledataResource_ListMethod&) = delete;
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 */
class TablesResource_DeleteMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id Project ID of the table to delete.
   * @param[in] dataset_id Dataset ID of the table to delete.
   * @param[in] table_id Table ID of the table to delete.
   */
  TablesResource_DeleteMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id,
      const std::string& dataset_id,
      const std::string& table_id);

  /**
   * Standard destructor.
   */
  virtual ~TablesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string project_id_;
  string dataset_id_;
  string table_id_;
  TablesResource_DeleteMethod(const TablesResource_DeleteMethod&) = delete;
  TablesResource_DeleteMethod& operator=(const TablesResource_DeleteMethod&) = delete;
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/cloud-platform.read-only
 */
class TablesResource_GetMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id Project ID of the requested table.
   * @param[in] dataset_id Dataset ID of the requested table.
   * @param[in] table_id Table ID of the requested table.
   */
  TablesResource_GetMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id,
      const std::string& dataset_id,
      const std::string& table_id);

  /**
   * Standard destructor.
   */
  virtual ~TablesResource_GetMethod();


    /**
     * Clears the '<code>selectedFields</code>' attribute so it is no longer
     * set.
     */
    void clear_selected_fields() {
      _have_selected_fields_ = false;
      client::ClearCppValueHelper(&selected_fields_);
    }


    /**
     * Gets the optional '<code>selectedFields</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_selected_fields() const { return selected_fields_; }

    /**
     * Gets a modifiable pointer to the optional <code>selectedFields</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_selectedFields() {
      _have_selected_fields_ = true;
      return &selected_fields_;
    }


    /**
     * Sets the '<code>selectedFields</code>' attribute.
     *
     * @param[in] value List of fields to return (comma-separated). If
     * unspecified, all fields are returned.
     */
    void set_selected_fields(const string& value) {
      _have_selected_fields_ = true;
      selected_fields_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Table* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_id_;
  string dataset_id_;
  string table_id_;
  string selected_fields_;
  bool _have_selected_fields_ : 1;
  TablesResource_GetMethod(const TablesResource_GetMethod&) = delete;
  TablesResource_GetMethod& operator=(const TablesResource_GetMethod&) = delete;
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 */
class TablesResource_InsertMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id Project ID of the new table.
   * @param[in] dataset_id Dataset ID of the new table.
   * @param[in] _content_ The data object to insert.
   */
  TablesResource_InsertMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id,
      const std::string& dataset_id,
      const Table& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TablesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Table* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_id_;
  string dataset_id_;  string _content_;
  TablesResource_InsertMethod(const TablesResource_InsertMethod&) = delete;
  TablesResource_InsertMethod& operator=(const TablesResource_InsertMethod&) = delete;
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/cloud-platform.read-only
 */
class TablesResource_ListMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id Project ID of the tables to list.
   * @param[in] dataset_id Dataset ID of the tables to list.
   */
  TablesResource_ListMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id,
      const std::string& dataset_id);

  /**
   * Standard destructor.
   */
  virtual ~TablesResource_ListMethod();


    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value Maximum number of results to return.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Page token, returned by a previous call, to request the
     * next page of results.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TableList* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_id_;
  string dataset_id_;
  uint32 max_results_;
  string page_token_;
  bool _have_max_results_ : 1;
  bool _have_page_token_ : 1;
  TablesResource_ListMethod(const TablesResource_ListMethod&) = delete;
  TablesResource_ListMethod& operator=(const TablesResource_ListMethod&) = delete;
};

typedef client::ServiceRequestPager<
            TablesResource_ListMethod,
            TableList>
        TablesResource_ListMethodPager;

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 */
class TablesResource_PatchMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id Project ID of the table to update.
   * @param[in] dataset_id Dataset ID of the table to update.
   * @param[in] table_id Table ID of the table to update.
   * @param[in] _content_ The data object to patch.
   */
  TablesResource_PatchMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id,
      const std::string& dataset_id,
      const std::string& table_id,
      const Table& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TablesResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Table* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_id_;
  string dataset_id_;
  string table_id_;  string _content_;
  TablesResource_PatchMethod(const TablesResource_PatchMethod&) = delete;
  TablesResource_PatchMethod& operator=(const TablesResource_PatchMethod&) = delete;
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/bigquery
 * https://www.googleapis.com/auth/cloud-platform
 */
class TablesResource_UpdateMethod : public BigqueryServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project_id Project ID of the table to update.
   * @param[in] dataset_id Dataset ID of the table to update.
   * @param[in] table_id Table ID of the table to update.
   * @param[in] _content_ The data object to update.
   */
  TablesResource_UpdateMethod(
      const BigqueryService* _service_,
      client::AuthorizationCredential* _credential_,
      const std::string& project_id,
      const std::string& dataset_id,
      const std::string& table_id,
      const Table& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TablesResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Table* data) {
    return BigqueryServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_id_;
  string dataset_id_;
  string table_id_;  string _content_;
  TablesResource_UpdateMethod(const TablesResource_UpdateMethod&) = delete;
  TablesResource_UpdateMethod& operator=(const TablesResource_UpdateMethod&) = delete;
};



/**
 * Service definition for BigqueryService (v2).
 *
 * @ingroup ServiceClass
 *
 * For more information about this service, see the API Documentation at
 * <a href='https://cloud.google.com/bigquery/'>'https://cloud.google.com/bigquery/</a>
 */
class BigqueryService : public client::ClientService {
 public:
  /**
   * The name of the API that this was generated from.
   */
  static const char googleapis_API_NAME[];

  /**
   * The version of the API that this interface was generated from.
   */
  static const char googleapis_API_VERSION[];

  /**
   * The code generator used to generate this API.
   */
  static const char googleapis_API_GENERATOR[];


  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class DatasetsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit DatasetsResource(BigqueryService* service);

    /**
     * Standard destructor.
     */
    ~DatasetsResource() {}


    /**
     * Creates a new DatasetsResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the dataset being deleted.
     * @param[in] dataset_id Dataset ID of dataset being deleted.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    DatasetsResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id,
        const std::string& dataset_id) const;

    /**
     * Creates a new DatasetsResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the requested dataset.
     * @param[in] dataset_id Dataset ID of the requested dataset.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    DatasetsResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id,
        const std::string& dataset_id) const;

    /**
     * Creates a new DatasetsResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the new dataset.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    DatasetsResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id,
        const Dataset& _content_) const;

    /**
     * Creates a new DatasetsResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the datasets to be listed.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    DatasetsResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the datasets to be listed.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    DatasetsResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id) const;

    /**
     * Creates a new DatasetsResource_PatchMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the dataset being updated.
     * @param[in] dataset_id Dataset ID of the dataset being updated.
     * @param[in] _content_ The data object to patch.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    DatasetsResource_PatchMethod* NewPatchMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id,
        const std::string& dataset_id,
        const Dataset& _content_) const;

    /**
     * Creates a new DatasetsResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the dataset being updated.
     * @param[in] dataset_id Dataset ID of the dataset being updated.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    DatasetsResource_UpdateMethod* NewUpdateMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id,
        const std::string& dataset_id,
        const Dataset& _content_) const;

   private:
    BigqueryService* service_;

    DatasetsResource(const DatasetsResource&) = delete;
    DatasetsResource& operator=(const DatasetsResource&) = delete;
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class JobsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit JobsResource(BigqueryService* service);

    /**
     * Standard destructor.
     */
    ~JobsResource() {}


    /**
     * Creates a new JobsResource_CancelMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id [Required] Project ID of the job to cancel.
     * @param[in] job_id [Required] Job ID of the job to cancel.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    JobsResource_CancelMethod* NewCancelMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id,
        const std::string& job_id) const;

    /**
     * Creates a new JobsResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id [Required] Project ID of the requested job.
     * @param[in] job_id [Required] Job ID of the requested job.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    JobsResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id,
        const std::string& job_id) const;

    /**
     * Creates a new JobsResource_GetQueryResultsMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id [Required] Project ID of the query job.
     * @param[in] job_id [Required] Job ID of the query job.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    JobsResource_GetQueryResultsMethod* NewGetQueryResultsMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id,
        const std::string& job_id) const;


    /**
     * Creates a new JobsResource_InsertMethod instance.
     * @deprecated
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the project that will be billed for
     * the job.
     *
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    JobsResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id) const;

    /**
     * Creates a new JobsResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the project that will be billed for
     * the job.
     * @param[in] _metadata_ The metadata object to insert. If this is NULL then
     * do not upload any metadata.
     * @param[in] _media_content_type_ The content type of the data in the
     * _media_content_reader_.
     * @param[in] _media_content_reader_ The media content to insert. If
     * this is NULL then do not upload any media and ignore
     * _media_content_type_.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    JobsResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id,
        const Job* _metadata_,
        const char* _media_content_type_,
        client::DataReader* _media_content_reader_) const;

    /**
     * Creates a new JobsResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the jobs to list.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    JobsResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the jobs to list.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    JobsResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id) const;

    /**
     * Creates a new JobsResource_QueryMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the project billed for the query.
     * @param[in] _content_ The data object to query.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    JobsResource_QueryMethod* NewQueryMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id,
        const QueryRequest& _content_) const;

   private:
    BigqueryService* service_;

    JobsResource(const JobsResource&) = delete;
    JobsResource& operator=(const JobsResource&) = delete;
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class ProjectsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit ProjectsResource(BigqueryService* service);

    /**
     * Standard destructor.
     */
    ~ProjectsResource() {}


    /**
     * Creates a new ProjectsResource_GetServiceAccountMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id Project ID for which the service account is
     * requested.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ProjectsResource_GetServiceAccountMethod* NewGetServiceAccountMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id) const;

    /**
     * Creates a new ProjectsResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ProjectsResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    ProjectsResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_) const;

   private:
    BigqueryService* service_;

    ProjectsResource(const ProjectsResource&) = delete;
    ProjectsResource& operator=(const ProjectsResource&) = delete;
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class TabledataResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit TabledataResource(BigqueryService* service);

    /**
     * Standard destructor.
     */
    ~TabledataResource() {}


    /**
     * Creates a new TabledataResource_InsertAllMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the destination table.
     * @param[in] dataset_id Dataset ID of the destination table.
     * @param[in] table_id Table ID of the destination table.
     * @param[in] _content_ The data object to insertAll.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TabledataResource_InsertAllMethod* NewInsertAllMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id,
        const std::string& dataset_id,
        const std::string& table_id,
        const TableDataInsertAllRequest& _content_) const;

    /**
     * Creates a new TabledataResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the table to read.
     * @param[in] dataset_id Dataset ID of the table to read.
     * @param[in] table_id Table ID of the table to read.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TabledataResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id,
        const std::string& dataset_id,
        const std::string& table_id) const;

   private:
    BigqueryService* service_;

    TabledataResource(const TabledataResource&) = delete;
    TabledataResource& operator=(const TabledataResource&) = delete;
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class TablesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit TablesResource(BigqueryService* service);

    /**
     * Standard destructor.
     */
    ~TablesResource() {}


    /**
     * Creates a new TablesResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the table to delete.
     * @param[in] dataset_id Dataset ID of the table to delete.
     * @param[in] table_id Table ID of the table to delete.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TablesResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id,
        const std::string& dataset_id,
        const std::string& table_id) const;

    /**
     * Creates a new TablesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the requested table.
     * @param[in] dataset_id Dataset ID of the requested table.
     * @param[in] table_id Table ID of the requested table.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TablesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id,
        const std::string& dataset_id,
        const std::string& table_id) const;

    /**
     * Creates a new TablesResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the new table.
     * @param[in] dataset_id Dataset ID of the new table.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TablesResource_InsertMethod* NewInsertMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id,
        const std::string& dataset_id,
        const Table& _content_) const;

    /**
     * Creates a new TablesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the tables to list.
     * @param[in] dataset_id Dataset ID of the tables to list.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TablesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id,
        const std::string& dataset_id) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the tables to list.
     *
     * @param[in] dataset_id Dataset ID of the tables to list.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    TablesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id,
        const std::string& dataset_id) const;

    /**
     * Creates a new TablesResource_PatchMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the table to update.
     * @param[in] dataset_id Dataset ID of the table to update.
     * @param[in] table_id Table ID of the table to update.
     * @param[in] _content_ The data object to patch.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TablesResource_PatchMethod* NewPatchMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id,
        const std::string& dataset_id,
        const std::string& table_id,
        const Table& _content_) const;

    /**
     * Creates a new TablesResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] project_id Project ID of the table to update.
     * @param[in] dataset_id Dataset ID of the table to update.
     * @param[in] table_id Table ID of the table to update.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TablesResource_UpdateMethod* NewUpdateMethod(
        client::AuthorizationCredential* _credential_,
        const std::string& project_id,
        const std::string& dataset_id,
        const std::string& table_id,
        const Table& _content_) const;

   private:
    BigqueryService* service_;

    TablesResource(const TablesResource&) = delete;
    TablesResource& operator=(const TablesResource&) = delete;
  };



  /**
   * Standard constructor.
   *
   * @param[in] transport  The transport to use when creating methods to invoke
   *                       on this service instance.
   */
  explicit BigqueryService(client::HttpTransport* transport);

  /**
   * Standard destructor.
   */
  virtual ~BigqueryService();

  /**
   * Gets the  resource method factory.
   *
   * @return DatasetsResource for creating methods.
   */
  const DatasetsResource& get_datasets() const {
    return datasets_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return JobsResource for creating methods.
   */
  const JobsResource& get_jobs() const {
    return jobs_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ProjectsResource for creating methods.
   */
  const ProjectsResource& get_projects() const {
    return projects_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return TabledataResource for creating methods.
   */
  const TabledataResource& get_tabledata() const {
    return tabledata_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return TablesResource for creating methods.
   */
  const TablesResource& get_tables() const {
    return tables_;
  }

  /**
   * Declares the OAuth2.0 scopes used within BigQuery API
   *
   * These scopes shoudl be used when asking for credentials to invoke methods
   * in the BigqueryService.
   */
  class SCOPES {
   public:
    /**
     * View and manage your data in Google BigQuery.
     */
    static const char BIGQUERY[];

    /**
     * Insert data into Google BigQuery.
     */
    static const char BIGQUERY_INSERTDATA[];

    /**
     * View and manage your data across Google Cloud Platform services.
     */
    static const char CLOUD_PLATFORM[];

    /**
     * View your data across Google Cloud Platform services.
     */
    static const char CLOUD_PLATFORM_READ_ONLY[];

    /**
     * Manage your data and permissions in Google Cloud Storage.
     */
    static const char DEVSTORAGE_FULL_CONTROL[];

    /**
     * View your data in Google Cloud Storage.
     */
    static const char DEVSTORAGE_READ_ONLY[];

    /**
     * Manage your data in Google Cloud Storage.
     */
    static const char DEVSTORAGE_READ_WRITE[];

   private:
    SCOPES();  // Never instantiated.
    ~SCOPES();  // Never instantiated.
  };

 private:
  DatasetsResource datasets_;
  JobsResource jobs_;
  ProjectsResource projects_;
  TabledataResource tabledata_;
  TablesResource tables_;

  BigqueryService(const BigqueryService&) = delete;
  BigqueryService& operator=(const BigqueryService&) = delete;
};


/**
 * @defgroup DataObject BigQuery API Data Objects
 *
 * The data objects are used as parameters and responses from service requests.
 * For more information about using data objects, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceClass BigQuery API Service
 *
 * The service classes contain information about accessing and using the
 * BigQuery API cloud service.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceMethod BigQuery API Service Methods
 *
 * The service method classes are used to create and invoke methods in the
 * BigqueryService to access the BigQuery API.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_BIGQUERY_SERVICE_H_
