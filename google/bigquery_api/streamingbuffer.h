// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2018-10-08 17:45:39 UTC
//   on: 2019-03-01, 03:01:16 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 427
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_BIGQUERY_API_STREAMINGBUFFER_H_
#define  GOOGLE_BIGQUERY_API_STREAMINGBUFFER_H_

#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class Streamingbuffer : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Streamingbuffer* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Streamingbuffer(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Streamingbuffer(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Streamingbuffer();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::Streamingbuffer</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_bigquery_api::Streamingbuffer");
  }

  /**
   * Determine if the '<code>estimatedBytes</code>' attribute was set.
   *
   * @return true if the '<code>estimatedBytes</code>' attribute was set.
   */
  bool has_estimated_bytes() const {
    return Storage().isMember("estimatedBytes");
  }

  /**
   * Clears the '<code>estimatedBytes</code>' attribute.
   */
  void clear_estimated_bytes() {
    MutableStorage()->removeMember("estimatedBytes");
  }


  /**
   * Get the value of the '<code>estimatedBytes</code>' attribute.
   */
  uint64 get_estimated_bytes() const {
    const Json::Value& storage = Storage("estimatedBytes");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>estimatedBytes</code>' attribute.
   *
   * [Output-only] A lower-bound estimate of the number of bytes currently in
   * the streaming buffer.
   *
   * @param[in] value The new value.
   */
  void set_estimated_bytes(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("estimatedBytes"));
  }

  /**
   * Determine if the '<code>estimatedRows</code>' attribute was set.
   *
   * @return true if the '<code>estimatedRows</code>' attribute was set.
   */
  bool has_estimated_rows() const {
    return Storage().isMember("estimatedRows");
  }

  /**
   * Clears the '<code>estimatedRows</code>' attribute.
   */
  void clear_estimated_rows() {
    MutableStorage()->removeMember("estimatedRows");
  }


  /**
   * Get the value of the '<code>estimatedRows</code>' attribute.
   */
  uint64 get_estimated_rows() const {
    const Json::Value& storage = Storage("estimatedRows");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>estimatedRows</code>' attribute.
   *
   * [Output-only] A lower-bound estimate of the number of rows currently in the
   * streaming buffer.
   *
   * @param[in] value The new value.
   */
  void set_estimated_rows(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("estimatedRows"));
  }

  /**
   * Determine if the '<code>oldestEntryTime</code>' attribute was set.
   *
   * @return true if the '<code>oldestEntryTime</code>' attribute was set.
   */
  bool has_oldest_entry_time() const {
    return Storage().isMember("oldestEntryTime");
  }

  /**
   * Clears the '<code>oldestEntryTime</code>' attribute.
   */
  void clear_oldest_entry_time() {
    MutableStorage()->removeMember("oldestEntryTime");
  }


  /**
   * Get the value of the '<code>oldestEntryTime</code>' attribute.
   */
  uint64 get_oldest_entry_time() const {
    const Json::Value& storage = Storage("oldestEntryTime");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>oldestEntryTime</code>' attribute.
   *
   * [Output-only] Contains the timestamp of the oldest entry in the streaming
   * buffer, in milliseconds since the epoch, if the streaming buffer is
   * available.
   *
   * @param[in] value The new value.
   */
  void set_oldest_entry_time(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("oldestEntryTime"));
  }

 private:
  void operator=(const Streamingbuffer&);
};  // Streamingbuffer
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_STREAMINGBUFFER_H_
