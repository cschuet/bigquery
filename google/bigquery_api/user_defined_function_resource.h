// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2018-10-08 17:45:39 UTC
//   on: 2019-03-01, 03:01:16 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 427
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_BIGQUERY_API_USER_DEFINED_FUNCTION_RESOURCE_H_
#define  GOOGLE_BIGQUERY_API_USER_DEFINED_FUNCTION_RESOURCE_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class UserDefinedFunctionResource : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static UserDefinedFunctionResource* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit UserDefinedFunctionResource(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit UserDefinedFunctionResource(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~UserDefinedFunctionResource();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::UserDefinedFunctionResource</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_bigquery_api::UserDefinedFunctionResource");
  }

  /**
   * Determine if the '<code>inlineCode</code>' attribute was set.
   *
   * @return true if the '<code>inlineCode</code>' attribute was set.
   */
  bool has_inline_code() const {
    return Storage().isMember("inlineCode");
  }

  /**
   * Clears the '<code>inlineCode</code>' attribute.
   */
  void clear_inline_code() {
    MutableStorage()->removeMember("inlineCode");
  }


  /**
   * Get the value of the '<code>inlineCode</code>' attribute.
   */
  const StringPiece get_inline_code() const {
    const Json::Value& v = Storage("inlineCode");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>inlineCode</code>' attribute.
   *
   * [Pick one] An inline resource that contains code for a user-defined
   * function (UDF). Providing a inline code resource is equivalent to providing
   * a URI for a file containing the same code.
   *
   * @param[in] value The new value.
   */
  void set_inline_code(const StringPiece& value) {
    *MutableStorage("inlineCode") = value.data();
  }

  /**
   * Determine if the '<code>resourceUri</code>' attribute was set.
   *
   * @return true if the '<code>resourceUri</code>' attribute was set.
   */
  bool has_resource_uri() const {
    return Storage().isMember("resourceUri");
  }

  /**
   * Clears the '<code>resourceUri</code>' attribute.
   */
  void clear_resource_uri() {
    MutableStorage()->removeMember("resourceUri");
  }


  /**
   * Get the value of the '<code>resourceUri</code>' attribute.
   */
  const StringPiece get_resource_uri() const {
    const Json::Value& v = Storage("resourceUri");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>resourceUri</code>' attribute.
   *
   * [Pick one] A code resource to load from a Google Cloud Storage URI
   * (gs://bucket/path).
   *
   * @param[in] value The new value.
   */
  void set_resource_uri(const StringPiece& value) {
    *MutableStorage("resourceUri") = value.data();
  }

 private:
  void operator=(const UserDefinedFunctionResource&);
};  // UserDefinedFunctionResource
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_USER_DEFINED_FUNCTION_RESOURCE_H_
