// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.6.0

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google API Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 20190224
// Generated by:
//    Tool: google-apis-code-generator 1.6.0
//     C++: 0.1.5
#ifndef  GOOGLE_BIGQUERY_API_JOB_LIST_H_
#define  GOOGLE_BIGQUERY_API_JOB_LIST_H_

#include <string>
#include "googleapis/client/data/jsoncpp_data.h"

#include "google/bigquery_api/error_proto.h"
#include "google/bigquery_api/job_configuration.h"
#include "google/bigquery_api/job_reference.h"
#include "google/bigquery_api/job_statistics.h"
#include "google/bigquery_api/job_status.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class JobList : public client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class JobListJobs : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static JobListJobs* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit JobListJobs(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit JobListJobs(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~JobListJobs();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_bigquery_api::JobListJobs</code>
     */
    const char* GetTypeName() const {
      return "google_bigquery_api::JobListJobs";
    }

    /**
     * Determine if the '<code>configuration</code>' attribute was set.
     *
     * @return true if the '<code>configuration</code>' attribute was set.
     */
    bool has_configuration() const {
      return Storage().isMember("configuration");
    }

    /**
     * Clears the '<code>configuration</code>' attribute.
     */
    void clear_configuration() {
      MutableStorage()->removeMember("configuration");
    }


    /**
     * Get a reference to the value of the '<code>configuration</code>'
     * attribute.
     */
    const JobConfiguration get_configuration() const;

    /**
     * Gets a reference to a mutable value of the '<code>configuration</code>'
     * property.
     *
     * [Full-projection-only] Specifies the job configuration.
     *
     * @return The result can be modified to change the attribute value.
     */
    JobConfiguration mutable_configuration();

    /**
     * Determine if the '<code>errorResult</code>' attribute was set.
     *
     * @return true if the '<code>errorResult</code>' attribute was set.
     */
    bool has_error_result() const {
      return Storage().isMember("errorResult");
    }

    /**
     * Clears the '<code>errorResult</code>' attribute.
     */
    void clear_error_result() {
      MutableStorage()->removeMember("errorResult");
    }


    /**
     * Get a reference to the value of the '<code>errorResult</code>' attribute.
     */
    const ErrorProto get_error_result() const;

    /**
     * Gets a reference to a mutable value of the '<code>errorResult</code>'
     * property.
     *
     * A result object that will be present only if the job has failed.
     *
     * @return The result can be modified to change the attribute value.
     */
    ErrorProto mutable_errorResult();

    /**
     * Determine if the '<code>id</code>' attribute was set.
     *
     * @return true if the '<code>id</code>' attribute was set.
     */
    bool has_id() const {
      return Storage().isMember("id");
    }

    /**
     * Clears the '<code>id</code>' attribute.
     */
    void clear_id() {
      MutableStorage()->removeMember("id");
    }


    /**
     * Get the value of the '<code>id</code>' attribute.
     */
    const std::string get_id() const {
      const Json::Value& v = Storage("id");
      if (v == Json::Value::null) return std::string("");
      return std::string(v.asCString());
    }

    /**
     * Change the '<code>id</code>' attribute.
     *
     * Unique opaque ID of the job.
     *
     * @param[in] value The new value.
     */
    void set_id(const std::string& value) {
      *MutableStorage("id") = value.data();
    }

    /**
     * Determine if the '<code>jobReference</code>' attribute was set.
     *
     * @return true if the '<code>jobReference</code>' attribute was set.
     */
    bool has_job_reference() const {
      return Storage().isMember("jobReference");
    }

    /**
     * Clears the '<code>jobReference</code>' attribute.
     */
    void clear_job_reference() {
      MutableStorage()->removeMember("jobReference");
    }


    /**
     * Get a reference to the value of the '<code>jobReference</code>'
     * attribute.
     */
    const JobReference get_job_reference() const;

    /**
     * Gets a reference to a mutable value of the '<code>jobReference</code>'
     * property.
     *
     * Job reference uniquely identifying the job.
     *
     * @return The result can be modified to change the attribute value.
     */
    JobReference mutable_jobReference();

    /**
     * Determine if the '<code>kind</code>' attribute was set.
     *
     * @return true if the '<code>kind</code>' attribute was set.
     */
    bool has_kind() const {
      return Storage().isMember("kind");
    }

    /**
     * Clears the '<code>kind</code>' attribute.
     */
    void clear_kind() {
      MutableStorage()->removeMember("kind");
    }


    /**
     * Get the value of the '<code>kind</code>' attribute.
     */
    const std::string get_kind() const {
      const Json::Value& v = Storage("kind");
      if (v == Json::Value::null) return std::string("");
      return std::string(v.asCString());
    }

    /**
     * Change the '<code>kind</code>' attribute.
     *
     * The resource type.
     *
     * @param[in] value The new value.
     */
    void set_kind(const std::string& value) {
      *MutableStorage("kind") = value.data();
    }

    /**
     * Determine if the '<code>state</code>' attribute was set.
     *
     * @return true if the '<code>state</code>' attribute was set.
     */
    bool has_state() const {
      return Storage().isMember("state");
    }

    /**
     * Clears the '<code>state</code>' attribute.
     */
    void clear_state() {
      MutableStorage()->removeMember("state");
    }


    /**
     * Get the value of the '<code>state</code>' attribute.
     */
    const std::string get_state() const {
      const Json::Value& v = Storage("state");
      if (v == Json::Value::null) return std::string("");
      return std::string(v.asCString());
    }

    /**
     * Change the '<code>state</code>' attribute.
     *
     * Running state of the job. When the state is DONE, errorResult can be
     * checked to determine whether the job succeeded or failed.
     *
     * @param[in] value The new value.
     */
    void set_state(const std::string& value) {
      *MutableStorage("state") = value.data();
    }

    /**
     * Determine if the '<code>statistics</code>' attribute was set.
     *
     * @return true if the '<code>statistics</code>' attribute was set.
     */
    bool has_statistics() const {
      return Storage().isMember("statistics");
    }

    /**
     * Clears the '<code>statistics</code>' attribute.
     */
    void clear_statistics() {
      MutableStorage()->removeMember("statistics");
    }


    /**
     * Get a reference to the value of the '<code>statistics</code>' attribute.
     */
    const JobStatistics get_statistics() const;

    /**
     * Gets a reference to a mutable value of the '<code>statistics</code>'
     * property.
     *
     * [Output-only] Information about the job, including starting time and
     * ending time of the job.
     *
     * @return The result can be modified to change the attribute value.
     */
    JobStatistics mutable_statistics();

    /**
     * Determine if the '<code>status</code>' attribute was set.
     *
     * @return true if the '<code>status</code>' attribute was set.
     */
    bool has_status() const {
      return Storage().isMember("status");
    }

    /**
     * Clears the '<code>status</code>' attribute.
     */
    void clear_status() {
      MutableStorage()->removeMember("status");
    }


    /**
     * Get a reference to the value of the '<code>status</code>' attribute.
     */
    const JobStatus get_status() const;

    /**
     * Gets a reference to a mutable value of the '<code>status</code>'
     * property.
     *
     * [Full-projection-only] Describes the state of the job.
     *
     * @return The result can be modified to change the attribute value.
     */
    JobStatus mutable_status();

    /**
     * Determine if the '<code>user_email</code>' attribute was set.
     *
     * @return true if the '<code>user_email</code>' attribute was set.
     */
    bool has_user_email() const {
      return Storage().isMember("user_email");
    }

    /**
     * Clears the '<code>user_email</code>' attribute.
     */
    void clear_user_email() {
      MutableStorage()->removeMember("user_email");
    }


    /**
     * Get the value of the '<code>user_email</code>' attribute.
     */
    const std::string get_user_email() const {
      const Json::Value& v = Storage("user_email");
      if (v == Json::Value::null) return std::string("");
      return std::string(v.asCString());
    }

    /**
     * Change the '<code>user_email</code>' attribute.
     *
     * [Full-projection-only] Email address of the user who ran the job.
     *
     * @param[in] value The new value.
     */
    void set_user_email(const std::string& value) {
      *MutableStorage("user_email") = value.data();
    }

   private:
    void operator=(const JobListJobs&);
  };  // JobListJobs
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static JobList* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit JobList(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit JobList(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~JobList();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::JobList</code>
   */
  const char* GetTypeName() const {
    return "google_bigquery_api::JobList";
  }

  /**
   * Determine if the '<code>etag</code>' attribute was set.
   *
   * @return true if the '<code>etag</code>' attribute was set.
   */
  bool has_etag() const {
    return Storage().isMember("etag");
  }

  /**
   * Clears the '<code>etag</code>' attribute.
   */
  void clear_etag() {
    MutableStorage()->removeMember("etag");
  }


  /**
   * Get the value of the '<code>etag</code>' attribute.
   */
  const std::string get_etag() const {
    const Json::Value& v = Storage("etag");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>etag</code>' attribute.
   *
   * A hash of this page of results.
   *
   * @param[in] value The new value.
   */
  void set_etag(const std::string& value) {
    *MutableStorage("etag") = value.data();
  }

  /**
   * Determine if the '<code>jobs</code>' attribute was set.
   *
   * @return true if the '<code>jobs</code>' attribute was set.
   */
  bool has_jobs() const {
    return Storage().isMember("jobs");
  }

  /**
   * Clears the '<code>jobs</code>' attribute.
   */
  void clear_jobs() {
    MutableStorage()->removeMember("jobs");
  }


  /**
   * Get a reference to the value of the '<code>jobs</code>' attribute.
   */
  const client::JsonCppArray<JobListJobs > get_jobs() const {
     const Json::Value& storage = Storage("jobs");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<JobListJobs > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>jobs</code>' property.
   *
   * List of jobs that were requested.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<JobListJobs > mutable_jobs() {
    Json::Value* storage = MutableStorage("jobs");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<JobListJobs > >(storage);
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const std::string get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * The resource type of the response.
   *
   * @param[in] value The new value.
   */
  void set_kind(const std::string& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>nextPageToken</code>' attribute was set.
   *
   * @return true if the '<code>nextPageToken</code>' attribute was set.
   */
  bool has_next_page_token() const {
    return Storage().isMember("nextPageToken");
  }

  /**
   * Clears the '<code>nextPageToken</code>' attribute.
   */
  void clear_next_page_token() {
    MutableStorage()->removeMember("nextPageToken");
  }


  /**
   * Get the value of the '<code>nextPageToken</code>' attribute.
   */
  const std::string get_next_page_token() const {
    const Json::Value& v = Storage("nextPageToken");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>nextPageToken</code>' attribute.
   *
   * A token to request the next page of results.
   *
   * @param[in] value The new value.
   */
  void set_next_page_token(const std::string& value) {
    *MutableStorage("nextPageToken") = value.data();
  }

 private:
  void operator=(const JobList&);
};  // JobList
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_JOB_LIST_H_
