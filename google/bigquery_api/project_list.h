// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2018-10-08 17:45:39 UTC
//   on: 2019-03-01, 03:01:16 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 427
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_BIGQUERY_API_PROJECT_LIST_H_
#define  GOOGLE_BIGQUERY_API_PROJECT_LIST_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/bigquery_api/project_reference.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class ProjectList : public client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class ProjectListProjects : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static ProjectListProjects* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ProjectListProjects(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ProjectListProjects(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~ProjectListProjects();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_bigquery_api::ProjectListProjects</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_bigquery_api::ProjectListProjects");
    }

    /**
     * Determine if the '<code>friendlyName</code>' attribute was set.
     *
     * @return true if the '<code>friendlyName</code>' attribute was set.
     */
    bool has_friendly_name() const {
      return Storage().isMember("friendlyName");
    }

    /**
     * Clears the '<code>friendlyName</code>' attribute.
     */
    void clear_friendly_name() {
      MutableStorage()->removeMember("friendlyName");
    }


    /**
     * Get the value of the '<code>friendlyName</code>' attribute.
     */
    const StringPiece get_friendly_name() const {
      const Json::Value& v = Storage("friendlyName");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>friendlyName</code>' attribute.
     *
     * A descriptive name for this project.
     *
     * @param[in] value The new value.
     */
    void set_friendly_name(const StringPiece& value) {
      *MutableStorage("friendlyName") = value.data();
    }

    /**
     * Determine if the '<code>id</code>' attribute was set.
     *
     * @return true if the '<code>id</code>' attribute was set.
     */
    bool has_id() const {
      return Storage().isMember("id");
    }

    /**
     * Clears the '<code>id</code>' attribute.
     */
    void clear_id() {
      MutableStorage()->removeMember("id");
    }


    /**
     * Get the value of the '<code>id</code>' attribute.
     */
    const StringPiece get_id() const {
      const Json::Value& v = Storage("id");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>id</code>' attribute.
     *
     * An opaque ID of this project.
     *
     * @param[in] value The new value.
     */
    void set_id(const StringPiece& value) {
      *MutableStorage("id") = value.data();
    }

    /**
     * Determine if the '<code>kind</code>' attribute was set.
     *
     * @return true if the '<code>kind</code>' attribute was set.
     */
    bool has_kind() const {
      return Storage().isMember("kind");
    }

    /**
     * Clears the '<code>kind</code>' attribute.
     */
    void clear_kind() {
      MutableStorage()->removeMember("kind");
    }


    /**
     * Get the value of the '<code>kind</code>' attribute.
     */
    const StringPiece get_kind() const {
      const Json::Value& v = Storage("kind");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>kind</code>' attribute.
     *
     * The resource type.
     *
     * @param[in] value The new value.
     */
    void set_kind(const StringPiece& value) {
      *MutableStorage("kind") = value.data();
    }

    /**
     * Determine if the '<code>numericId</code>' attribute was set.
     *
     * @return true if the '<code>numericId</code>' attribute was set.
     */
    bool has_numeric_id() const {
      return Storage().isMember("numericId");
    }

    /**
     * Clears the '<code>numericId</code>' attribute.
     */
    void clear_numeric_id() {
      MutableStorage()->removeMember("numericId");
    }


    /**
     * Get the value of the '<code>numericId</code>' attribute.
     */
    uint64 get_numeric_id() const {
      const Json::Value& storage = Storage("numericId");
      return client::JsonValueToCppValueHelper<uint64 >(storage);
    }

    /**
     * Change the '<code>numericId</code>' attribute.
     *
     * The numeric ID of this project.
     *
     * @param[in] value The new value.
     */
    void set_numeric_id(uint64 value) {
      client::SetJsonValueFromCppValueHelper<uint64 >(
        value, MutableStorage("numericId"));
    }

    /**
     * Determine if the '<code>projectReference</code>' attribute was set.
     *
     * @return true if the '<code>projectReference</code>' attribute was set.
     */
    bool has_project_reference() const {
      return Storage().isMember("projectReference");
    }

    /**
     * Clears the '<code>projectReference</code>' attribute.
     */
    void clear_project_reference() {
      MutableStorage()->removeMember("projectReference");
    }


    /**
     * Get a reference to the value of the '<code>projectReference</code>'
     * attribute.
     */
    const ProjectReference get_project_reference() const;

    /**
     * Gets a reference to a mutable value of the
     * '<code>projectReference</code>' property.
     *
     * A unique reference to this project.
     *
     * @return The result can be modified to change the attribute value.
     */
    ProjectReference mutable_projectReference();

   private:
    void operator=(const ProjectListProjects&);
  };  // ProjectListProjects
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static ProjectList* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ProjectList(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ProjectList(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~ProjectList();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::ProjectList</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_bigquery_api::ProjectList");
  }

  /**
   * Determine if the '<code>etag</code>' attribute was set.
   *
   * @return true if the '<code>etag</code>' attribute was set.
   */
  bool has_etag() const {
    return Storage().isMember("etag");
  }

  /**
   * Clears the '<code>etag</code>' attribute.
   */
  void clear_etag() {
    MutableStorage()->removeMember("etag");
  }


  /**
   * Get the value of the '<code>etag</code>' attribute.
   */
  const StringPiece get_etag() const {
    const Json::Value& v = Storage("etag");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>etag</code>' attribute.
   *
   * A hash of the page of results.
   *
   * @param[in] value The new value.
   */
  void set_etag(const StringPiece& value) {
    *MutableStorage("etag") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * The type of list.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>nextPageToken</code>' attribute was set.
   *
   * @return true if the '<code>nextPageToken</code>' attribute was set.
   */
  bool has_next_page_token() const {
    return Storage().isMember("nextPageToken");
  }

  /**
   * Clears the '<code>nextPageToken</code>' attribute.
   */
  void clear_next_page_token() {
    MutableStorage()->removeMember("nextPageToken");
  }


  /**
   * Get the value of the '<code>nextPageToken</code>' attribute.
   */
  const StringPiece get_next_page_token() const {
    const Json::Value& v = Storage("nextPageToken");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>nextPageToken</code>' attribute.
   *
   * A token to request the next page of results.
   *
   * @param[in] value The new value.
   */
  void set_next_page_token(const StringPiece& value) {
    *MutableStorage("nextPageToken") = value.data();
  }

  /**
   * Determine if the '<code>projects</code>' attribute was set.
   *
   * @return true if the '<code>projects</code>' attribute was set.
   */
  bool has_projects() const {
    return Storage().isMember("projects");
  }

  /**
   * Clears the '<code>projects</code>' attribute.
   */
  void clear_projects() {
    MutableStorage()->removeMember("projects");
  }


  /**
   * Get a reference to the value of the '<code>projects</code>' attribute.
   */
  const client::JsonCppArray<ProjectListProjects > get_projects() const {
     const Json::Value& storage = Storage("projects");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<ProjectListProjects > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>projects</code>'
   * property.
   *
   * Projects to which you have at least READ access.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<ProjectListProjects > mutable_projects() {
    Json::Value* storage = MutableStorage("projects");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<ProjectListProjects > >(storage);
  }

  /**
   * Determine if the '<code>totalItems</code>' attribute was set.
   *
   * @return true if the '<code>totalItems</code>' attribute was set.
   */
  bool has_total_items() const {
    return Storage().isMember("totalItems");
  }

  /**
   * Clears the '<code>totalItems</code>' attribute.
   */
  void clear_total_items() {
    MutableStorage()->removeMember("totalItems");
  }


  /**
   * Get the value of the '<code>totalItems</code>' attribute.
   */
  int32 get_total_items() const {
    const Json::Value& storage = Storage("totalItems");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>totalItems</code>' attribute.
   *
   * The total number of projects in the list.
   *
   * @param[in] value The new value.
   */
  void set_total_items(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("totalItems"));
  }

 private:
  void operator=(const ProjectList&);
};  // ProjectList
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_PROJECT_LIST_H_
