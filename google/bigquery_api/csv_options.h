// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2018-10-08 17:45:39 UTC
//   on: 2019-03-01, 03:01:16 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 427
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_BIGQUERY_API_CSV_OPTIONS_H_
#define  GOOGLE_BIGQUERY_API_CSV_OPTIONS_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class CsvOptions : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static CsvOptions* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit CsvOptions(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit CsvOptions(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~CsvOptions();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::CsvOptions</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_bigquery_api::CsvOptions");
  }

  /**
   * Determine if the '<code>allowJaggedRows</code>' attribute was set.
   *
   * @return true if the '<code>allowJaggedRows</code>' attribute was set.
   */
  bool has_allow_jagged_rows() const {
    return Storage().isMember("allowJaggedRows");
  }

  /**
   * Clears the '<code>allowJaggedRows</code>' attribute.
   */
  void clear_allow_jagged_rows() {
    MutableStorage()->removeMember("allowJaggedRows");
  }


  /**
   * Get the value of the '<code>allowJaggedRows</code>' attribute.
   */
  bool get_allow_jagged_rows() const {
    const Json::Value& storage = Storage("allowJaggedRows");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>allowJaggedRows</code>' attribute.
   *
   * [Optional] Indicates if BigQuery should accept rows that are missing
   * trailing optional columns. If true, BigQuery treats missing trailing
   * columns as null values. If false, records with missing trailing columns are
   * treated as bad records, and if there are too many bad records, an invalid
   * error is returned in the job result. The default value is false.
   *
   * @param[in] value The new value.
   */
  void set_allow_jagged_rows(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("allowJaggedRows"));
  }

  /**
   * Determine if the '<code>allowQuotedNewlines</code>' attribute was set.
   *
   * @return true if the '<code>allowQuotedNewlines</code>' attribute was set.
   */
  bool has_allow_quoted_newlines() const {
    return Storage().isMember("allowQuotedNewlines");
  }

  /**
   * Clears the '<code>allowQuotedNewlines</code>' attribute.
   */
  void clear_allow_quoted_newlines() {
    MutableStorage()->removeMember("allowQuotedNewlines");
  }


  /**
   * Get the value of the '<code>allowQuotedNewlines</code>' attribute.
   */
  bool get_allow_quoted_newlines() const {
    const Json::Value& storage = Storage("allowQuotedNewlines");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>allowQuotedNewlines</code>' attribute.
   *
   * [Optional] Indicates if BigQuery should allow quoted data sections that
   * contain newline characters in a CSV file. The default value is false.
   *
   * @param[in] value The new value.
   */
  void set_allow_quoted_newlines(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("allowQuotedNewlines"));
  }

  /**
   * Determine if the '<code>encoding</code>' attribute was set.
   *
   * @return true if the '<code>encoding</code>' attribute was set.
   */
  bool has_encoding() const {
    return Storage().isMember("encoding");
  }

  /**
   * Clears the '<code>encoding</code>' attribute.
   */
  void clear_encoding() {
    MutableStorage()->removeMember("encoding");
  }


  /**
   * Get the value of the '<code>encoding</code>' attribute.
   */
  const StringPiece get_encoding() const {
    const Json::Value& v = Storage("encoding");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>encoding</code>' attribute.
   *
   * [Optional] The character encoding of the data. The supported values are
   * UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data
   * after the raw, binary data has been split using the values of the quote and
   * fieldDelimiter properties.
   *
   * @param[in] value The new value.
   */
  void set_encoding(const StringPiece& value) {
    *MutableStorage("encoding") = value.data();
  }

  /**
   * Determine if the '<code>fieldDelimiter</code>' attribute was set.
   *
   * @return true if the '<code>fieldDelimiter</code>' attribute was set.
   */
  bool has_field_delimiter() const {
    return Storage().isMember("fieldDelimiter");
  }

  /**
   * Clears the '<code>fieldDelimiter</code>' attribute.
   */
  void clear_field_delimiter() {
    MutableStorage()->removeMember("fieldDelimiter");
  }


  /**
   * Get the value of the '<code>fieldDelimiter</code>' attribute.
   */
  const StringPiece get_field_delimiter() const {
    const Json::Value& v = Storage("fieldDelimiter");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>fieldDelimiter</code>' attribute.
   *
   * [Optional] The separator for fields in a CSV file. BigQuery converts the
   * string to ISO-8859-1 encoding, and then uses the first byte of the encoded
   * string to split the data in its raw, binary state. BigQuery also supports
   * the escape sequence "\t" to specify a tab separator. The default value is a
   * comma (',').
   *
   * @param[in] value The new value.
   */
  void set_field_delimiter(const StringPiece& value) {
    *MutableStorage("fieldDelimiter") = value.data();
  }

  /**
   * Determine if the '<code>quote</code>' attribute was set.
   *
   * @return true if the '<code>quote</code>' attribute was set.
   */
  bool has_quote() const {
    return Storage().isMember("quote");
  }

  /**
   * Clears the '<code>quote</code>' attribute.
   */
  void clear_quote() {
    MutableStorage()->removeMember("quote");
  }


  /**
   * Get the value of the '<code>quote</code>' attribute.
   */
  const StringPiece get_quote() const {
    const Json::Value& v = Storage("quote");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>quote</code>' attribute.
   *
   * [Optional] The value that is used to quote data sections in a CSV file.
   * BigQuery converts the string to ISO-8859-1 encoding, and then uses the
   * first byte of the encoded string to split the data in its raw, binary
   * state. The default value is a double-quote ('"'). If your data does not
   * contain quoted sections, set the property value to an empty string. If your
   * data contains quoted newline characters, you must also set the
   * allowQuotedNewlines property to true.
   *
   * @param[in] value The new value.
   */
  void set_quote(const StringPiece& value) {
    *MutableStorage("quote") = value.data();
  }

  /**
   * Determine if the '<code>skipLeadingRows</code>' attribute was set.
   *
   * @return true if the '<code>skipLeadingRows</code>' attribute was set.
   */
  bool has_skip_leading_rows() const {
    return Storage().isMember("skipLeadingRows");
  }

  /**
   * Clears the '<code>skipLeadingRows</code>' attribute.
   */
  void clear_skip_leading_rows() {
    MutableStorage()->removeMember("skipLeadingRows");
  }


  /**
   * Get the value of the '<code>skipLeadingRows</code>' attribute.
   */
  int64 get_skip_leading_rows() const {
    const Json::Value& storage = Storage("skipLeadingRows");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>skipLeadingRows</code>' attribute.
   *
   * [Optional] The number of rows at the top of a CSV file that BigQuery will
   * skip when reading the data. The default value is 0. This property is useful
   * if you have header rows in the file that should be skipped.
   *
   * @param[in] value The new value.
   */
  void set_skip_leading_rows(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("skipLeadingRows"));
  }

 private:
  void operator=(const CsvOptions&);
};  // CsvOptions
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_CSV_OPTIONS_H_
