// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.6.0

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google API Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 20190224
// Generated by:
//    Tool: google-apis-code-generator 1.6.0
//     C++: 0.1.5
#ifndef  GOOGLE_BIGQUERY_API_ERROR_PROTO_H_
#define  GOOGLE_BIGQUERY_API_ERROR_PROTO_H_

#include <string>

#include "googleapis/client/data/jsoncpp_data.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class ErrorProto : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static ErrorProto* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ErrorProto(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ErrorProto(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~ErrorProto();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::ErrorProto</code>
   */
  const char* GetTypeName() const {
    return "google_bigquery_api::ErrorProto";
  }

  /**
   * Determine if the '<code>debugInfo</code>' attribute was set.
   *
   * @return true if the '<code>debugInfo</code>' attribute was set.
   */
  bool has_debug_info() const {
    return Storage().isMember("debugInfo");
  }

  /**
   * Clears the '<code>debugInfo</code>' attribute.
   */
  void clear_debug_info() {
    MutableStorage()->removeMember("debugInfo");
  }


  /**
   * Get the value of the '<code>debugInfo</code>' attribute.
   */
  const std::string get_debug_info() const {
    const Json::Value& v = Storage("debugInfo");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>debugInfo</code>' attribute.
   *
   * Debugging information. This property is internal to Google and should not
   * be used.
   *
   * @param[in] value The new value.
   */
  void set_debug_info(const std::string& value) {
    *MutableStorage("debugInfo") = value.data();
  }

  /**
   * Determine if the '<code>location</code>' attribute was set.
   *
   * @return true if the '<code>location</code>' attribute was set.
   */
  bool has_location() const {
    return Storage().isMember("location");
  }

  /**
   * Clears the '<code>location</code>' attribute.
   */
  void clear_location() {
    MutableStorage()->removeMember("location");
  }


  /**
   * Get the value of the '<code>location</code>' attribute.
   */
  const std::string get_location() const {
    const Json::Value& v = Storage("location");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>location</code>' attribute.
   *
   * Specifies where the error occurred, if present.
   *
   * @param[in] value The new value.
   */
  void set_location(const std::string& value) {
    *MutableStorage("location") = value.data();
  }

  /**
   * Determine if the '<code>message</code>' attribute was set.
   *
   * @return true if the '<code>message</code>' attribute was set.
   */
  bool has_message() const {
    return Storage().isMember("message");
  }

  /**
   * Clears the '<code>message</code>' attribute.
   */
  void clear_message() {
    MutableStorage()->removeMember("message");
  }


  /**
   * Get the value of the '<code>message</code>' attribute.
   */
  const std::string get_message() const {
    const Json::Value& v = Storage("message");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>message</code>' attribute.
   *
   * A human-readable description of the error.
   *
   * @param[in] value The new value.
   */
  void set_message(const std::string& value) {
    *MutableStorage("message") = value.data();
  }

  /**
   * Determine if the '<code>reason</code>' attribute was set.
   *
   * @return true if the '<code>reason</code>' attribute was set.
   */
  bool has_reason() const {
    return Storage().isMember("reason");
  }

  /**
   * Clears the '<code>reason</code>' attribute.
   */
  void clear_reason() {
    MutableStorage()->removeMember("reason");
  }


  /**
   * Get the value of the '<code>reason</code>' attribute.
   */
  const std::string get_reason() const {
    const Json::Value& v = Storage("reason");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>reason</code>' attribute.
   *
   * A short error code that summarizes the error.
   *
   * @param[in] value The new value.
   */
  void set_reason(const std::string& value) {
    *MutableStorage("reason") = value.data();
  }

 private:
  void operator=(const ErrorProto&);
};  // ErrorProto
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_ERROR_PROTO_H_
