// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.6.0

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google API Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 20190224
// Generated by:
//    Tool: google-apis-code-generator 1.6.0
//     C++: 0.1.5
#ifndef  GOOGLE_BIGQUERY_API_MODEL_DEFINITION_H_
#define  GOOGLE_BIGQUERY_API_MODEL_DEFINITION_H_

#include <string>

#include "googleapis/client/data/jsoncpp_data.h"

#include "google/bigquery_api/training_run.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class ModelDefinition : public client::JsonCppData {
 public:
  /**
   * [Output-only, Beta] Model options used for the first training run. These
   * options are immutable for subsequent training runs. Default values are used
   * for any options not specified in the input query.
   *
   * @ingroup DataObject
   */
  class ModelDefinitionModelOptions : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static ModelDefinitionModelOptions* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ModelDefinitionModelOptions(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ModelDefinitionModelOptions(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~ModelDefinitionModelOptions();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_bigquery_api::ModelDefinitionModelOptions</code>
     */
    const char* GetTypeName() const {
      return "google_bigquery_api::ModelDefinitionModelOptions";
    }

    /**
     * Determine if the '<code>labels</code>' attribute was set.
     *
     * @return true if the '<code>labels</code>' attribute was set.
     */
    bool has_labels() const {
      return Storage().isMember("labels");
    }

    /**
     * Clears the '<code>labels</code>' attribute.
     */
    void clear_labels() {
      MutableStorage()->removeMember("labels");
    }


    /**
     * Get a reference to the value of the '<code>labels</code>' attribute.
     */
    const client::JsonCppArray<string > get_labels() const {
       const Json::Value& storage = Storage("labels");
      return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>labels</code>'
     * property.
     * @return The result can be modified to change the attribute value.
     */
    client::JsonCppArray<string > mutable_labels() {
      Json::Value* storage = MutableStorage("labels");
      return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
    }

    /**
     * Determine if the '<code>lossType</code>' attribute was set.
     *
     * @return true if the '<code>lossType</code>' attribute was set.
     */
    bool has_loss_type() const {
      return Storage().isMember("lossType");
    }

    /**
     * Clears the '<code>lossType</code>' attribute.
     */
    void clear_loss_type() {
      MutableStorage()->removeMember("lossType");
    }


    /**
     * Get the value of the '<code>lossType</code>' attribute.
     */
    const std::string get_loss_type() const {
      const Json::Value& v = Storage("lossType");
      if (v == Json::Value::null) return std::string("");
      return std::string(v.asCString());
    }

    /**
     * Change the '<code>lossType</code>' attribute.
     * @param[in] value The new value.
     */
    void set_loss_type(const std::string& value) {
      *MutableStorage("lossType") = value.data();
    }

    /**
     * Determine if the '<code>modelType</code>' attribute was set.
     *
     * @return true if the '<code>modelType</code>' attribute was set.
     */
    bool has_model_type() const {
      return Storage().isMember("modelType");
    }

    /**
     * Clears the '<code>modelType</code>' attribute.
     */
    void clear_model_type() {
      MutableStorage()->removeMember("modelType");
    }


    /**
     * Get the value of the '<code>modelType</code>' attribute.
     */
    const std::string get_model_type() const {
      const Json::Value& v = Storage("modelType");
      if (v == Json::Value::null) return std::string("");
      return std::string(v.asCString());
    }

    /**
     * Change the '<code>modelType</code>' attribute.
     * @param[in] value The new value.
     */
    void set_model_type(const std::string& value) {
      *MutableStorage("modelType") = value.data();
    }

   private:
    void operator=(const ModelDefinitionModelOptions&);
  };  // ModelDefinitionModelOptions
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static ModelDefinition* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ModelDefinition(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ModelDefinition(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~ModelDefinition();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::ModelDefinition</code>
   */
  const char* GetTypeName() const {
    return "google_bigquery_api::ModelDefinition";
  }

  /**
   * Determine if the '<code>modelOptions</code>' attribute was set.
   *
   * @return true if the '<code>modelOptions</code>' attribute was set.
   */
  bool has_model_options() const {
    return Storage().isMember("modelOptions");
  }

  /**
   * Clears the '<code>modelOptions</code>' attribute.
   */
  void clear_model_options() {
    MutableStorage()->removeMember("modelOptions");
  }


  /**
   * Get a reference to the value of the '<code>modelOptions</code>' attribute.
   */
  const ModelDefinitionModelOptions get_model_options() const {
     const Json::Value& storage = Storage("modelOptions");
    return client::JsonValueToCppValueHelper<ModelDefinitionModelOptions >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>modelOptions</code>'
   * property.
   *
   * [Output-only, Beta] Model options used for the first training run. These
   * options are immutable for subsequent training runs. Default values are used
   * for any options not specified in the input query.
   *
   * @return The result can be modified to change the attribute value.
   */
  ModelDefinitionModelOptions mutable_modelOptions() {
    Json::Value* storage = MutableStorage("modelOptions");
    return client::JsonValueToMutableCppValueHelper<ModelDefinitionModelOptions >(storage);
  }

  /**
   * Determine if the '<code>trainingRuns</code>' attribute was set.
   *
   * @return true if the '<code>trainingRuns</code>' attribute was set.
   */
  bool has_training_runs() const {
    return Storage().isMember("trainingRuns");
  }

  /**
   * Clears the '<code>trainingRuns</code>' attribute.
   */
  void clear_training_runs() {
    MutableStorage()->removeMember("trainingRuns");
  }


  /**
   * Get a reference to the value of the '<code>trainingRuns</code>' attribute.
   */
  const client::JsonCppArray<TrainingRun > get_training_runs() const;

  /**
   * Gets a reference to a mutable value of the '<code>trainingRuns</code>'
   * property.
   *
   * [Output-only, Beta] Information about ml training runs, each training run
   * comprises of multiple iterations and there may be multiple training runs
   * for the model if warm start is used or if a user decides to continue a
   * previously cancelled query.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<TrainingRun > mutable_trainingRuns();

 private:
  void operator=(const ModelDefinition&);
};  // ModelDefinition
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_MODEL_DEFINITION_H_
