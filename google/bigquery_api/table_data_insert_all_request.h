// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2018-10-08 17:45:39 UTC
//   on: 2019-03-01, 03:01:16 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 427
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_BIGQUERY_API_TABLE_DATA_INSERT_ALL_REQUEST_H_
#define  GOOGLE_BIGQUERY_API_TABLE_DATA_INSERT_ALL_REQUEST_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class TableDataInsertAllRequest : public client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class TableDataInsertAllRequestRows : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static TableDataInsertAllRequestRows* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TableDataInsertAllRequestRows(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TableDataInsertAllRequestRows(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~TableDataInsertAllRequestRows();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_bigquery_api::TableDataInsertAllRequestRows</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_bigquery_api::TableDataInsertAllRequestRows");
    }

    /**
     * Determine if the '<code>insertId</code>' attribute was set.
     *
     * @return true if the '<code>insertId</code>' attribute was set.
     */
    bool has_insert_id() const {
      return Storage().isMember("insertId");
    }

    /**
     * Clears the '<code>insertId</code>' attribute.
     */
    void clear_insert_id() {
      MutableStorage()->removeMember("insertId");
    }


    /**
     * Get the value of the '<code>insertId</code>' attribute.
     */
    const StringPiece get_insert_id() const {
      const Json::Value& v = Storage("insertId");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>insertId</code>' attribute.
     *
     * [Optional] A unique ID for each row. BigQuery uses this property to
     * detect duplicate insertion requests on a best-effort basis.
     *
     * @param[in] value The new value.
     */
    void set_insert_id(const StringPiece& value) {
      *MutableStorage("insertId") = value.data();
    }

    /**
     * Determine if the '<code>json</code>' attribute was set.
     *
     * @return true if the '<code>json</code>' attribute was set.
     */
    bool has_json() const {
      return Storage().isMember("json");
    }

    /**
     * Clears the '<code>json</code>' attribute.
     */
    void clear_json() {
      MutableStorage()->removeMember("json");
    }


    /**
     * Get a reference to the value of the '<code>json</code>' attribute.
     */
    const client::JsonCppAssociativeArray<client::JsonCppData > get_json() const;

    /**
     * Gets a reference to a mutable value of the '<code>json</code>' property.
     *
     * [Required] A JSON object that contains a row of data. The object's
     * properties and values must match the destination table's schema.
     *
     * @return The result can be modified to change the attribute value.
     */
    client::JsonCppAssociativeArray<client::JsonCppData > mutable_json();

   private:
    void operator=(const TableDataInsertAllRequestRows&);
  };  // TableDataInsertAllRequestRows
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static TableDataInsertAllRequest* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit TableDataInsertAllRequest(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit TableDataInsertAllRequest(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~TableDataInsertAllRequest();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::TableDataInsertAllRequest</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_bigquery_api::TableDataInsertAllRequest");
  }

  /**
   * Determine if the '<code>ignoreUnknownValues</code>' attribute was set.
   *
   * @return true if the '<code>ignoreUnknownValues</code>' attribute was set.
   */
  bool has_ignore_unknown_values() const {
    return Storage().isMember("ignoreUnknownValues");
  }

  /**
   * Clears the '<code>ignoreUnknownValues</code>' attribute.
   */
  void clear_ignore_unknown_values() {
    MutableStorage()->removeMember("ignoreUnknownValues");
  }


  /**
   * Get the value of the '<code>ignoreUnknownValues</code>' attribute.
   */
  bool get_ignore_unknown_values() const {
    const Json::Value& storage = Storage("ignoreUnknownValues");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>ignoreUnknownValues</code>' attribute.
   *
   * [Optional] Accept rows that contain values that do not match the schema.
   * The unknown values are ignored. Default is false, which treats unknown
   * values as errors.
   *
   * @param[in] value The new value.
   */
  void set_ignore_unknown_values(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("ignoreUnknownValues"));
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * The resource type of the response.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>rows</code>' attribute was set.
   *
   * @return true if the '<code>rows</code>' attribute was set.
   */
  bool has_rows() const {
    return Storage().isMember("rows");
  }

  /**
   * Clears the '<code>rows</code>' attribute.
   */
  void clear_rows() {
    MutableStorage()->removeMember("rows");
  }


  /**
   * Get a reference to the value of the '<code>rows</code>' attribute.
   */
  const client::JsonCppArray<TableDataInsertAllRequestRows > get_rows() const {
     const Json::Value& storage = Storage("rows");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<TableDataInsertAllRequestRows > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>rows</code>' property.
   *
   * The rows to insert.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<TableDataInsertAllRequestRows > mutable_rows() {
    Json::Value* storage = MutableStorage("rows");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<TableDataInsertAllRequestRows > >(storage);
  }

  /**
   * Determine if the '<code>skipInvalidRows</code>' attribute was set.
   *
   * @return true if the '<code>skipInvalidRows</code>' attribute was set.
   */
  bool has_skip_invalid_rows() const {
    return Storage().isMember("skipInvalidRows");
  }

  /**
   * Clears the '<code>skipInvalidRows</code>' attribute.
   */
  void clear_skip_invalid_rows() {
    MutableStorage()->removeMember("skipInvalidRows");
  }


  /**
   * Get the value of the '<code>skipInvalidRows</code>' attribute.
   */
  bool get_skip_invalid_rows() const {
    const Json::Value& storage = Storage("skipInvalidRows");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>skipInvalidRows</code>' attribute.
   *
   * [Optional] Insert all valid rows of a request, even if invalid rows exist.
   * The default value is false, which causes the entire request to fail if any
   * invalid rows exist.
   *
   * @param[in] value The new value.
   */
  void set_skip_invalid_rows(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("skipInvalidRows"));
  }

  /**
   * Determine if the '<code>templateSuffix</code>' attribute was set.
   *
   * @return true if the '<code>templateSuffix</code>' attribute was set.
   */
  bool has_template_suffix() const {
    return Storage().isMember("templateSuffix");
  }

  /**
   * Clears the '<code>templateSuffix</code>' attribute.
   */
  void clear_template_suffix() {
    MutableStorage()->removeMember("templateSuffix");
  }


  /**
   * Get the value of the '<code>templateSuffix</code>' attribute.
   */
  const StringPiece get_template_suffix() const {
    const Json::Value& v = Storage("templateSuffix");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>templateSuffix</code>' attribute.
   *
   * If specified, treats the destination table as a base template, and inserts
   * the rows into an instance table named "{destination}{templateSuffix}".
   * BigQuery will manage creation of the instance table, using the schema of
   * the base template table. See https://cloud.google.com/bigquery/streaming-
   * data-into-bigquery#template-tables for considerations when working with
   * templates tables.
   *
   * @param[in] value The new value.
   */
  void set_template_suffix(const StringPiece& value) {
    *MutableStorage("templateSuffix") = value.data();
  }

 private:
  void operator=(const TableDataInsertAllRequest&);
};  // TableDataInsertAllRequest
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_TABLE_DATA_INSERT_ALL_REQUEST_H_
