// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.6.0
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#include "google/bigquery_api/bigquery_service.h"

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/client/service/client_service.h"
#include "googleapis/client/service/media_uploader.h"
#include "googleapis/client/service/service_request_pager.h"
#include "googleapis/client/util/status.h"
#include "googleapis/client/util/uri_template.h"

#include "google/bigquery_api/dataset.h"
#include "google/bigquery_api/dataset_list.h"
#include "google/bigquery_api/get_query_results_response.h"
#include "google/bigquery_api/get_service_account_response.h"
#include "google/bigquery_api/job.h"
#include "google/bigquery_api/job_cancel_response.h"
#include "google/bigquery_api/job_list.h"
#include "google/bigquery_api/project_list.h"
#include "google/bigquery_api/query_request.h"
#include "google/bigquery_api/query_response.h"
#include "google/bigquery_api/table.h"
#include "google/bigquery_api/table_data_insert_all_request.h"
#include "google/bigquery_api/table_data_insert_all_response.h"
#include "google/bigquery_api/table_data_list.h"
#include "google/bigquery_api/table_list.h"


#include "googleapis/client/data/data_reader.h"
#include "googleapis/client/transport/http_request.h"
#include "googleapis/client/transport/http_transport.h"
#include "googleapis/client/util/uri_utils.h"
#include "absl/strings/str_cat.h"

namespace google_bigquery_api {
using namespace googleapis;
const char BigqueryService::googleapis_API_NAME[] = { "bigquery" };

const char BigqueryService::googleapis_API_VERSION[] = { "v2" };

const char BigqueryService::googleapis_API_GENERATOR[] = {
  "google-apis-code-generator 1.6.0 / 0.1.5"};


const char BigqueryService::SCOPES::BIGQUERY[] = {"https://www.googleapis.com/auth/bigquery"};

const char BigqueryService::SCOPES::BIGQUERY_INSERTDATA[] = {"https://www.googleapis.com/auth/bigquery.insertdata"};

const char BigqueryService::SCOPES::CLOUD_PLATFORM[] = {"https://www.googleapis.com/auth/cloud-platform"};

const char BigqueryService::SCOPES::CLOUD_PLATFORM_READ_ONLY[] = {"https://www.googleapis.com/auth/cloud-platform.read-only"};

const char BigqueryService::SCOPES::DEVSTORAGE_FULL_CONTROL[] = {"https://www.googleapis.com/auth/devstorage.full_control"};

const char BigqueryService::SCOPES::DEVSTORAGE_READ_ONLY[] = {"https://www.googleapis.com/auth/devstorage.read_only"};

const char BigqueryService::SCOPES::DEVSTORAGE_READ_WRITE[] = {"https://www.googleapis.com/auth/devstorage.read_write"};
BigqueryServiceBaseRequest::BigqueryServiceBaseRequest(
      const client::ClientService* service,
      client::AuthorizationCredential* credential,
      client::HttpRequest::HttpMethod method,
      const string& uri_template)
    : client::ClientServiceRequest(
          service, credential, method, uri_template),
      alt_("json"),
      pretty_print_(true),
      _have_alt_(false),
      _have_fields_(false),
      _have_key_(false),
      _have_oauth_token_(false),
      _have_pretty_print_(false),
      _have_quota_user_(false),
      _have_user_ip_(false) {
}

BigqueryServiceBaseRequest::~BigqueryServiceBaseRequest() {
}

util::Status BigqueryServiceBaseRequest::AppendVariable(
    const string& variable_name,
    const client::UriTemplateConfig& config,
    string* target) {
  return client::StatusInvalidArgument(
      absl::StrCat("Unknown url variable='", variable_name, "'"));
}

util::Status BigqueryServiceBaseRequest::AppendOptionalQueryParameters(
    string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_alt_) {
    absl::StrAppend(target, sep, "alt=",
                    client::CppValueToEscapedUrlValue(
                        alt_));
    sep = "&";
  }
  if (_have_fields_) {
    absl::StrAppend(target, sep, "fields=",
                    client::CppValueToEscapedUrlValue(
                        fields_));
    sep = "&";
  }
  if (_have_key_) {
    absl::StrAppend(target, sep, "key=",
                    client::CppValueToEscapedUrlValue(
                        key_));
    sep = "&";
  }
  if (_have_oauth_token_) {
    absl::StrAppend(target, sep, "oauth_token=",
                    client::CppValueToEscapedUrlValue(
                        oauth_token_));
    sep = "&";
  }
  if (_have_pretty_print_) {
    absl::StrAppend(target, sep, "prettyPrint=",
                    client::CppValueToEscapedUrlValue(
                        pretty_print_));
    sep = "&";
  }
  if (_have_quota_user_) {
    absl::StrAppend(target, sep, "quotaUser=",
                    client::CppValueToEscapedUrlValue(
                        quota_user_));
    sep = "&";
  }
  if (_have_user_ip_) {
    absl::StrAppend(target, sep, "userIp=",
                    client::CppValueToEscapedUrlValue(
                        user_ip_));
    sep = "&";
  }
  return client::ClientServiceRequest
         ::AppendOptionalQueryParameters(target);
}


void BigqueryServiceBaseRequest::AddJsonContentToRequest(
    const client::JsonCppData *content) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
        client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(content->MakeJsonReader());
}



// Standard constructor.
DatasetsResource_DeleteMethod::DatasetsResource_DeleteMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "projects/{projectId}/datasets/{datasetId}"),
      project_id_(project_id),
      dataset_id_(dataset_id),
      _have_delete_contents_(false) {
}

// Standard destructor.
DatasetsResource_DeleteMethod::~DatasetsResource_DeleteMethod() {
}

util::Status DatasetsResource_DeleteMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_delete_contents_) {
    absl::StrAppend(target, sep, "deleteContents=",
                    client::CppValueToEscapedUrlValue(
                        delete_contents_));
    sep = "&";
  }
  return BigqueryServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status DatasetsResource_DeleteMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "datasetId") {
    client::UriTemplate::AppendValue(
        dataset_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
DatasetsResource_GetMethod::DatasetsResource_GetMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "projects/{projectId}/datasets/{datasetId}"),
      project_id_(project_id),
      dataset_id_(dataset_id) {
}

// Standard destructor.
DatasetsResource_GetMethod::~DatasetsResource_GetMethod() {
}


util::Status DatasetsResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "datasetId") {
    client::UriTemplate::AppendValue(
        dataset_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
DatasetsResource_InsertMethod::DatasetsResource_InsertMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id, const Dataset& __request_content__)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "projects/{projectId}/datasets"),
      project_id_(project_id) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
DatasetsResource_InsertMethod::~DatasetsResource_InsertMethod() {
}


util::Status DatasetsResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
DatasetsResource_ListMethod::DatasetsResource_ListMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "projects/{projectId}/datasets"),
      project_id_(project_id),
      _have_all_(false),
      _have_filter_(false),
      _have_max_results_(false),
      _have_page_token_(false) {
}

// Standard destructor.
DatasetsResource_ListMethod::~DatasetsResource_ListMethod() {
}

util::Status DatasetsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_all_) {
    absl::StrAppend(target, sep, "all=",
                    client::CppValueToEscapedUrlValue(
                        all_));
    sep = "&";
  }
  if (_have_filter_) {
    absl::StrAppend(target, sep, "filter=",
                    client::CppValueToEscapedUrlValue(
                        filter_));
    sep = "&";
  }
  if (_have_max_results_) {
    absl::StrAppend(target, sep, "maxResults=",
                    client::CppValueToEscapedUrlValue(
                        max_results_));
    sep = "&";
  }
  if (_have_page_token_) {
    absl::StrAppend(target, sep, "pageToken=",
                    client::CppValueToEscapedUrlValue(
                        page_token_));
    sep = "&";
  }
  return BigqueryServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status DatasetsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
DatasetsResource_PatchMethod::DatasetsResource_PatchMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id, const Dataset& __request_content__)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "projects/{projectId}/datasets/{datasetId}"),
      project_id_(project_id),
      dataset_id_(dataset_id) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
DatasetsResource_PatchMethod::~DatasetsResource_PatchMethod() {
}


util::Status DatasetsResource_PatchMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "datasetId") {
    client::UriTemplate::AppendValue(
        dataset_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
DatasetsResource_UpdateMethod::DatasetsResource_UpdateMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id, const Dataset& __request_content__)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "projects/{projectId}/datasets/{datasetId}"),
      project_id_(project_id),
      dataset_id_(dataset_id) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
DatasetsResource_UpdateMethod::~DatasetsResource_UpdateMethod() {
}


util::Status DatasetsResource_UpdateMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "datasetId") {
    client::UriTemplate::AppendValue(
        dataset_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
JobsResource_CancelMethod::JobsResource_CancelMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& job_id)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "projects/{projectId}/jobs/{jobId}/cancel"),
      project_id_(project_id),
      job_id_(job_id),
      _have_location_(false) {
}

// Standard destructor.
JobsResource_CancelMethod::~JobsResource_CancelMethod() {
}

util::Status JobsResource_CancelMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_location_) {
    absl::StrAppend(target, sep, "location=",
                    client::CppValueToEscapedUrlValue(
                        location_));
    sep = "&";
  }
  return BigqueryServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status JobsResource_CancelMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "jobId") {
    client::UriTemplate::AppendValue(
        job_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
JobsResource_GetMethod::JobsResource_GetMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& job_id)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "projects/{projectId}/jobs/{jobId}"),
      project_id_(project_id),
      job_id_(job_id),
      _have_location_(false) {
}

// Standard destructor.
JobsResource_GetMethod::~JobsResource_GetMethod() {
}

util::Status JobsResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_location_) {
    absl::StrAppend(target, sep, "location=",
                    client::CppValueToEscapedUrlValue(
                        location_));
    sep = "&";
  }
  return BigqueryServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status JobsResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "jobId") {
    client::UriTemplate::AppendValue(
        job_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
JobsResource_GetQueryResultsMethod::JobsResource_GetQueryResultsMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& job_id)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "projects/{projectId}/queries/{jobId}"),
      project_id_(project_id),
      job_id_(job_id),
      _have_location_(false),
      _have_max_results_(false),
      _have_page_token_(false),
      _have_start_index_(false),
      _have_timeout_ms_(false) {
}

// Standard destructor.
JobsResource_GetQueryResultsMethod::~JobsResource_GetQueryResultsMethod() {
}

util::Status JobsResource_GetQueryResultsMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_location_) {
    absl::StrAppend(target, sep, "location=",
                    client::CppValueToEscapedUrlValue(
                        location_));
    sep = "&";
  }
  if (_have_max_results_) {
    absl::StrAppend(target, sep, "maxResults=",
                    client::CppValueToEscapedUrlValue(
                        max_results_));
    sep = "&";
  }
  if (_have_page_token_) {
    absl::StrAppend(target, sep, "pageToken=",
                    client::CppValueToEscapedUrlValue(
                        page_token_));
    sep = "&";
  }
  if (_have_start_index_) {
    absl::StrAppend(target, sep, "startIndex=",
                    client::CppValueToEscapedUrlValue(
                        start_index_));
    sep = "&";
  }
  if (_have_timeout_ms_) {
    absl::StrAppend(target, sep, "timeoutMs=",
                    client::CppValueToEscapedUrlValue(
                        timeout_ms_));
    sep = "&";
  }
  return BigqueryServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status JobsResource_GetQueryResultsMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "jobId") {
    client::UriTemplate::AppendValue(
        job_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// static
const client::MediaUploadSpec
JobsResource_InsertMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/bigquery/v2/projects/{projectId}/jobs", true);


// static
const client::MediaUploadSpec
JobsResource_InsertMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/bigquery/v2/projects/{projectId}/jobs", true);



// Deprecated constructor did not take media upload arguments.
JobsResource_InsertMethod::JobsResource_InsertMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id)
    : BigqueryServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      "projects/{projectId}/jobs"),
      project_id_(project_id) {
  uploader_.reset(new client::MediaUploader(
      &SIMPLE_MEDIA_UPLOAD,
      _service_->url_root(),
      client::JoinPath(
          _service_->url_path(), "projects/{projectId}/jobs")));
}
// Standard constructor.
JobsResource_InsertMethod::JobsResource_InsertMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id, const Job* _metadata_, const char* _media_content_type_, client::DataReader* _media_content_reader_)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "projects/{projectId}/jobs"),
      project_id_(project_id) {
  if (_media_content_reader_) {
    client::MediaUploader* uploader =
        new client::MediaUploader(
            &SIMPLE_MEDIA_UPLOAD,
            _service_->url_root(),
            client::JoinPath(
                _service_->url_path(), "projects/{projectId}/jobs"));
    if (_metadata_) {
      uploader->set_metadata(*_metadata_);
    }
    uploader->set_media_content_reader(
        _media_content_type_, _media_content_reader_);
    ResetMediaUploader(uploader);
  } else {
    AddJsonContentToRequest(_metadata_);
  }
}

// Standard destructor.
JobsResource_InsertMethod::~JobsResource_InsertMethod() {
}


util::Status JobsResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
JobsResource_ListMethod::JobsResource_ListMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "projects/{projectId}/jobs"),
      project_id_(project_id),
      _have_all_users_(false),
      _have_max_creation_time_(false),
      _have_max_results_(false),
      _have_min_creation_time_(false),
      _have_page_token_(false),
      _have_parent_job_id_(false),
      _have_projection_(false),
      _have_state_filter_(false) {
}

// Standard destructor.
JobsResource_ListMethod::~JobsResource_ListMethod() {
}

util::Status JobsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_all_users_) {
    absl::StrAppend(target, sep, "allUsers=",
                    client::CppValueToEscapedUrlValue(
                        all_users_));
    sep = "&";
  }
  if (_have_max_creation_time_) {
    absl::StrAppend(target, sep, "maxCreationTime=",
                    client::CppValueToEscapedUrlValue(
                        max_creation_time_));
    sep = "&";
  }
  if (_have_max_results_) {
    absl::StrAppend(target, sep, "maxResults=",
                    client::CppValueToEscapedUrlValue(
                        max_results_));
    sep = "&";
  }
  if (_have_min_creation_time_) {
    absl::StrAppend(target, sep, "minCreationTime=",
                    client::CppValueToEscapedUrlValue(
                        min_creation_time_));
    sep = "&";
  }
  if (_have_page_token_) {
    absl::StrAppend(target, sep, "pageToken=",
                    client::CppValueToEscapedUrlValue(
                        page_token_));
    sep = "&";
  }
  if (_have_parent_job_id_) {
    absl::StrAppend(target, sep, "parentJobId=",
                    client::CppValueToEscapedUrlValue(
                        parent_job_id_));
    sep = "&";
  }
  if (_have_projection_) {
    absl::StrAppend(target, sep, "projection=",
                    client::CppValueToEscapedUrlValue(
                        projection_));
    sep = "&";
  }
  if (_have_state_filter_) {
    if (!state_filter_.empty()) {
      target->append(sep);
      client::AppendIteratorToUrl(
        state_filter_.begin(), state_filter_.end(),
        "stateFilter", target);
      sep = "&";
    }
  }
  return BigqueryServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status JobsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
JobsResource_QueryMethod::JobsResource_QueryMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id, const QueryRequest& __request_content__)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "projects/{projectId}/queries"),
      project_id_(project_id) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
JobsResource_QueryMethod::~JobsResource_QueryMethod() {
}


util::Status JobsResource_QueryMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_GetServiceAccountMethod::ProjectsResource_GetServiceAccountMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "projects/{projectId}/serviceAccount"),
      project_id_(project_id) {
}

// Standard destructor.
ProjectsResource_GetServiceAccountMethod::~ProjectsResource_GetServiceAccountMethod() {
}


util::Status ProjectsResource_GetServiceAccountMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_ListMethod::ProjectsResource_ListMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "projects"),
      _have_max_results_(false),
      _have_page_token_(false) {
}

// Standard destructor.
ProjectsResource_ListMethod::~ProjectsResource_ListMethod() {
}

util::Status ProjectsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    absl::StrAppend(target, sep, "maxResults=",
                    client::CppValueToEscapedUrlValue(
                        max_results_));
    sep = "&";
  }
  if (_have_page_token_) {
    absl::StrAppend(target, sep, "pageToken=",
                    client::CppValueToEscapedUrlValue(
                        page_token_));
    sep = "&";
  }
  return BigqueryServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ProjectsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TabledataResource_InsertAllMethod::TabledataResource_InsertAllMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id, const std::string& table_id, const TableDataInsertAllRequest& __request_content__)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "projects/{projectId}/datasets/{datasetId}/tables/{tableId}/insertAll"),
      project_id_(project_id),
      dataset_id_(dataset_id),
      table_id_(table_id) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TabledataResource_InsertAllMethod::~TabledataResource_InsertAllMethod() {
}


util::Status TabledataResource_InsertAllMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "datasetId") {
    client::UriTemplate::AppendValue(
        dataset_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "tableId") {
    client::UriTemplate::AppendValue(
        table_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TabledataResource_ListMethod::TabledataResource_ListMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id, const std::string& table_id)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "projects/{projectId}/datasets/{datasetId}/tables/{tableId}/data"),
      project_id_(project_id),
      dataset_id_(dataset_id),
      table_id_(table_id),
      _have_max_results_(false),
      _have_page_token_(false),
      _have_selected_fields_(false),
      _have_start_index_(false) {
}

// Standard destructor.
TabledataResource_ListMethod::~TabledataResource_ListMethod() {
}

util::Status TabledataResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    absl::StrAppend(target, sep, "maxResults=",
                    client::CppValueToEscapedUrlValue(
                        max_results_));
    sep = "&";
  }
  if (_have_page_token_) {
    absl::StrAppend(target, sep, "pageToken=",
                    client::CppValueToEscapedUrlValue(
                        page_token_));
    sep = "&";
  }
  if (_have_selected_fields_) {
    absl::StrAppend(target, sep, "selectedFields=",
                    client::CppValueToEscapedUrlValue(
                        selected_fields_));
    sep = "&";
  }
  if (_have_start_index_) {
    absl::StrAppend(target, sep, "startIndex=",
                    client::CppValueToEscapedUrlValue(
                        start_index_));
    sep = "&";
  }
  return BigqueryServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status TabledataResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "datasetId") {
    client::UriTemplate::AppendValue(
        dataset_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "tableId") {
    client::UriTemplate::AppendValue(
        table_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TablesResource_DeleteMethod::TablesResource_DeleteMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id, const std::string& table_id)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "projects/{projectId}/datasets/{datasetId}/tables/{tableId}"),
      project_id_(project_id),
      dataset_id_(dataset_id),
      table_id_(table_id) {
}

// Standard destructor.
TablesResource_DeleteMethod::~TablesResource_DeleteMethod() {
}


util::Status TablesResource_DeleteMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "datasetId") {
    client::UriTemplate::AppendValue(
        dataset_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "tableId") {
    client::UriTemplate::AppendValue(
        table_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TablesResource_GetMethod::TablesResource_GetMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id, const std::string& table_id)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "projects/{projectId}/datasets/{datasetId}/tables/{tableId}"),
      project_id_(project_id),
      dataset_id_(dataset_id),
      table_id_(table_id),
      _have_selected_fields_(false) {
}

// Standard destructor.
TablesResource_GetMethod::~TablesResource_GetMethod() {
}

util::Status TablesResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_selected_fields_) {
    absl::StrAppend(target, sep, "selectedFields=",
                    client::CppValueToEscapedUrlValue(
                        selected_fields_));
    sep = "&";
  }
  return BigqueryServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status TablesResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "datasetId") {
    client::UriTemplate::AppendValue(
        dataset_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "tableId") {
    client::UriTemplate::AppendValue(
        table_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TablesResource_InsertMethod::TablesResource_InsertMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id, const Table& __request_content__)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "projects/{projectId}/datasets/{datasetId}/tables"),
      project_id_(project_id),
      dataset_id_(dataset_id) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TablesResource_InsertMethod::~TablesResource_InsertMethod() {
}


util::Status TablesResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "datasetId") {
    client::UriTemplate::AppendValue(
        dataset_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TablesResource_ListMethod::TablesResource_ListMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "projects/{projectId}/datasets/{datasetId}/tables"),
      project_id_(project_id),
      dataset_id_(dataset_id),
      _have_max_results_(false),
      _have_page_token_(false) {
}

// Standard destructor.
TablesResource_ListMethod::~TablesResource_ListMethod() {
}

util::Status TablesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    absl::StrAppend(target, sep, "maxResults=",
                    client::CppValueToEscapedUrlValue(
                        max_results_));
    sep = "&";
  }
  if (_have_page_token_) {
    absl::StrAppend(target, sep, "pageToken=",
                    client::CppValueToEscapedUrlValue(
                        page_token_));
    sep = "&";
  }
  return BigqueryServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status TablesResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "datasetId") {
    client::UriTemplate::AppendValue(
        dataset_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TablesResource_PatchMethod::TablesResource_PatchMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id, const std::string& table_id, const Table& __request_content__)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "projects/{projectId}/datasets/{datasetId}/tables/{tableId}"),
      project_id_(project_id),
      dataset_id_(dataset_id),
      table_id_(table_id) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TablesResource_PatchMethod::~TablesResource_PatchMethod() {
}


util::Status TablesResource_PatchMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "datasetId") {
    client::UriTemplate::AppendValue(
        dataset_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "tableId") {
    client::UriTemplate::AppendValue(
        table_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TablesResource_UpdateMethod::TablesResource_UpdateMethod(
    const BigqueryService* _service_, client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id, const std::string& table_id, const Table& __request_content__)
    : BigqueryServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "projects/{projectId}/datasets/{datasetId}/tables/{tableId}"),
      project_id_(project_id),
      dataset_id_(dataset_id),
      table_id_(table_id) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TablesResource_UpdateMethod::~TablesResource_UpdateMethod() {
}


util::Status TablesResource_UpdateMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "projectId") {
    client::UriTemplate::AppendValue(
        project_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "datasetId") {
    client::UriTemplate::AppendValue(
        dataset_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "tableId") {
    client::UriTemplate::AppendValue(
        table_id_, config, target);
    return client::StatusOk();
  }
  return BigqueryServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



BigqueryService::BigqueryService(client::HttpTransport* transport)
  : ClientService("https://www.googleapis.com/", "bigquery/v2/", transport), datasets_(this), jobs_(this), projects_(this), tabledata_(this), tables_(this) {
  this->SetBatchPath("batch/bigquery/v2");
}

BigqueryService::~BigqueryService() {
}


BigqueryService::DatasetsResource::DatasetsResource(BigqueryService* service)
  : service_(service) {
}



DatasetsResource_DeleteMethod* BigqueryService::DatasetsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id) const {
  return new DatasetsResource_DeleteMethod(service_, _credential_, project_id, dataset_id);
}


DatasetsResource_GetMethod* BigqueryService::DatasetsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id) const {
  return new DatasetsResource_GetMethod(service_, _credential_, project_id, dataset_id);
}


DatasetsResource_InsertMethod* BigqueryService::DatasetsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const std::string& project_id, const Dataset& __request_content__) const {
  return new DatasetsResource_InsertMethod(service_, _credential_, project_id, __request_content__);
}


DatasetsResource_ListMethod* BigqueryService::DatasetsResource::NewListMethod(client::AuthorizationCredential* _credential_, const std::string& project_id) const {
  return new DatasetsResource_ListMethod(service_, _credential_, project_id);
}


DatasetsResource_ListMethodPager* BigqueryService::DatasetsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const std::string& project_id) const {
  return new client::EncapsulatedServiceRequestPager<DatasetsResource_ListMethod, DatasetList>(new DatasetsResource_ListMethod(service_, _credential_, project_id));
}


DatasetsResource_PatchMethod* BigqueryService::DatasetsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id, const Dataset& __request_content__) const {
  return new DatasetsResource_PatchMethod(service_, _credential_, project_id, dataset_id, __request_content__);
}


DatasetsResource_UpdateMethod* BigqueryService::DatasetsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id, const Dataset& __request_content__) const {
  return new DatasetsResource_UpdateMethod(service_, _credential_, project_id, dataset_id, __request_content__);
}

BigqueryService::JobsResource::JobsResource(BigqueryService* service)
  : service_(service) {
}



JobsResource_CancelMethod* BigqueryService::JobsResource::NewCancelMethod(client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& job_id) const {
  return new JobsResource_CancelMethod(service_, _credential_, project_id, job_id);
}


JobsResource_GetMethod* BigqueryService::JobsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& job_id) const {
  return new JobsResource_GetMethod(service_, _credential_, project_id, job_id);
}


JobsResource_GetQueryResultsMethod* BigqueryService::JobsResource::NewGetQueryResultsMethod(client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& job_id) const {
  return new JobsResource_GetQueryResultsMethod(service_, _credential_, project_id, job_id);
}



// This factory method is deprecated in favor of the newer variation that
// also takes the media upload parameters.
JobsResource_InsertMethod* BigqueryService::JobsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const std::string& project_id) const {
  return new JobsResource_InsertMethod(service_, _credential_, project_id);
}

JobsResource_InsertMethod* BigqueryService::JobsResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const std::string& project_id, const Job* _metadata_, const char* _media_content_type_, client::DataReader* _media_content_reader_) const {
  return new JobsResource_InsertMethod(service_, _credential_, project_id, _metadata_, _media_content_type_, _media_content_reader_);
}


JobsResource_ListMethod* BigqueryService::JobsResource::NewListMethod(client::AuthorizationCredential* _credential_, const std::string& project_id) const {
  return new JobsResource_ListMethod(service_, _credential_, project_id);
}


JobsResource_ListMethodPager* BigqueryService::JobsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const std::string& project_id) const {
  return new client::EncapsulatedServiceRequestPager<JobsResource_ListMethod, JobList>(new JobsResource_ListMethod(service_, _credential_, project_id));
}


JobsResource_QueryMethod* BigqueryService::JobsResource::NewQueryMethod(client::AuthorizationCredential* _credential_, const std::string& project_id, const QueryRequest& __request_content__) const {
  return new JobsResource_QueryMethod(service_, _credential_, project_id, __request_content__);
}

BigqueryService::ProjectsResource::ProjectsResource(BigqueryService* service)
  : service_(service) {
}



ProjectsResource_GetServiceAccountMethod* BigqueryService::ProjectsResource::NewGetServiceAccountMethod(client::AuthorizationCredential* _credential_, const std::string& project_id) const {
  return new ProjectsResource_GetServiceAccountMethod(service_, _credential_, project_id);
}


ProjectsResource_ListMethod* BigqueryService::ProjectsResource::NewListMethod(client::AuthorizationCredential* _credential_) const {
  return new ProjectsResource_ListMethod(service_, _credential_);
}


ProjectsResource_ListMethodPager* BigqueryService::ProjectsResource::NewListMethodPager(client::AuthorizationCredential* _credential_) const {
  return new client::EncapsulatedServiceRequestPager<ProjectsResource_ListMethod, ProjectList>(new ProjectsResource_ListMethod(service_, _credential_));
}

BigqueryService::TabledataResource::TabledataResource(BigqueryService* service)
  : service_(service) {
}



TabledataResource_InsertAllMethod* BigqueryService::TabledataResource::NewInsertAllMethod(client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id, const std::string& table_id, const TableDataInsertAllRequest& __request_content__) const {
  return new TabledataResource_InsertAllMethod(service_, _credential_, project_id, dataset_id, table_id, __request_content__);
}


TabledataResource_ListMethod* BigqueryService::TabledataResource::NewListMethod(client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id, const std::string& table_id) const {
  return new TabledataResource_ListMethod(service_, _credential_, project_id, dataset_id, table_id);
}

BigqueryService::TablesResource::TablesResource(BigqueryService* service)
  : service_(service) {
}



TablesResource_DeleteMethod* BigqueryService::TablesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id, const std::string& table_id) const {
  return new TablesResource_DeleteMethod(service_, _credential_, project_id, dataset_id, table_id);
}


TablesResource_GetMethod* BigqueryService::TablesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id, const std::string& table_id) const {
  return new TablesResource_GetMethod(service_, _credential_, project_id, dataset_id, table_id);
}


TablesResource_InsertMethod* BigqueryService::TablesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id, const Table& __request_content__) const {
  return new TablesResource_InsertMethod(service_, _credential_, project_id, dataset_id, __request_content__);
}


TablesResource_ListMethod* BigqueryService::TablesResource::NewListMethod(client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id) const {
  return new TablesResource_ListMethod(service_, _credential_, project_id, dataset_id);
}


TablesResource_ListMethodPager* BigqueryService::TablesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id) const {
  return new client::EncapsulatedServiceRequestPager<TablesResource_ListMethod, TableList>(new TablesResource_ListMethod(service_, _credential_, project_id, dataset_id));
}


TablesResource_PatchMethod* BigqueryService::TablesResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id, const std::string& table_id, const Table& __request_content__) const {
  return new TablesResource_PatchMethod(service_, _credential_, project_id, dataset_id, table_id, __request_content__);
}


TablesResource_UpdateMethod* BigqueryService::TablesResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const std::string& project_id, const std::string& dataset_id, const std::string& table_id, const Table& __request_content__) const {
  return new TablesResource_UpdateMethod(service_, _credential_, project_id, dataset_id, table_id, __request_content__);
}
}  // namespace google_bigquery_api
