// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.6.0

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google API Discovery Service.
// Service:
//   BigQuery API (bigquery/v2)
// Generated from:
//   Version: v2
//   Revision: 20190224
// Generated by:
//    Tool: google-apis-code-generator 1.6.0
//     C++: 0.1.5
#ifndef  GOOGLE_BIGQUERY_API_TIME_PARTITIONING_H_
#define  GOOGLE_BIGQUERY_API_TIME_PARTITIONING_H_

#include <string>

#include "googleapis/base/integral_types.h"
#include "googleapis/client/data/jsoncpp_data.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_bigquery_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class TimePartitioning : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static TimePartitioning* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit TimePartitioning(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit TimePartitioning(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~TimePartitioning();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_bigquery_api::TimePartitioning</code>
   */
  const char* GetTypeName() const {
    return "google_bigquery_api::TimePartitioning";
  }

  /**
   * Determine if the '<code>expirationMs</code>' attribute was set.
   *
   * @return true if the '<code>expirationMs</code>' attribute was set.
   */
  bool has_expiration_ms() const {
    return Storage().isMember("expirationMs");
  }

  /**
   * Clears the '<code>expirationMs</code>' attribute.
   */
  void clear_expiration_ms() {
    MutableStorage()->removeMember("expirationMs");
  }


  /**
   * Get the value of the '<code>expirationMs</code>' attribute.
   */
  int64 get_expiration_ms() const {
    const Json::Value& storage = Storage("expirationMs");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>expirationMs</code>' attribute.
   *
   * [Optional] Number of milliseconds for which to keep the storage for
   * partitions in the table. The storage in a partition will have an expiration
   * time of its partition time plus this value.
   *
   * @param[in] value The new value.
   */
  void set_expiration_ms(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("expirationMs"));
  }

  /**
   * Determine if the '<code>field</code>' attribute was set.
   *
   * @return true if the '<code>field</code>' attribute was set.
   */
  bool has_field() const {
    return Storage().isMember("field");
  }

  /**
   * Clears the '<code>field</code>' attribute.
   */
  void clear_field() {
    MutableStorage()->removeMember("field");
  }


  /**
   * Get the value of the '<code>field</code>' attribute.
   */
  const std::string get_field() const {
    const Json::Value& v = Storage("field");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>field</code>' attribute.
   *
   * [Beta] [Optional] If not set, the table is partitioned by pseudo column,
   * referenced via either '_PARTITIONTIME' as TIMESTAMP type, or
   * '_PARTITIONDATE' as DATE type. If field is specified, the table is instead
   * partitioned by this field. The field must be a top-level TIMESTAMP or DATE
   * field. Its mode must be NULLABLE or REQUIRED.
   *
   * @param[in] value The new value.
   */
  void set_field(const std::string& value) {
    *MutableStorage("field") = value.data();
  }

  /**
   * Determine if the '<code>requirePartitionFilter</code>' attribute was set.
   *
   * @return true if the '<code>requirePartitionFilter</code>' attribute was
   * set.
   */
  bool has_require_partition_filter() const {
    return Storage().isMember("requirePartitionFilter");
  }

  /**
   * Clears the '<code>requirePartitionFilter</code>' attribute.
   */
  void clear_require_partition_filter() {
    MutableStorage()->removeMember("requirePartitionFilter");
  }


  /**
   * Get the value of the '<code>requirePartitionFilter</code>' attribute.
   */
  bool get_require_partition_filter() const {
    const Json::Value& storage = Storage("requirePartitionFilter");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>requirePartitionFilter</code>' attribute.
   * @param[in] value The new value.
   */
  void set_require_partition_filter(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("requirePartitionFilter"));
  }

  /**
   * Determine if the '<code>type</code>' attribute was set.
   *
   * @return true if the '<code>type</code>' attribute was set.
   */
  bool has_type() const {
    return Storage().isMember("type");
  }

  /**
   * Clears the '<code>type</code>' attribute.
   */
  void clear_type() {
    MutableStorage()->removeMember("type");
  }


  /**
   * Get the value of the '<code>type</code>' attribute.
   */
  const std::string get_type() const {
    const Json::Value& v = Storage("type");
    if (v == Json::Value::null) return std::string("");
    return std::string(v.asCString());
  }

  /**
   * Change the '<code>type</code>' attribute.
   *
   * [Required] The only type supported is DAY, which will generate one
   * partition per day.
   *
   * @param[in] value The new value.
   */
  void set_type(const std::string& value) {
    *MutableStorage("type") = value.data();
  }

 private:
  void operator=(const TimePartitioning&);
};  // TimePartitioning
}  // namespace google_bigquery_api
#endif  // GOOGLE_BIGQUERY_API_TIME_PARTITIONING_H_
